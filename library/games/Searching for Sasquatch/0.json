{
  "_meta": {
    "version": 15,
    "info": {
      "name": "Searching for Sasquatch",
      "image": "/assets/-955195684_166358",
      "rules": "",
      "bgg": "https://boardgamegeek.com/boardgame/246784/cryptid",
      "year": "2018",
      "mode": "vs",
      "time": "30-50",
      "attribution": "<div><div>Room design and layout by LawDawg96. Released to the Public Domain under CC0.</div><div><br></div><div>Icon by Delapouite available from https://game-icons.net under CC BY 3.0:&nbsp; open padlock.</div><div><span style=\"color: var(--overlayFontColor);\"><br></span></div><div><span style=\"color: var(--overlayFontColor);\">Icons by lorc available from&nbsp;</span><span style=\"color: var(--overlayFontColor);\">https://game-icons.net under CC BY 3.0: closed padlock, magnifying glass.</span></div><div><span style=\"color: var(--overlayFontColor);\"><br></span></div><div>The background woods image was created using the Midjourney artificial intelligence image generator, https://www.midjourney.com/home/, using the following prompt: \"pacific northwest woods photograph --ar 8:5\".</div></div><div><br></div><div>The sasquatch footprint and silhouette is available for personal use from:&nbsp;<span style=\"color: var(--overlayFontColor);\">https://clipart-library.com/clip-art/sasquatch-silhouette-vector-5.htm.</span></div><div><span style=\"color: var(--overlayFontColor);\"><br></span></div><div><span style=\"color: var(--overlayFontColor);\">Data for the predefined maps, clues, and hints is from Tony Ye 's (sionar) implementation of a version of Cryptid for Tabletop Simulator, available from&nbsp;</span>https://github.com/sionar/Cryptid.</div>",
      "lastUpdate": 1711721961940,
      "showName": true,
      "skill": "",
      "description": "Give location clues using pieces on a board to confuse other players while correctly interpreting the clues they give you. Be the first to deduce the location of the elusive sasquatch and claim the win.",
      "similarImage": "",
      "similarName": "Cryptid",
      "similarDesigner": "Hal Duncan, Ruth Veevers",
      "similarAwards": "2022 Kennerspiel des Jahres Nominee\n2020 Tric Trac Nominee\n2020 Palme d'Or for Best Family Game\n2019 Origins Awards Best Board Game Nominee\n2019 Juego del AÃ±o Finalist\n2019 Dragon Awards Best Science Fiction or Fantasy Board Game Nominee\n2019 American Tabletop Strategy Games Recommended\n2018 Golden Geek Most Innovative Board Game Nominee",
      "ruleText": "",
      "helpText": "Players take seats. Press reset button in upper right to begin.<div><br></div><div>You will be given a choice to use a predefined board from the rule book or set up the board manually.</div><div><br></div><div><b>Predefined boards:</b></div><div>&nbsp;</div><div>The clue will be displayed below your seat. A random player is automatically selected to start.</div><div><br></div><div>If players agree to show the hint, press the magnifying glass at the bottom of the screen. After the confirmation button is pressed, the hint will be displayed at the bottom of the screen for all players to see.</div><div><br></div><div><b>Manual boards</b>:</div><div><br></div><div>Board setups with clues and hints can be found in various sources online.&nbsp; To set up the board, press the numbered circles representing the tile (1-6) that should be placed in that position along with the orientation (rotated 180 degrees or not). If you make a mistake, you can drag a board to a new position and click on it to rotate it.&nbsp;<span style=\"color: var(--overlayFontColor);\">Once the tiles are in place, manually drag the octagon and triangle shapes to their positions on the board.</span></div><div><span style=\"color: var(--overlayFontColor);\"><br></span></div><div><span style=\"color: var(--overlayFontColor);\">The padlock in the lower left of the screen can lock or unlock the static tiles and pieces into place. The lock is triggered automatically after clicking to remove the setup instructions.</span></div><div><br></div><div>Each player can type their clue (from the online source) into the label provided below their name.&nbsp; Similarly, once players have agreed to view the hint, press the hint icon button and one player can type the hint into the label at the bottom of the screen.</div><div><br></div><div><b>Game play:</b></div><div><b><br></b></div><div>At every point in the game, players are prompted with instructions next to their seat. If the instructions get out of cycle with the actual game play, everything will be reset the next time a player initiates a search or asks a question.</div><div><b><br></b></div><div>Players take turns placing two cubes onto the board into places where the sasquatch cannot be based on their clue. Cubes always indicate a place the sasquatch cannot be and discs indicate places where the sasquatch could be. Always play cubes and discs based on your own clue and not what you may have deduced based on what other players have done.</div><div><br></div><div>After each player has placed two cubes, click on the box with instructions at the bottom of the screen to begin play. The player whose turn it is moves the pin to a place on the board. Then that player initiates either a question or a search.</div><div><br></div><div>To ask a question, press the question mark symbol next to the player you want to ask. That player is being asked whether, in the space with the pin, according to that player's clue, the sasquatch cannot be there or may be there. The player moves a cube or disc accordingly. Then the initiating player must play a cube somewhere else if the asked player plays a cube.</div><div><br></div><div>To initiate a search, press the binoculars icon next to your seat. You will be prompted to play a disc. Afterwards, in turn, each player that does not have a disc on that space will be asked to play. That continues on that space until a cube is played or it contains a disc from every player. If a cube is played, then the player initiating the search much also play a cube somewhere else. And the searching player wins if no cube is played.</div><div><br></div><div>If a player makes certain invalid moves such as trying to place anything on a space that already has a cube or placing a disc on a place where that player already has a disc, the instructions box will report the invalid play. The piece will also automatically be moved to the bottom center of the board.</div>",
      "variantImage": "",
      "variant": "",
      "language": "en-US",
      "players": "3-5"
    }
  },
  "tile1": {
    "id": "tile1",
    "width": 475,
    "height": 313,
    "z": 9,
    "fixedParent": true,
    "parent": "boardBack",
    "grid": [
      {
        "x": 448,
        "y": 258
      }
    ],
    "css": {
      "pointer-events": "none"
    },
    "rotationChangeRoutine": [
      {
        "func": "SELECT",
        "property": "hexTile",
        "value": true
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "parent",
        "value": "${PROPERTY id}"
      },
      "var rot =  ${PROPERTY rotation} - 30",
      {
        "func": "SET",
        "property": "rotation",
        "value": "${rot}"
      }
    ],
    "tilePosition": "2",
    "tile": true,
    "x": -600
  },
  "tile1Label": {
    "id": "tile1Label",
    "x": 27,
    "y": 10,
    "text": 1,
    "css": {
      "font-size": "20px",
      "color": "white"
    },
    "width": 30,
    "height": 30,
    "fixedParent": true,
    "parent": "tile1",
    "layer": 2,
    "movable": false,
    "z": 1
  },
  "hex2": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex2",
    "type": "holder",
    "x": 75,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex3": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex3",
    "type": "holder",
    "x": 150,
    "y": 0,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "z": 1,
    "rotation": -30,
    "clickable": true
  },
  "hex4": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex4",
    "type": "holder",
    "x": 225,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex5": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex5",
    "type": "holder",
    "x": 300,
    "y": 0,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "z": 1,
    "clickable": true
  },
  "hex6": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex6",
    "type": "holder",
    "x": 375,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex7": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex7",
    "type": "holder",
    "x": 0,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex8": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex8",
    "type": "holder",
    "x": 75,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex9": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex9",
    "type": "holder",
    "x": 150,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex10": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex10",
    "type": "holder",
    "x": 225,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex11": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex11",
    "type": "holder",
    "x": 300,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex12": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex12",
    "type": "holder",
    "x": 375,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex13": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex13",
    "type": "holder",
    "x": 0,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex14": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex14",
    "type": "holder",
    "x": 75,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex15": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex15",
    "type": "holder",
    "x": 150,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex16": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex16",
    "type": "holder",
    "x": 225,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex17": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex17",
    "type": "holder",
    "x": 300,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex18": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex18",
    "type": "holder",
    "x": 375,
    "y": 216.5,
    "z": 3,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "tile2": {
    "inheritFrom": {
      "tile1": "*"
    },
    "id": "tile2",
    "z": 1,
    "rotation": 0,
    "activeFace": 0,
    "tilePosition": "0",
    "x": -600,
    "y": 0,
    "movable": true
  },
  "tile2Label": {
    "inheritFrom": {
      "tile1Label": "*"
    },
    "id": "tile2Label",
    "parent": "tile2",
    "text": 2,
    "layer": 2,
    "css": {
      "font-size": "20px",
      "color": "white"
    },
    "z": 1
  },
  "hex19": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex19",
    "type": "holder",
    "parent": "tile2",
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "z": 1,
    "clickable": true
  },
  "hex20": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex20",
    "type": "holder",
    "parent": "tile2",
    "x": 75,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex21": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex21",
    "type": "holder",
    "parent": "tile2",
    "x": 150,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex22": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex22",
    "type": "holder",
    "parent": "tile2",
    "x": 225,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex23": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex23",
    "type": "holder",
    "parent": "tile2",
    "x": 300,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex24": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex24",
    "type": "holder",
    "parent": "tile2",
    "x": 375,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex25": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex25",
    "type": "holder",
    "parent": "tile2",
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex26": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex26",
    "type": "holder",
    "parent": "tile2",
    "x": 75,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex27": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex27",
    "type": "holder",
    "parent": "tile2",
    "x": 150,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex28": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex28",
    "type": "holder",
    "parent": "tile2",
    "x": 225,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex29": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex29",
    "type": "holder",
    "parent": "tile2",
    "x": 300,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex30": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex30",
    "type": "holder",
    "parent": "tile2",
    "x": 375,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex31": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex31",
    "type": "holder",
    "parent": "tile2",
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex32": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex32",
    "type": "holder",
    "parent": "tile2",
    "x": 75,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex33": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex33",
    "type": "holder",
    "parent": "tile2",
    "x": 150,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex34": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex34",
    "type": "holder",
    "parent": "tile2",
    "x": 225,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex35": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex35",
    "type": "holder",
    "parent": "tile2",
    "x": 300,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "hex36": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex36",
    "type": "holder",
    "parent": "tile2",
    "x": 375,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": -30,
    "clickable": true
  },
  "tile3": {
    "inheritFrom": {
      "tile1": "*"
    },
    "id": "tile3",
    "z": 1,
    "rotation": 180,
    "tilePosition": "4",
    "movable": true,
    "x": -600,
    "y": 0
  },
  "tile3Label": {
    "inheritFrom": {
      "tile1Label": "*"
    },
    "id": "tile3Label",
    "parent": "tile3",
    "text": 3,
    "css": {
      "font-size": "20px",
      "color": "white"
    },
    "z": 1
  },
  "hex37": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex37",
    "type": "holder",
    "parent": "tile3",
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "z": 1,
    "rotation": 150,
    "clickable": true
  },
  "hex38": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex38",
    "type": "holder",
    "parent": "tile3",
    "x": 75,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex39": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex39",
    "type": "holder",
    "parent": "tile3",
    "x": 150,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex40": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex40",
    "type": "holder",
    "parent": "tile3",
    "x": 225,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex41": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex41",
    "type": "holder",
    "parent": "tile3",
    "x": 300,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex42": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex42",
    "type": "holder",
    "parent": "tile3",
    "x": 375,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex43": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex43",
    "type": "holder",
    "parent": "tile3",
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex44": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex44",
    "type": "holder",
    "parent": "tile3",
    "x": 75,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex45": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex45",
    "type": "holder",
    "parent": "tile3",
    "x": 150,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex46": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex46",
    "type": "holder",
    "parent": "tile3",
    "x": 225,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex47": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex47",
    "type": "holder",
    "parent": "tile3",
    "x": 300,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex48": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex48",
    "type": "holder",
    "parent": "tile3",
    "x": 375,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex49": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex49",
    "type": "holder",
    "parent": "tile3",
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex50": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex50",
    "type": "holder",
    "parent": "tile3",
    "x": 75,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex51": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex51",
    "type": "holder",
    "parent": "tile3",
    "x": 150,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex52": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex52",
    "type": "holder",
    "parent": "tile3",
    "x": 225,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex53": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex53",
    "type": "holder",
    "parent": "tile3",
    "x": 300,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex54": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex54",
    "type": "holder",
    "parent": "tile3",
    "x": 375,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "tile4": {
    "inheritFrom": {
      "tile1": "*"
    },
    "id": "tile4",
    "z": 1,
    "rotation": 180,
    "tilePosition": "3",
    "movable": true,
    "x": -600,
    "y": 0
  },
  "tile4Label": {
    "inheritFrom": {
      "tile1Label": "*"
    },
    "id": "tile4Label",
    "parent": "tile4",
    "text": 4,
    "css": {
      "font-size": "20px",
      "color": "white"
    },
    "z": 1
  },
  "hex55": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex55",
    "type": "holder",
    "parent": "tile4",
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "z": 1,
    "clickable": true
  },
  "hex56": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex56",
    "type": "holder",
    "parent": "tile4",
    "x": 75,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex57": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex57",
    "type": "holder",
    "parent": "tile4",
    "x": 150,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex58": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex58",
    "type": "holder",
    "parent": "tile4",
    "x": 225,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex59": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex59",
    "type": "holder",
    "parent": "tile4",
    "x": 300,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex60": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex60",
    "type": "holder",
    "parent": "tile4",
    "x": 375,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex61": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex61",
    "type": "holder",
    "parent": "tile4",
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex62": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex62",
    "type": "holder",
    "parent": "tile4",
    "x": 75,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex63": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex63",
    "type": "holder",
    "parent": "tile4",
    "x": 150,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex64": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex64",
    "type": "holder",
    "parent": "tile4",
    "x": 225,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex65": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex65",
    "type": "holder",
    "parent": "tile4",
    "x": 300,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex66": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex66",
    "type": "holder",
    "parent": "tile4",
    "x": 375,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex67": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex67",
    "type": "holder",
    "parent": "tile4",
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex68": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex68",
    "type": "holder",
    "parent": "tile4",
    "x": 75,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex69": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex69",
    "type": "holder",
    "parent": "tile4",
    "x": 150,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex70": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex70",
    "type": "holder",
    "parent": "tile4",
    "x": 225,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex71": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex71",
    "type": "holder",
    "parent": "tile4",
    "x": 300,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex72": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex72",
    "type": "holder",
    "parent": "tile4",
    "x": 375,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "tile5": {
    "inheritFrom": {
      "tile1": "*"
    },
    "id": "tile5",
    "z": 1,
    "rotation": 180,
    "tilePosition": "5",
    "x": -600,
    "y": 0,
    "movable": true
  },
  "tile5Label": {
    "inheritFrom": {
      "tile1Label": "*"
    },
    "id": "tile5Label",
    "parent": "tile5",
    "text": 5,
    "css": {
      "font-size": "20px",
      "color": "white"
    },
    "z": 1
  },
  "hex73": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex73",
    "type": "holder",
    "parent": "tile5",
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "z": 1,
    "clickable": true
  },
  "hex74": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex74",
    "type": "holder",
    "parent": "tile5",
    "x": 75,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex75": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex75",
    "type": "holder",
    "parent": "tile5",
    "x": 150,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex76": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex76",
    "type": "holder",
    "parent": "tile5",
    "x": 225,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex77": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex77",
    "type": "holder",
    "parent": "tile5",
    "x": 300,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex78": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex78",
    "type": "holder",
    "parent": "tile5",
    "x": 375,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex79": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex79",
    "type": "holder",
    "parent": "tile5",
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex80": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex80",
    "type": "holder",
    "parent": "tile5",
    "x": 75,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex81": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex81",
    "type": "holder",
    "parent": "tile5",
    "x": 150,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex82": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex82",
    "type": "holder",
    "parent": "tile5",
    "x": 225,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex83": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex83",
    "type": "holder",
    "parent": "tile5",
    "x": 300,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex84": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex84",
    "type": "holder",
    "parent": "tile5",
    "x": 375,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex85": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex85",
    "type": "holder",
    "parent": "tile5",
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex86": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex86",
    "type": "holder",
    "parent": "tile5",
    "x": 75,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex87": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex87",
    "type": "holder",
    "parent": "tile5",
    "x": 150,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex88": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex88",
    "type": "holder",
    "parent": "tile5",
    "x": 225,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex89": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex89",
    "type": "holder",
    "parent": "tile5",
    "x": 300,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex90": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex90",
    "type": "holder",
    "parent": "tile5",
    "x": 375,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "tile6": {
    "inheritFrom": {
      "tile1": "*"
    },
    "id": "tile6",
    "x": -600,
    "y": 0,
    "z": 1,
    "rotation": 180,
    "tilePosition": "1",
    "movable": true
  },
  "tile6Label": {
    "inheritFrom": {
      "tile1Label": "*"
    },
    "id": "tile6Label",
    "parent": "tile6",
    "text": 6,
    "layer": 2,
    "css": {
      "font-size": "20px",
      "color": "white"
    },
    "z": 1
  },
  "hex91": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex91",
    "type": "holder",
    "parent": "tile6",
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "z": 1,
    "clickable": true
  },
  "hex92": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex92",
    "type": "holder",
    "parent": "tile6",
    "x": 75,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY desert}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex93": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex93",
    "type": "holder",
    "parent": "tile6",
    "x": 150,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex94": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex94",
    "type": "holder",
    "parent": "tile6",
    "x": 225,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex95": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex95",
    "type": "holder",
    "parent": "tile6",
    "x": 300,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex96": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex96",
    "type": "holder",
    "parent": "tile6",
    "x": 375,
    "y": 43.3,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex97": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex97",
    "type": "holder",
    "parent": "tile6",
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex98": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex98",
    "type": "holder",
    "parent": "tile6",
    "x": 75,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex99": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex99",
    "type": "holder",
    "parent": "tile6",
    "x": 150,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex100": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex100",
    "type": "holder",
    "parent": "tile6",
    "x": 225,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY swamp}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex101": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex101",
    "type": "holder",
    "parent": "tile6",
    "x": 300,
    "y": 86.6,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex102": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex102",
    "type": "holder",
    "parent": "tile6",
    "x": 375,
    "y": 129.9,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex103": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex103",
    "type": "holder",
    "parent": "tile6",
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY mountain}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex104": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex104",
    "type": "holder",
    "parent": "tile6",
    "x": 75,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex105": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex105",
    "type": "holder",
    "parent": "tile6",
    "x": 150,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex106": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex106",
    "type": "holder",
    "parent": "tile6",
    "x": 225,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex107": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex107",
    "type": "holder",
    "parent": "tile6",
    "x": 300,
    "y": 173.2,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "hex108": {
    "inheritFrom": {
      "hex1": "*"
    },
    "id": "hex108",
    "type": "holder",
    "parent": "tile6",
    "x": 375,
    "y": 216.5,
    "z": 1,
    "css": {
      "background-image": "url('${PROPERTY forest}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "rotation": 150,
    "clickable": true
  },
  "bear1": {
    "id": "bear1",
    "parent": "hex16",
    "fixedParent": true,
    "scale": 0.8,
    "z": 1,
    "image": "/assets/1282886927_334",
    "movable": false,
    "css": {
      "pointer-events": "none"
    }
  },
  "cougar1": {
    "id": "cougar1",
    "x": 0,
    "y": 0,
    "inheritFrom": {
      "bear1": "*"
    },
    "image": "/assets/-1929062463_313",
    "parent": "hex19",
    "css": {
      "pointer-events": "none"
    },
    "z": 1
  },
  "cougar2": {
    "inheritFrom": {
      "cougar1": "*"
    },
    "id": "cougar2",
    "x": 0,
    "y": 0,
    "css": {
      "pointer-events": "none"
    },
    "z": 1,
    "parent": "hex20"
  },
  "cougar3": {
    "inheritFrom": {
      "cougar1": "*"
    },
    "id": "cougar3",
    "x": 0,
    "y": 0,
    "css": {
      "pointer-events": "none"
    },
    "z": 1,
    "parent": "hex21"
  },
  "cougar6": {
    "inheritFrom": {
      "cougar1": "*"
    },
    "id": "cougar6",
    "x": 0,
    "y": 0,
    "parent": "hex44",
    "css": {
      "pointer-events": "none"
    },
    "z": 1
  },
  "cougar4": {
    "inheritFrom": {
      "cougar1": "*"
    },
    "id": "cougar4",
    "x": 0,
    "y": 0,
    "parent": "hex43",
    "css": {
      "pointer-events": "none"
    },
    "z": 1
  },
  "cougar5": {
    "inheritFrom": {
      "cougar1": "*"
    },
    "id": "cougar5",
    "x": 0,
    "y": 0,
    "parent": "hex49",
    "css": {
      "pointer-events": "none"
    },
    "z": 1
  },
  "cougar7": {
    "inheritFrom": {
      "cougar1": "*"
    },
    "id": "cougar7",
    "x": 0,
    "y": 0,
    "parent": "hex66",
    "css": {
      "pointer-events": "none"
    },
    "z": 1
  },
  "cougar8": {
    "inheritFrom": {
      "cougar1": "*"
    },
    "id": "cougar8",
    "x": 0,
    "y": 0,
    "parent": "hex72",
    "css": {
      "pointer-events": "none"
    },
    "z": 1,
    "rotation": 0
  },
  "bear3": {
    "inheritFrom": {
      "bear1": "*"
    },
    "id": "bear3",
    "x": 0,
    "y": 0,
    "parent": "hex89",
    "css": {
      "pointer-events": "none"
    },
    "z": 1,
    "rotation": 0
  },
  "bear4": {
    "inheritFrom": {
      "bear1": "*"
    },
    "id": "bear4",
    "x": 0,
    "y": 0,
    "parent": "hex84",
    "css": {
      "pointer-events": "none"
    },
    "z": 1,
    "rotation": 0
  },
  "bear5": {
    "inheritFrom": {
      "bear1": "*"
    },
    "id": "bear5",
    "x": 0,
    "y": 0,
    "parent": "hex90",
    "css": {
      "pointer-events": "none"
    },
    "z": 1,
    "rotation": 0
  },
  "bear6": {
    "inheritFrom": {
      "bear1": "*"
    },
    "id": "bear6",
    "x": 0,
    "y": 0,
    "parent": "hex97",
    "css": {
      "pointer-events": "none"
    },
    "z": 1,
    "rotation": 0
  },
  "bear7": {
    "inheritFrom": {
      "bear1": "*"
    },
    "id": "bear7",
    "x": 0,
    "y": 0,
    "parent": "hex91",
    "css": {
      "pointer-events": "none"
    },
    "z": 1,
    "rotation": 0
  },
  "boardBack": {
    "id": "boardBack",
    "width": 925,
    "height": 830,
    "z": 1,
    "movable": false,
    "css": {
      "pointer-events": "none"
    }
  },
  "seat1": {
    "type": "seat",
    "id": "seat1",
    "x": 1050,
    "y": 68,
    "width": 172,
    "height": 48,
    "borderRadius": 8,
    "css": {
      "default": {
        "cursor": "pointer",
        "gap": "5px",
        "font-size": "21px",
        "box-shadow": "0 2px 5px #00000066",
        "text-shadow": "${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, ${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}",
        "background": "${PROPERTY mainColor}",
        "color": "white",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY outlineColor}",
        "box-sizing": "border-box"
      },
      ".seated.turn": {
        "box-shadow": "0px 0px 20px 5px ${PROPERTY glowColor}"
      },
      ".seated.turn::after": {
        "xcontent": "'Active Player'",
        "content": "'!'",
        "font-size": "18px",
        "line-height": "1em",
        "white-space": "wrap",
        "background-color": "${PROPERTY outlineColor}",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY mainColor}",
        "background-size": "200% auto",
        "color": "#ffffff",
        "text-shadow": "0 1px 5px #000000cc",
        "width": "1em",
        "height": "1em",
        "text-align": "center",
        "text-transform": "uppercase",
        "position": "absolute",
        "right": "-12px",
        "top": "-12px",
        "padding": "2px",
        "border-radius": "100px",
        "box-shadow": "0 0 5px #000000bb",
        "pointer-events": "none"
      }
    },
    "hideWhenUnused": true,
    "colorContrast": "#000000",
    "glowColor": "#ff0000aa",
    "outlineColor": "#000000bb",
    "textColor": "#ffffff",
    "textShadowBlur": 2,
    "textShadowDistance": 2,
    "clickRoutine": [
      {
        "func": "CALL",
        "routine": "useSeatRoutine"
      },
      "var playerName = ${result.1}"
    ],
    "useSeatRoutine": [
      "var leaveSeat = false",
      "var name = ${PROPERTY player}",
      "var color = 'red'",
      "var result = []",
      {
        "func": "IF",
        "operand1": "${PROPERTY player}",
        "relation": "==",
        "operand2": "",
        "thenRoutine": [
          {
            "func": "INPUT",
            "header": "Enter your name.",
            "fields": [
              {
                "type": "string",
                "label": "Your Name:",
                "variable": "name",
                "value": "${playerName}"
              }
            ]
          }
        ],
        "elseRoutine": [
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              {
                "func": "INPUT",
                "header": "Enter your name.",
                "fields": [
                  {
                    "type": "string",
                    "label": "Your Name:",
                    "variable": "name",
                    "value": "${playerName}"
                  },
                  {
                    "type": "subtitle",
                    "text": "All done?",
                    "css": "background-color: var(--VTTblue);color:white;"
                  },
                  {
                    "type": "checkbox",
                    "label": "Stand up from seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ],
            "elseRoutine": [
              {
                "func": "INPUT",
                "header": "Are you sure you want to remove ${PROPERTY player} from this seat?",
                "cancelButtonText": "Cancel",
                "confirmButtonText": "Okay",
                "fields": [
                  {
                    "type": "checkbox",
                    "label": "Remove this player from their seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "func": "IF",
        "condition": "${leaveSeat}",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "player",
            "value": ""
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "mainColor",
            "value": "#ffffff"
          }
        ],
        "elseRoutine": [
          "var updatePlayerandColor = false",
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "condition": "${name}",
            "elseRoutine": [
              "var updatePlayerandColor = false"
            ]
          },
          {
            "func": "IF",
            "condition": "${updatePlayerandColor}",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "player",
                "value": "${name}"
              },
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "mainColor",
                "value": "${PROPERTY staticColor}"
              },
              "var result = push ${name}"
            ]
          }
        ]
      }
    ],
    "z": 1,
    "staticColor": "#ff0000",
    "mainColor": "#ffffff"
  },
  "seat2": {
    "type": "seat",
    "id": "seat2",
    "x": 1050,
    "y": 238,
    "index": 2,
    "width": 172,
    "height": 48,
    "borderRadius": 8,
    "css": {
      "default": {
        "cursor": "pointer",
        "gap": "5px",
        "font-size": "21px",
        "box-shadow": "0 2px 5px #00000066",
        "text-shadow": "${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, ${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}",
        "background": "${PROPERTY mainColor}",
        "color": "white",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY outlineColor}",
        "box-sizing": "border-box"
      },
      ".seated.turn": {
        "box-shadow": "0px 0px 20px 5px ${PROPERTY glowColor}"
      },
      ".seated.turn::after": {
        "xcontent": "'Active Player'",
        "content": "'!'",
        "font-size": "18px",
        "line-height": "1em",
        "white-space": "wrap",
        "background-color": "${PROPERTY outlineColor}",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY mainColor}",
        "background-size": "200% auto",
        "color": "#ffffff",
        "text-shadow": "0 1px 5px #000000cc",
        "width": "1em",
        "height": "1em",
        "text-align": "center",
        "text-transform": "uppercase",
        "position": "absolute",
        "right": "-12px",
        "top": "-12px",
        "padding": "2px",
        "border-radius": "100px",
        "box-shadow": "0 0 5px #000000bb",
        "pointer-events": "none"
      }
    },
    "hideWhenUnused": true,
    "colorContrast": "#000000",
    "glowColor": "#00ffeeaa",
    "outlineColor": "#000000bb",
    "textColor": "#ffffff",
    "textShadowBlur": 2,
    "textShadowDistance": 2,
    "clickRoutine": [
      {
        "func": "CALL",
        "routine": "useSeatRoutine"
      },
      "var playerName = ${result.1}"
    ],
    "useSeatRoutine": [
      "var leaveSeat = false",
      "var name = ${PROPERTY player}",
      "var color = 'red'",
      "var result = []",
      {
        "func": "IF",
        "operand1": "${PROPERTY player}",
        "relation": "==",
        "operand2": "",
        "thenRoutine": [
          {
            "func": "INPUT",
            "header": "Enter your name.",
            "fields": [
              {
                "type": "string",
                "label": "Your Name:",
                "variable": "name",
                "value": "${playerName}"
              }
            ]
          }
        ],
        "elseRoutine": [
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              {
                "func": "INPUT",
                "header": "Enter your name.",
                "fields": [
                  {
                    "type": "string",
                    "label": "Your Name:",
                    "variable": "name",
                    "value": "${playerName}"
                  },
                  {
                    "type": "subtitle",
                    "text": "All done?",
                    "css": "background-color: var(--VTTblue);color:white;"
                  },
                  {
                    "type": "checkbox",
                    "label": "Stand up from seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ],
            "elseRoutine": [
              {
                "func": "INPUT",
                "header": "Are you sure you want to remove ${PROPERTY player} from this seat?",
                "cancelButtonText": "Cancel",
                "confirmButtonText": "Okay",
                "fields": [
                  {
                    "type": "checkbox",
                    "label": "Remove this player from their seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "func": "IF",
        "condition": "${leaveSeat}",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "player",
            "value": ""
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "mainColor",
            "value": "#ffffff"
          }
        ],
        "elseRoutine": [
          "var updatePlayerandColor = false",
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "condition": "${name}",
            "elseRoutine": [
              "var updatePlayerandColor = false"
            ]
          },
          {
            "func": "IF",
            "condition": "${updatePlayerandColor}",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "player",
                "value": "${name}"
              },
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "mainColor",
                "value": "${PROPERTY staticColor}"
              },
              "var result = push ${name}"
            ]
          }
        ]
      }
    ],
    "z": 1,
    "staticColor": "#00ffee",
    "mainColor": "#ffffff"
  },
  "seat3": {
    "type": "seat",
    "id": "seat3",
    "x": 1050,
    "y": 410,
    "index": 3,
    "width": 172,
    "height": 48,
    "borderRadius": 8,
    "css": {
      "default": {
        "cursor": "pointer",
        "gap": "5px",
        "font-size": "21px",
        "box-shadow": "0 2px 5px #00000066",
        "text-shadow": "${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, ${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}",
        "background": "${PROPERTY mainColor}",
        "color": "white",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY outlineColor}",
        "box-sizing": "border-box"
      },
      ".seated.turn": {
        "box-shadow": "0px 0px 20px 5px ${PROPERTY glowColor}"
      },
      ".seated.turn::after": {
        "xcontent": "'Active Player'",
        "content": "'!'",
        "font-size": "18px",
        "line-height": "1em",
        "white-space": "wrap",
        "background-color": "${PROPERTY outlineColor}",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY mainColor}",
        "background-size": "200% auto",
        "color": "#ffffff",
        "text-shadow": "0 1px 5px #000000cc",
        "width": "1em",
        "height": "1em",
        "text-align": "center",
        "text-transform": "uppercase",
        "position": "absolute",
        "right": "-12px",
        "top": "-12px",
        "padding": "2px",
        "border-radius": "100px",
        "box-shadow": "0 0 5px #000000bb",
        "pointer-events": "none"
      }
    },
    "hideWhenUnused": true,
    "colorContrast": "#000000",
    "glowColor": "#ffff00aa",
    "outlineColor": "#000000bb",
    "textColor": "#ffffff",
    "textShadowBlur": 2,
    "textShadowDistance": 2,
    "clickRoutine": [
      {
        "func": "CALL",
        "routine": "useSeatRoutine"
      },
      "var playerName = ${result.1}"
    ],
    "useSeatRoutine": [
      "var leaveSeat = false",
      "var name = ${PROPERTY player}",
      "var color = 'red'",
      "var result = []",
      {
        "func": "IF",
        "operand1": "${PROPERTY player}",
        "relation": "==",
        "operand2": "",
        "thenRoutine": [
          {
            "func": "INPUT",
            "header": "Enter your name.",
            "fields": [
              {
                "type": "string",
                "label": "Your Name:",
                "variable": "name",
                "value": "${playerName}"
              }
            ]
          }
        ],
        "elseRoutine": [
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              {
                "func": "INPUT",
                "header": "Enter your name.",
                "fields": [
                  {
                    "type": "string",
                    "label": "Your Name:",
                    "variable": "name",
                    "value": "${playerName}"
                  },
                  {
                    "type": "subtitle",
                    "text": "All done?",
                    "css": "background-color: var(--VTTblue);color:white;"
                  },
                  {
                    "type": "checkbox",
                    "label": "Stand up from seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ],
            "elseRoutine": [
              {
                "func": "INPUT",
                "header": "Are you sure you want to remove ${PROPERTY player} from this seat?",
                "cancelButtonText": "Cancel",
                "confirmButtonText": "Okay",
                "fields": [
                  {
                    "type": "checkbox",
                    "label": "Remove this player from their seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "func": "IF",
        "condition": "${leaveSeat}",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "player",
            "value": ""
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "mainColor",
            "value": "#ffffff"
          }
        ],
        "elseRoutine": [
          "var updatePlayerandColor = false",
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "condition": "${name}",
            "elseRoutine": [
              "var updatePlayerandColor = false"
            ]
          },
          {
            "func": "IF",
            "condition": "${updatePlayerandColor}",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "player",
                "value": "${name}"
              },
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "mainColor",
                "value": "${PROPERTY staticColor}"
              },
              "var result = push ${name}"
            ]
          }
        ]
      }
    ],
    "z": 1,
    "staticColor": "#ffff00",
    "mainColor": "#ffffff"
  },
  "seat4": {
    "type": "seat",
    "id": "seat4",
    "x": 1050,
    "y": 582,
    "index": 4,
    "width": 172,
    "height": 48,
    "borderRadius": 8,
    "css": {
      "default": {
        "cursor": "pointer",
        "gap": "5px",
        "font-size": "21px",
        "box-shadow": "0 2px 5px #00000066",
        "text-shadow": "${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, ${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}",
        "background": "${PROPERTY mainColor}",
        "color": "white",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY outlineColor}",
        "box-sizing": "border-box"
      },
      ".seated.turn": {
        "box-shadow": "0px 0px 20px 5px ${PROPERTY glowColor}"
      },
      ".seated.turn::after": {
        "xcontent": "'Active Player'",
        "content": "'!'",
        "font-size": "18px",
        "line-height": "1em",
        "white-space": "wrap",
        "background-color": "${PROPERTY outlineColor}",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY mainColor}",
        "background-size": "200% auto",
        "color": "#ffffff",
        "text-shadow": "0 1px 5px #000000cc",
        "width": "1em",
        "height": "1em",
        "text-align": "center",
        "text-transform": "uppercase",
        "position": "absolute",
        "right": "-12px",
        "top": "-12px",
        "padding": "2px",
        "border-radius": "100px",
        "box-shadow": "0 0 5px #000000bb",
        "pointer-events": "none"
      }
    },
    "hideWhenUnused": true,
    "colorContrast": "#000000",
    "glowColor": "#ff9500aa",
    "outlineColor": "#000000bb",
    "textColor": "#ffffff",
    "textShadowBlur": 2,
    "textShadowDistance": 2,
    "clickRoutine": [
      {
        "func": "CALL",
        "routine": "useSeatRoutine"
      },
      "var playerName = ${result.1}"
    ],
    "useSeatRoutine": [
      "var leaveSeat = false",
      "var name = ${PROPERTY player}",
      "var color = 'red'",
      "var result = []",
      {
        "func": "IF",
        "operand1": "${PROPERTY player}",
        "relation": "==",
        "operand2": "",
        "thenRoutine": [
          {
            "func": "INPUT",
            "header": "Enter your name.",
            "fields": [
              {
                "type": "string",
                "label": "Your Name:",
                "variable": "name",
                "value": "${playerName}"
              }
            ]
          }
        ],
        "elseRoutine": [
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              {
                "func": "INPUT",
                "header": "Enter your name.",
                "fields": [
                  {
                    "type": "string",
                    "label": "Your Name:",
                    "variable": "name",
                    "value": "${playerName}"
                  },
                  {
                    "type": "subtitle",
                    "text": "All done?",
                    "css": "background-color: var(--VTTblue);color:white;"
                  },
                  {
                    "type": "checkbox",
                    "label": "Stand up from seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ],
            "elseRoutine": [
              {
                "func": "INPUT",
                "header": "Are you sure you want to remove ${PROPERTY player} from this seat?",
                "cancelButtonText": "Cancel",
                "confirmButtonText": "Okay",
                "fields": [
                  {
                    "type": "checkbox",
                    "label": "Remove this player from their seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "func": "IF",
        "condition": "${leaveSeat}",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "player",
            "value": ""
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "mainColor",
            "value": "#ffffff"
          }
        ],
        "elseRoutine": [
          "var updatePlayerandColor = false",
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "condition": "${name}",
            "elseRoutine": [
              "var updatePlayerandColor = false"
            ]
          },
          {
            "func": "IF",
            "condition": "${updatePlayerandColor}",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "player",
                "value": "${name}"
              },
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "mainColor",
                "value": "${PROPERTY staticColor}"
              },
              "var result = push ${name}"
            ]
          }
        ]
      }
    ],
    "z": 1,
    "staticColor": "#ff9500",
    "mainColor": "#ffffff"
  },
  "seat5": {
    "type": "seat",
    "id": "seat5",
    "x": 1050,
    "y": 754,
    "index": 5,
    "width": 172,
    "height": 48,
    "borderRadius": 8,
    "css": {
      "default": {
        "cursor": "pointer",
        "gap": "5px",
        "font-size": "21px",
        "box-shadow": "0 2px 5px #00000066",
        "text-shadow": "${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px ${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, ${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}, -${PROPERTY textShadowDistance}px -${PROPERTY textShadowDistance}px ${PROPERTY textShadowBlur}px ${PROPERTY outlineColor}",
        "background": "${PROPERTY mainColor}",
        "color": "white",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY outlineColor}",
        "box-sizing": "border-box"
      },
      ".seated.turn": {
        "box-shadow": "0px 0px 20px 5px ${PROPERTY glowColor}"
      },
      ".seated.turn::after": {
        "xcontent": "'Active Player'",
        "content": "'!'",
        "font-size": "18px",
        "line-height": "1em",
        "white-space": "wrap",
        "background-color": "${PROPERTY outlineColor}",
        "border": "${PROPERTY textShadowDistance}px solid ${PROPERTY mainColor}",
        "background-size": "200% auto",
        "color": "#ffffff",
        "text-shadow": "0 1px 5px #000000cc",
        "width": "1em",
        "height": "1em",
        "text-align": "center",
        "text-transform": "uppercase",
        "position": "absolute",
        "right": "-12px",
        "top": "-12px",
        "padding": "2px",
        "border-radius": "100px",
        "box-shadow": "0 0 5px #000000bb",
        "pointer-events": "none"
      }
    },
    "hideWhenUnused": true,
    "colorContrast": "#000000",
    "glowColor": "#a18a63aa",
    "outlineColor": "#000000bb",
    "textColor": "#ffffff",
    "textShadowBlur": 2,
    "textShadowDistance": 2,
    "clickRoutine": [
      {
        "func": "CALL",
        "routine": "useSeatRoutine"
      },
      "var playerName = ${result.1}"
    ],
    "useSeatRoutine": [
      "var leaveSeat = false",
      "var name = ${PROPERTY player}",
      "var color = 'red'",
      "var result = []",
      {
        "func": "IF",
        "operand1": "${PROPERTY player}",
        "relation": "==",
        "operand2": "",
        "thenRoutine": [
          {
            "func": "INPUT",
            "header": "Enter your name.",
            "fields": [
              {
                "type": "string",
                "label": "Your Name:",
                "variable": "name",
                "value": "${playerName}"
              }
            ]
          }
        ],
        "elseRoutine": [
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              {
                "func": "INPUT",
                "header": "Enter your name.",
                "fields": [
                  {
                    "type": "string",
                    "label": "Your Name:",
                    "variable": "name",
                    "value": "${playerName}"
                  },
                  {
                    "type": "subtitle",
                    "text": "All done?",
                    "css": "background-color: var(--VTTblue);color:white;"
                  },
                  {
                    "type": "checkbox",
                    "label": "Stand up from seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ],
            "elseRoutine": [
              {
                "func": "INPUT",
                "header": "Are you sure you want to remove ${PROPERTY player} from this seat?",
                "cancelButtonText": "Cancel",
                "confirmButtonText": "Okay",
                "fields": [
                  {
                    "type": "checkbox",
                    "label": "Remove this player from their seat",
                    "variable": "leaveSeat",
                    "value": false
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "func": "IF",
        "condition": "${leaveSeat}",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "player",
            "value": ""
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "mainColor",
            "value": "#ffffff"
          }
        ],
        "elseRoutine": [
          "var updatePlayerandColor = false",
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "${playerName}",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "operand1": "${PROPERTY player}",
            "relation": "==",
            "operand2": "",
            "thenRoutine": [
              "var updatePlayerandColor = true"
            ]
          },
          {
            "func": "IF",
            "condition": "${name}",
            "elseRoutine": [
              "var updatePlayerandColor = false"
            ]
          },
          {
            "func": "IF",
            "condition": "${updatePlayerandColor}",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "player",
                "value": "${name}"
              },
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "mainColor",
                "value": "${PROPERTY staticColor}"
              },
              "var result = push ${name}"
            ]
          }
        ]
      }
    ],
    "z": 1,
    "staticColor": "#a18a63",
    "mainColor": "#ffffff"
  },
  "clue1": {
    "type": "label",
    "id": "clue1",
    "x": 1050,
    "y": 143,
    "width": 530,
    "height": 45,
    "z": 1,
    "css": {
      "font-size": "18px",
      "color": "black",
      "background": "white",
      "border": "1px solid black",
      "line-height": "2.4em"
    },
    "borderRadius": 8,
    "clue": true,
    "onlyVisibleForSeat": "seat1",
    "editable": true,
    "text": "[type your clue here]"
  },
  "clue2": {
    "inheritFrom": {
      "clue1": "*"
    },
    "type": "label",
    "id": "clue2",
    "x": 1050,
    "y": 314,
    "editable": true,
    "onlyVisibleForSeat": "seat2",
    "text": "[type your clue here]",
    "z": 1
  },
  "clue3": {
    "inheritFrom": {
      "clue1": "*"
    },
    "type": "label",
    "id": "clue3",
    "x": 1050,
    "y": 485,
    "editable": true,
    "onlyVisibleForSeat": "seat3",
    "text": "[type your clue here]",
    "z": 1
  },
  "clue4": {
    "inheritFrom": {
      "clue1": "*"
    },
    "type": "label",
    "id": "clue4",
    "x": 1050,
    "y": 656,
    "editable": true,
    "text": "[type your clue here]",
    "onlyVisibleForSeat": "seat4",
    "z": 1
  },
  "clue5": {
    "inheritFrom": {
      "clue1": "*"
    },
    "type": "label",
    "id": "clue5",
    "x": 1050,
    "y": 827,
    "text": "[type your clue here]",
    "editable": true,
    "onlyVisibleForSeat": "seat5",
    "z": 1
  },
  "clues": {
    "id": "clues",
    "x": -446,
    "y": 771,
    "text": "Clues",
    "css": {
      "background": "blue",
      "color": "white",
      "font-size": "35px"
    },
    "alpha": [
      "null",
      "within two spaces of bear territory",
      "on water or mountain",
      "within one space of mountain",
      "not on water or mountain",
      "not on forest or water",
      "not within two spaces of bear territory",
      "not on desert or water",
      "not on forest or swamp",
      "on swamp or mountain",
      "on forest or water",
      "not within two spaces of a standing stone",
      "within one space of forest",
      "within three spaces of a white structure",
      "not within one space of water",
      "not on forest or mountain",
      "not within one space of either animal territory",
      "within two spaces of cougar territory",
      "within three spaces of a blue structure",
      "within one space of swamp",
      "within three spaces of a green structure",
      "within two spaces of an abandoned shack",
      "not on desert or water",
      "not within two spaces of cougar territory",
      "not within two spaces of an abandoned shack",
      "on desert or water",
      "within one space of water",
      "on desert or water",
      "within one space of swamp",
      "on forest or mountain",
      "within one space of forest",
      "within three spaces of a black structure",
      "not on forest or swamp",
      "within three spaces of a green structure",
      "on desert or swamp",
      "not on swamp or mountain",
      "within three spaces of a blue structure",
      "not within one space of mountain",
      "not on forest or desert",
      "not within two spaces of bear territory",
      "not on swamp or mountain",
      "not within two spaces of an abandoned shack",
      "within three spaces of a white structure",
      "not within one space of desert",
      "on water or swamp",
      "not on desert or mountain",
      "within two spaces of a standing stone",
      "not on water or swamp",
      "within two spaces of cougar territory",
      "not within one space of either animal territory",
      "within one space of either animal territory",
      "not on desert or swamp",
      "within one space of mountain",
      "not within three spaces of a white structure",
      "on forest or swamp",
      "within two spaces of a standing stone",
      "on desert or mountain",
      "on forest or desert",
      "not within one space of swamp",
      "not within three spaces of a black structure",
      "not on water or swamp",
      "on desert or swamp",
      "not within three spaces of a green structure",
      "not on desert or mountain",
      "not on forest or mountain",
      "within one space of desert",
      "on desert or mountain",
      "not within one space of desert",
      "on forest or swamp",
      "within one space of desert",
      "not within two spaces of a standing stone",
      "not on water or mountain",
      "on swamp or mountain",
      "not on forest or water",
      "not within one space of forest",
      "not on forest or desert",
      "not within three spaces of a white structure",
      "on forest or desert",
      "not within one space of forest",
      "not within one space of mountain",
      "on forest or mountain",
      "not within three spaces of a blue structure",
      "not on desert or swamp",
      "within two spaces of an abandoned shack",
      "within one space of either animal territory",
      "within one space of water",
      "not within one space of water",
      "not within three spaces of a blue structure",
      "on forest or water",
      "not within one space of swamp",
      "not within three spaces of a black structure",
      "within two spaces of bear territory",
      "on water or mountain",
      "within three spaces of a black structure",
      "not within two spaces of cougar territory",
      "on water or swamp",
      "not within three spaces of a green structure"
    ],
    "beta": [
      "null",
      "on desert or swamp",
      "within two spaces of cougar territory",
      "within three spaces of a blue structure",
      "not on forest or swamp",
      "within three spaces of a green structure",
      "within one space of desert",
      "not on desert or swamp",
      "on forest or swamp",
      "not on water or swamp",
      "not within three spaces of a black structure",
      "within two spaces of an abandoned shack",
      "not within one space of desert",
      "on forest or water",
      "not within three spaces of a white structure",
      "not within one space of either animal territory",
      "within two spaces of bear territory",
      "within one space of water",
      "not on swamp or mountain",
      "within one space of mountain",
      "not within three spaces of a black structure",
      "not within one space of swamp",
      "within three spaces of a black structure",
      "not within three spaces of a green structure",
      "not on forest or desert",
      "within one space of swamp",
      "not on forest or mountain",
      "not within two spaces of bear territory",
      "on forest or mountain",
      "on swamp or mountain",
      "not within two spaces of cougar territory",
      "not within two spaces of a standing stone",
      "on water or swamp",
      "on desert or water",
      "within three spaces of a blue structure",
      "within two spaces of a standing stone",
      "on water or mountain",
      "not on forest or swamp",
      "not on water or swamp",
      "not within two spaces of an abandoned shack",
      "not within one space of mountain",
      "not on desert or mountain",
      "within one space of forest",
      "within two spaces of bear territory",
      "not within one space of either animal territory",
      "within three spaces of a green structure",
      "within one space of either animal territory",
      "on desert or mountain",
      "not within two spaces of bear territory",
      "within one space of mountain",
      "not on desert or water",
      "not within one space of forest",
      "not within two spaces of an abandoned shack",
      "within two spaces of an abandoned shack",
      "within one space of swamp",
      "not within one space of desert",
      "not on desert or swamp",
      "not on desert or mountain",
      "within three spaces of a black structure",
      "not within one space of forest",
      "not within three spaces of a blue structure",
      "within one space of water",
      "on forest or water",
      "not on desert or water",
      "within three spaces of a white structure",
      "within two spaces of a standing stone",
      "within two spaces of cougar territory",
      "within one space of either animal territory",
      "not within one space of water",
      "not within three spaces of a blue structure",
      "not on forest or desert",
      "within one space of forest",
      "not on forest or mountain",
      "on desert or swamp",
      "on water or mountain",
      "not on swamp or mountain",
      "on forest or desert",
      "on desert or water",
      "not within three spaces of a white structure",
      "within three spaces of a white structure",
      "within one space of desert",
      "not within one space of mountain",
      "on forest or desert",
      "on forest or mountain",
      "not on water or mountain",
      "not within one space of water",
      "on water or swamp",
      "not on forest or water",
      "not within two spaces of cougar territory",
      "on desert or mountain",
      "on forest or swamp",
      "not on water or mountain",
      "on swamp or mountain",
      "not on forest or water",
      "not within two spaces of a standing stone",
      "not within three spaces of a green structure",
      "not within one space of swamp"
    ],
    "gamma": [
      "null",
      "within three spaces of a blue structure",
      "within one space of water",
      "not on water or mountain",
      "on forest or swamp",
      "not on desert or water",
      "within three spaces of a blue structure",
      "not within one space of desert",
      "not on forest or swamp",
      "not on forest or water",
      "not within two spaces of a standing stone",
      "within three spaces of a green structure",
      "within two spaces of a standing stone",
      "on forest or water",
      "not within three spaces of a black structure",
      "not on forest or swamp",
      "not within two spaces of a standing stone",
      "not within one space of mountain",
      "on desert or mountain",
      "not on desert or swamp",
      "on desert or swamp",
      "on forest or desert",
      "not on forest or desert",
      "within one space of mountain",
      "not within one space of swamp",
      "within three spaces of a black structure",
      "not within three spaces of a blue structure",
      "within one space of forest",
      "within three spaces of a white structure",
      "within one space of either animal territory",
      "not within three spaces of a white structure",
      "on water or swamp",
      "on swamp or mountain",
      "not on desert or swamp",
      "not within three spaces of a green structure",
      "within three spaces of a green structure",
      "within one space of forest",
      "not on desert or water",
      "not within two spaces of bear territory",
      "on water or mountain",
      "within three spaces of a white structure",
      "on water or mountain",
      "not within three spaces of a blue structure",
      "on forest or mountain",
      "within two spaces of bear territory",
      "not within one space of swamp",
      "not within one space of forest",
      "within three spaces of a black structure",
      "on desert or swamp",
      "within two spaces of cougar territory",
      "within two spaces of cougar territory",
      "not on swamp or mountain",
      "not within two spaces of bear territory",
      "within one space of either animal territory",
      "within two spaces of bear territory",
      "not on forest or mountain",
      "not on water or swamp",
      "not on water or mountain",
      "not within one space of either animal territory",
      "not on forest or water",
      "not on desert or mountain",
      "not on forest or desert",
      "not within one space of water",
      "within two spaces of a standing stone",
      "not on swamp or mountain",
      "within two spaces of an abandoned shack",
      "not on water or swamp",
      "not within one space of mountain",
      "within one space of desert",
      "not within two spaces of cougar territory",
      "on water or swamp",
      "within two spaces of an abandoned shack",
      "not within three spaces of a green structure",
      "within one space of water",
      "on forest or desert",
      "not within one space of either animal territory",
      "not within one space of forest",
      "on forest or mountain",
      "not within two spaces of an abandoned shack",
      "not on forest or mountain",
      "on desert or mountain",
      "within one space of desert",
      "not within one space of water",
      "not within two spaces of an abandoned shack",
      "within one space of swamp",
      "on desert or water",
      "not within two spaces of cougar territory",
      "on forest or water",
      "not within three spaces of a black structure",
      "on forest or swamp",
      "not on desert or mountain",
      "not within three spaces of a white structure",
      "on desert or water",
      "within one space of mountain",
      "within one space of swamp",
      "not within one space of desert",
      "on swamp or mountain"
    ],
    "delta": [
      "null",
      "not on swamp or mountain",
      "within two spaces of bear territory",
      "not within two spaces of cougar territory",
      "within one space of mountain",
      "not on desert or mountain",
      "not within three spaces of a black structure",
      "on forest or desert",
      "not on forest or water",
      "not within two spaces of bear territory",
      "not within one space of water",
      "on desert or water",
      "not on desert or swamp",
      "within two spaces of bear territory",
      "within one space of swamp",
      "within three spaces of a green structure",
      "not within two spaces of a standing stone",
      "within two spaces of an abandoned shack",
      "not within two spaces of a standing stone",
      "on forest or mountain",
      "within one space of water",
      "not within one space of desert",
      "within three spaces of a black structure",
      "not on water or mountain",
      "on water or mountain",
      "on swamp or mountain",
      "within one space of desert",
      "on desert or swamp",
      "not on forest or desert",
      "within three spaces of a black structure",
      "within one space of forest",
      "not on swamp or mountain",
      "not within three spaces of a black structure",
      "not on desert or water",
      "on desert or mountain",
      "on water or swamp",
      "within three spaces of a white structure",
      "not on water or mountain",
      "not within two spaces of an abandoned shack",
      "on forest or swamp",
      "on swamp or mountain",
      "not on water or swamp",
      "within one space of swamp",
      "within three spaces of a blue structure",
      "not within one space of mountain",
      "within two spaces of a standing stone",
      "within one space of desert",
      "within one space of mountain",
      "not within three spaces of a white structure",
      "within two spaces of a standing stone",
      "on forest or water",
      "on desert or swamp",
      "within two spaces of an abandoned shack",
      "on water or mountain",
      "not on forest or mountain",
      "not within three spaces of a blue structure",
      "within three spaces of a white structure",
      "not on water or swamp",
      "within one space of either animal territory",
      "on forest or swamp",
      "not on forest or swamp",
      "not within one space of water",
      "not within one space of either animal territory",
      "within two spaces of cougar territory",
      "not within two spaces of bear territory",
      "not on forest or water",
      "not within three spaces of a black structure",
      "not within one space of desert",
      "not within two spaces of an abandoned shack",
      "on water or swamp",
      "not within three spaces of a green structure",
      "not on forest or swamp",
      "within two spaces of cougar territory",
      "within three spaces of a blue structure",
      "on forest or mountain",
      "not on forest or mountain",
      "not on desert or water",
      "within one space of forest",
      "on desert or water",
      "not within one space of forest",
      "not on forest or desert",
      "on desert or mountain",
      "not within one space of either animal territory",
      "within one space of either animal territory",
      "within one space of water",
      "within three spaces of a green structure",
      "on forest or water",
      "not within one space of swamp",
      "not within one space of mountain",
      "not within three spaces of a green structure",
      "not within three spaces of a white structure",
      "on forest or desert",
      "not within one space of forest",
      "not on desert or mountain",
      "not within one space of swamp",
      "not within two spaces of cougar territory",
      "not on desert or swamp"
    ],
    "epsil": [
      "null",
      "on forest or swamp",
      "within one space of forest",
      "not within one space of either animal territory",
      "not on forest or mountain",
      "not on forest or swamp",
      "not within three spaces of a blue structure",
      "within three spaces of a black structure",
      "on desert or water",
      "within three spaces of a green structure",
      "not within two spaces of an abandoned shack",
      "within one space of desert",
      "not within two spaces of bear territory",
      "within one space of either animal territory",
      "not within one space of mountain",
      "not within one space of either animal territory",
      "within three spaces of a white structure",
      "within one space of water",
      "not within one space of desert",
      "within three spaces of a black structure",
      "not on forest or desert",
      "within two spaces of cougar territory",
      "within one space of water",
      "within two spaces of cougar territory",
      "not on desert or swamp",
      "not on forest or desert",
      "on forest or mountain",
      "on forest or water",
      "within three spaces of a green structure",
      "within one space of swamp",
      "within two spaces of a standing stone",
      "not on water or swamp",
      "not on desert or mountain",
      "on swamp or mountain",
      "within one space of mountain",
      "not within two spaces of cougar territory",
      "not on desert or water",
      "on forest or water",
      "on swamp or mountain",
      "not on water or swamp",
      "not on forest or mountain",
      "within three spaces of a blue structure",
      "within one space of forest",
      "not within three spaces of a white structure",
      "on water or mountain",
      "on desert or mountain",
      "not on desert or water",
      "not on desert or swamp",
      "on forest or swamp",
      "not within one space of mountain",
      "within three spaces of a blue structure",
      "on forest or mountain",
      "within three spaces of a white structure",
      "not within one space of swamp",
      "not on swamp or mountain",
      "on desert or swamp",
      "not within two spaces of bear territory",
      "within one space of swamp",
      "not within one space of water",
      "not within two spaces of an abandoned shack",
      "not within two spaces of a standing stone",
      "within two spaces of an abandoned shack",
      "on desert or mountain",
      "not within three spaces of a white structure",
      "not within one space of water",
      "not within three spaces of a green structure",
      "on water or swamp",
      "within one space of desert",
      "within one space of mountain",
      "not on swamp or mountain",
      "not within three spaces of a black structure",
      "not on forest or water",
      "on forest or desert",
      "not within three spaces of a black structure",
      "not within three spaces of a green structure",
      "not within three spaces of a blue structure",
      "on desert or swamp",
      "not on forest or swamp",
      "on desert or water",
      "not within one space of swamp",
      "not on water or mountain",
      "not within one space of forest",
      "within two spaces of an abandoned shack",
      "within two spaces of a standing stone",
      "on water or mountain",
      "not within two spaces of cougar territory",
      "within two spaces of bear territory",
      "on forest or desert",
      "not on water or mountain",
      "within two spaces of bear territory",
      "not on desert or mountain",
      "not within one space of forest",
      "within one space of either animal territory",
      "not on forest or water",
      "not within two spaces of a standing stone",
      "on water or swamp",
      "not within one space of desert"
    ],
    "z": 1,
    "arrayClues": [
      [],
      [
        [
          91,
          0,
          12,
          59,
          0
        ],
        [
          27,
          25,
          73,
          0,
          92
        ],
        [
          12,
          61,
          12,
          74,
          29
        ]
      ],
      [
        [
          0,
          17,
          71,
          0,
          23
        ],
        [
          3,
          0,
          20,
          30,
          17
        ],
        [
          52,
          76,
          36,
          20,
          67
        ]
      ],
      [
        [
          69,
          0,
          31,
          27,
          0
        ],
        [
          69,
          2,
          80,
          0,
          57
        ],
        [
          3,
          80,
          20,
          84,
          16
        ]
      ],
      [
        [
          17,
          86,
          6,
          0,
          0
        ],
        [
          88,
          8,
          1,
          13,
          0
        ],
        [
          26,
          34,
          27,
          85,
          86
        ]
      ],
      [
        [
          42,
          0,
          1,
          0,
          66
        ],
        [
          19,
          89,
          0,
          30,
          89
        ],
        [
          13,
          62,
          85,
          46,
          34
        ]
      ],
      [
        [
          1,
          62,
          0,
          0,
          21
        ],
        [
          72,
          17,
          54,
          0,
          28
        ],
        [
          56,
          79,
          44,
          74,
          9
        ]
      ],
      [
        [
          2,
          79,
          0,
          0,
          28
        ],
        [
          84,
          1,
          6,
          0,
          67
        ],
        [
          66,
          71,
          68,
          73,
          29
        ]
      ],
      [
        [
          13,
          73,
          73,
          0,
          0
        ],
        [
          80,
          36,
          27,
          20,
          0
        ],
        [
          26,
          54,
          18,
          53,
          9
        ]
      ],
      [
        [
          17,
          45,
          84,
          0,
          0
        ],
        [
          68,
          5,
          31,
          77,
          0
        ],
        [
          25,
          80,
          39,
          13,
          34
        ]
      ],
      [
        [
          61,
          0,
          0,
          49,
          21
        ],
        [
          2,
          71,
          0,
          45,
          51
        ],
        [
          66,
          67,
          50,
          14,
          87
        ]
      ],
      [
        [
          91,
          0,
          0,
          91,
          9
        ],
        [
          44,
          80,
          0,
          58,
          42
        ],
        [
          66,
          6,
          2,
          4,
          2
        ]
      ],
      [
        [
          0,
          17,
          35,
          0,
          76
        ],
        [
          13,
          0,
          54,
          27,
          45
        ],
        [
          80,
          6,
          80,
          83,
          52
        ]
      ],
      [
        [
          0,
          45,
          0,
          43,
          51
        ],
        [
          0,
          42,
          23,
          91,
          41
        ],
        [
          42,
          46,
          96,
          34,
          11
        ]
      ],
      [
        [
          55,
          0,
          0,
          52,
          45
        ],
        [
          29,
          65,
          0,
          2,
          38
        ],
        [
          66,
          35,
          94,
          19,
          92
        ]
      ],
      [
        [
          42,
          0,
          0,
          13,
          2
        ],
        [
          12,
          92,
          0,
          26,
          28
        ],
        [
          95,
          64,
          63,
          11,
          67
        ]
      ],
      [
        [
          17,
          49,
          0,
          56,
          0
        ],
        [
          95,
          6,
          6,
          40,
          0
        ],
        [
          66,
          80,
          39,
          84,
          13
        ]
      ],
      [
        [
          28,
          0,
          0,
          85,
          8
        ],
        [
          2,
          43,
          0,
          52,
          42
        ],
        [
          17,
          19,
          73,
          50,
          11
        ]
      ],
      [
        [
          30,
          45,
          0,
          56,
          0
        ],
        [
          28,
          76,
          20,
          77,
          0
        ],
        [
          26,
          71,
          31,
          46,
          86
        ]
      ],
      [
        [
          17,
          0,
          11,
          0,
          66
        ],
        [
          50,
          65,
          0,
          50,
          50
        ],
        [
          21,
          67,
          43,
          7,
          30
        ]
      ],
      [
        [
          0,
          32,
          0,
          63,
          83
        ],
        [
          0,
          94,
          58,
          59,
          6
        ],
        [
          94,
          64,
          74,
          6,
          79
        ]
      ],
      [
        [
          0,
          22,
          87,
          0,
          64
        ],
        [
          26,
          0,
          42,
          17,
          60
        ],
        [
          42,
          87,
          36,
          58,
          40
        ]
      ],
      [
        [
          0,
          40,
          20,
          0,
          59
        ],
        [
          21,
          0,
          45,
          33,
          14
        ],
        [
          49,
          12,
          71,
          8,
          94
        ]
      ],
      [
        [
          0,
          21,
          0,
          25,
          73
        ],
        [
          0,
          75,
          78,
          80,
          9
        ],
        [
          73,
          15,
          70,
          63,
          96
        ]
      ],
      [
        [
          0,
          6,
          0,
          22,
          92
        ],
        [
          0,
          72,
          4,
          26,
          2
        ],
        [
          1,
          26,
          66,
          32,
          83
        ]
      ],
      [
        [
          0,
          11,
          42,
          0,
          23
        ],
        [
          7,
          0,
          87,
          87,
          3
        ],
        [
          1,
          36,
          95,
          36,
          94
        ]
      ],
      [
        [
          0,
          68,
          0,
          5,
          79
        ],
        [
          0,
          62,
          1,
          78,
          65
        ],
        [
          91,
          87,
          88,
          63,
          49
        ]
      ],
      [
        [
          0,
          22,
          72,
          0,
          84
        ],
        [
          56,
          0,
          52,
          6,
          29
        ],
        [
          32,
          50,
          35,
          87,
          56
        ]
      ],
      [
        [
          0,
          46,
          0,
          95,
          75
        ],
        [
          0,
          48,
          39,
          18,
          70
        ],
        [
          87,
          30,
          64,
          14,
          68
        ]
      ],
      [
        [
          13,
          65,
          65,
          0,
          0
        ],
        [
          77,
          51,
          84,
          64,
          0
        ],
        [
          24,
          91,
          68,
          72,
          41
        ]
      ],
      [
        [
          37,
          34,
          39,
          0,
          0
        ],
        [
          92,
          42,
          69,
          49,
          0
        ],
        [
          35,
          56,
          69,
          49,
          31
        ]
      ],
      [
        [
          18,
          85,
          13,
          0,
          0
        ],
        [
          41,
          76,
          2,
          51,
          0
        ],
        [
          35,
          57,
          14,
          89,
          81
        ]
      ],
      [
        [
          23,
          85,
          0,
          67,
          0
        ],
        [
          78,
          81,
          68,
          53,
          0
        ],
        [
          45,
          59,
          24,
          26,
          13
        ]
      ],
      [
        [
          13,
          83,
          0,
          92,
          0
        ],
        [
          85,
          2,
          78,
          13,
          0
        ],
        [
          44,
          73,
          28,
          52,
          81
        ]
      ],
      [
        [
          58,
          53,
          0,
          45,
          0
        ],
        [
          70,
          47,
          28,
          82,
          0
        ],
        [
          5,
          44,
          19,
          46,
          65
        ]
      ],
      [
        [
          81,
          78,
          0,
          29,
          0
        ],
        [
          31,
          16,
          7,
          69,
          0
        ],
        [
          38,
          83,
          78,
          42,
          35
        ]
      ],
      [
        [
          37,
          74,
          0,
          0,
          13
        ],
        [
          52,
          46,
          92,
          0,
          83
        ],
        [
          30,
          61,
          18,
          89,
          53
        ]
      ],
      [
        [
          54,
          0,
          46,
          68,
          0
        ],
        [
          86,
          13,
          88,
          0,
          11
        ],
        [
          19,
          94,
          56,
          75,
          89
        ]
      ],
      [
        [
          67,
          0,
          25,
          95,
          0
        ],
        [
          86,
          33,
          50,
          0,
          73
        ],
        [
          16,
          62,
          11,
          53,
          61
        ]
      ],
      [
        [
          54,
          67,
          0,
          0,
          35
        ],
        [
          39,
          39,
          36,
          0,
          25
        ],
        [
          21,
          75,
          14,
          95,
          30
        ]
      ],
      [
        [
          78,
          0,
          1,
          0,
          14
        ],
        [
          18,
          81,
          0,
          58,
          93
        ],
        [
          24,
          1,
          44,
          72,
          70
        ]
      ],
      [
        [
          89,
          0,
          62,
          67,
          0
        ],
        [
          39,
          5,
          89,
          0,
          82
        ],
        [
          51,
          92,
          68,
          90,
          13
        ]
      ],
      [
        [
          20,
          85,
          0,
          0,
          27
        ],
        [
          90,
          60,
          24,
          0,
          76
        ],
        [
          29,
          80,
          44,
          20,
          41
        ]
      ],
      [
        [
          42,
          0,
          49,
          0,
          86
        ],
        [
          6,
          59,
          0,
          50,
          19
        ],
        [
          8,
          49,
          81,
          89,
          70
        ]
      ],
      [
        [
          36,
          0,
          62,
          92,
          0
        ],
        [
          71,
          35,
          2,
          0,
          75
        ],
        [
          5,
          49,
          53,
          91,
          57
        ]
      ],
      [
        [
          17,
          16,
          0,
          0,
          73
        ],
        [
          87,
          29,
          88,
          0,
          85
        ],
        [
          7,
          44,
          38,
          31,
          7
        ]
      ],
      [
        [
          0,
          10,
          24,
          21,
          0
        ],
        [
          11,
          0,
          35,
          2,
          20
        ],
        [
          48,
          26,
          87,
          32,
          56
        ]
      ],
      [
        [
          0,
          1,
          95,
          36,
          0
        ],
        [
          17,
          0,
          42,
          27,
          70
        ],
        [
          84,
          26,
          50,
          50,
          28
        ]
      ],
      [
        [
          94,
          0,
          0,
          83,
          1
        ],
        [
          43,
          81,
          0,
          3,
          79
        ],
        [
          54,
          68,
          74,
          62,
          73
        ]
      ],
      [
        [
          0,
          5,
          94,
          63,
          0
        ],
        [
          12,
          0,
          35,
          54,
          33
        ],
        [
          33,
          25,
          75,
          23,
          69
        ]
      ],
      [
        [
          0,
          40,
          54,
          45,
          0
        ],
        [
          84,
          0,
          86,
          54,
          18
        ],
        [
          22,
          26,
          73,
          48,
          11
        ]
      ],
      [
        [
          90,
          0,
          11,
          0,
          72
        ],
        [
          23,
          95,
          0,
          21,
          63
        ],
        [
          3,
          89,
          68,
          77,
          17
        ]
      ],
      [
        [
          0,
          11,
          77,
          95,
          0
        ],
        [
          74,
          0,
          47,
          38,
          53
        ],
        [
          91,
          35,
          48,
          32,
          43
        ]
      ],
      [
        [
          0,
          64,
          67,
          43,
          0
        ],
        [
          16,
          0,
          45,
          28,
          16
        ],
        [
          80,
          60,
          35,
          16,
          49
        ]
      ],
      [
        [
          79,
          0,
          11,
          0,
          30
        ],
        [
          62,
          78,
          0,
          87,
          83
        ],
        [
          65,
          89,
          53,
          45,
          57
        ]
      ]
    ]
  },
  "setUpBoard": {
    "type": "button",
    "id": "setUpBoard",
    "x": -215,
    "y": 357,
    "z": 1,
    "text": "Set Up Board",
    "clickRoutine": [
      {
        "func": "INPUT",
        "fields": [
          {
            "type": "title",
            "text": "Choose predefined game"
          },
          {
            "type": "subtitle",
            "text": "Enter the number of the game you want to play"
          },
          {
            "type": "number",
            "label": "Choose 0 for random, 1-19 for standard, 20-54 for hard",
            "min": 0,
            "max": 54,
            "value": "${PROPERTY gameID}",
            "variable": "gameID"
          }
        ],
        "confirmButtonText": "Confirm"
      },
      {
        "func": "IF",
        "operand1": "${gameID}",
        "operand2": 0,
        "thenRoutine": [
          "var gameID = randInt 1 54"
        ]
      },
      "var gameID = parseFloat ${gameID}",
      {
        "func": "SET",
        "collection": "thisButton",
        "property": "gameID",
        "value": "${gameID}"
      },
      {
        "func": "SET",
        "collection": [
          "gameIDLabel"
        ],
        "property": "text",
        "value": "Game ID: ${gameID}"
      },
      {
        "func": "SET",
        "collection": [
          "gameIDLabel"
        ],
        "property": "scale",
        "value": 1
      },
      "var thisTile = ${PROPERTY arrayTiles OF tiles}",
      "var thisTile = ${thisTile.$gameID}",
      "var thisTileRot = ${PROPERTY arrayTilesRot OF tiles}",
      "var thisTileRot = ${thisTileRot.$gameID}",
      "var thisPiece = ${PROPERTY arrayPieces OF pieces}",
      "var thisPiece = ${thisPiece.$gameID}",
      "var pieceCount = length ${thisPiece}",
      "var piece = 1",
      {
        "func": "SELECT",
        "property": "tile",
        "value": true
      },
      "// Setting rotation is something other than 0 or 180 is necessary to trigger rotation change routines.",
      {
        "func": "SET",
        "property": "rotation",
        "value": 1
      },
      {
        "func": "SELECT",
        "property": "structure",
        "value": true
      },
      {
        "func": "FOREACH",
        "collection": "DEFAULT",
        "loopRoutine": [
          {
            "func": "GET",
            "collection": "DEFAULT",
            "property": "piece"
          },
          {
            "func": "MOVE",
            "collection": "DEFAULT",
            "to": "pieceHolder${piece}"
          }
        ]
      },
      {
        "func": "FOREACH",
        "in": "${thisTile}",
        "loopRoutine": [
          "// This positions each tile",
          "var thisPosArray = 'pos' + ${key}",
          "var thisPosArray = ${PROPERTY $thisPosArray OF tiles}",
          {
            "func": "SELECT",
            "property": "id",
            "value": "tile${value}"
          },
          {
            "func": "SET",
            "property": "x",
            "value": "${thisPosArray.0}"
          },
          {
            "func": "SET",
            "property": "y",
            "value": "${thisPosArray.1}"
          },
          {
            "func": "SET",
            "property": "tilePosition",
            "value": "${key}"
          }
        ]
      },
      {
        "func": "FOREACH",
        "in": "${thisTileRot}",
        "loopRoutine": [
          "// This rotates each tile",
          {
            "func": "SELECT",
            "property": "tilePosition",
            "value": "${key}"
          },
          {
            "func": "IF",
            "condition": "${value}",
            "thenRoutine": [
              {
                "func": "SET",
                "property": "rotation",
                "value": 180
              }
            ],
            "elseRoutine": [
              {
                "func": "SET",
                "property": "rotation",
                "value": 0
              }
            ]
          }
        ]
      },
      {
        "func": "CLICK",
        "collection": [
          "timer"
        ]
      }
    ],
    "gameID": 0
  },
  "setUpClues": {
    "type": "button",
    "id": "setUpClues",
    "x": -204,
    "y": 784,
    "z": 1,
    "clickRoutine": [
      {
        "func": "SELECT",
        "property": "clue",
        "value": true
      },
      {
        "func": "SET",
        "property": "text",
        "value": ""
      },
      {
        "func": "SELECT",
        "type": "seat",
        "property": "player",
        "relation": "!=",
        "value": ""
      },
      {
        "func": "COUNT",
        "variable": "playerCount"
      },
      "var clueIndex = ${playerCount} - 3",
      {
        "func": "IF",
        "operand1": "${clueIndex}",
        "relation": "<",
        "operand2": 0,
        "thenRoutine": [
          "var clueIndex = 0"
        ]
      },
      "var gameID = ${PROPERTY gameID OF setUpBoard}",
      "var cluesArray = ${PROPERTY arrayClues OF clues}",
      "var cluesArray = ${cluesArray.$gameID}",
      "var thisClue = ${cluesArray.$clueIndex}",
      {
        "func": "TURN",
        "turnCycle": "random"
      },
      {
        "func": "SELECT",
        "type": "seat",
        "property": "turn",
        "value": true
      },
      {
        "func": "GET",
        "property": "index"
      },
      {
        "func": "MOVE",
        "collection": [
          "pin"
        ],
        "to": "pinHolder${index}"
      },
      {
        "func": "FOREACH",
        "in": [
          "alpha",
          "beta",
          "gamma",
          "delta",
          "epsil"
        ],
        "loopRoutine": [
          "var playerClue = ${PROPERTY $value OF clues}",
          "var codeIndex = ${thisClue.$key}",
          {
            "func": "IF",
            "operand1": "${codeIndex}",
            "relation": "!=",
            "operand2": 0,
            "thenRoutine": [
              "var playerClue = ${playerClue.$codeIndex}",
              {
                "func": "SELECT",
                "type": "seat",
                "property": "turn",
                "value": true
              },
              {
                "func": "GET",
                "property": "index"
              },
              {
                "func": "SET",
                "collection": [
                  "clue${index}"
                ],
                "property": "text",
                "value": "${playerClue}"
              },
              {
                "func": "TURN"
              }
            ]
          }
        ]
      }
    ],
    "text": "Set Up Clues"
  },
  "white1": {
    "id": "white1",
    "width": 58,
    "height": 58,
    "layer": 3,
    "z": 9227,
    "css": {
      "clip-path": "polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%)",
      "background": "${PROPERTY tokenColor}",
      "pointer-events": "auto"
    },
    "piece": 1,
    "structure": true,
    "token": true,
    "tokenColor": "white",
    "x": 4,
    "y": 4,
    "parent": "pieceHolder1"
  },
  "blue1": {
    "id": "blue1",
    "x": 4,
    "y": 4,
    "z": 9216,
    "inheritFrom": {
      "white1": "!parent"
    },
    "piece": 3,
    "tokenColor": "blue",
    "rotation": 0,
    "movable": true,
    "parent": "pieceHolder3"
  },
  "green1": {
    "id": "green1",
    "x": 4,
    "y": 4,
    "z": 9217,
    "inheritFrom": {
      "white1": "!parent"
    },
    "piece": 5,
    "tokenColor": "springgreen",
    "rotation": 0,
    "movable": true,
    "activeFace": 0,
    "parent": "pieceHolder5"
  },
  "black1": {
    "id": "black1",
    "x": 4,
    "y": 4,
    "rotation": 0,
    "z": 9221,
    "inheritFrom": {
      "white1": "!parent"
    },
    "piece": 7,
    "tokenColor": "black",
    "movable": true,
    "parent": "pieceHolder7"
  },
  "white2": {
    "id": "white2",
    "x": 4,
    "y": 4,
    "width": 58,
    "height": 58,
    "layer": 3,
    "z": 9218,
    "css": {
      "clip-path": "polygon(50% 0%, 0% 100%, 100% 100%)",
      "background": "${PROPERTY tokenColor}",
      "pointer-events": "auto"
    },
    "piece": 2,
    "structure": true,
    "token": true,
    "tokenColor": "white",
    "parent": "pieceHolder2"
  },
  "blue2": {
    "id": "blue2",
    "x": 4,
    "y": 4,
    "z": 9219,
    "activeFace": 0,
    "inheritFrom": {
      "white2": "!parent"
    },
    "piece": 4,
    "tokenColor": "blue",
    "rotation": 0,
    "movable": true,
    "parent": "pieceHolder4"
  },
  "green2": {
    "id": "green2",
    "x": 4,
    "y": 4,
    "z": 9220,
    "activeFace": 0,
    "inheritFrom": {
      "white2": "!parent"
    },
    "piece": 6,
    "tokenColor": "springgreen",
    "rotation": 0,
    "movable": true,
    "parent": "pieceHolder6"
  },
  "black2": {
    "id": "black2",
    "x": 4,
    "y": 4,
    "z": 9222,
    "inheritFrom": {
      "white2": "!parent"
    },
    "piece": 8,
    "tokenColor": "black",
    "rotation": 0,
    "movable": true,
    "parent": "pieceHolder8"
  },
  "pieces": {
    "id": "pieces",
    "x": -434,
    "y": 582,
    "z": 1,
    "css": {
      "background": "blue",
      "color": "white",
      "font-size": "35px"
    },
    "text": "Pieces",
    "arrayPieces": [
      [],
      [
        2,
        2,
        5,
        7,
        8,
        1,
        12,
        7,
        6,
        5,
        11,
        3
      ],
      [
        5,
        9,
        8,
        1,
        4,
        9,
        10,
        7,
        1,
        8,
        8,
        3
      ],
      [
        7,
        5,
        7,
        8,
        6,
        6,
        2,
        4,
        5,
        7,
        5,
        8
      ],
      [
        11,
        5,
        11,
        4,
        7,
        9,
        7,
        1,
        10,
        8,
        6,
        3
      ],
      [
        4,
        1,
        11,
        9,
        4,
        7,
        9,
        2,
        5,
        1,
        11,
        8
      ],
      [
        5,
        7,
        7,
        7,
        6,
        6,
        3,
        8,
        9,
        6,
        6,
        2
      ],
      [
        8,
        6,
        10,
        8,
        9,
        1,
        7,
        4,
        12,
        2,
        7,
        3
      ],
      [
        3,
        3,
        11,
        9,
        2,
        9,
        8,
        4,
        7,
        7,
        5,
        4
      ],
      [
        2,
        9,
        4,
        6,
        3,
        2,
        5,
        2,
        12,
        5,
        1,
        7
      ],
      [
        11,
        6,
        3,
        6,
        6,
        5,
        9,
        5,
        12,
        3,
        6,
        6
      ],
      [
        3,
        3,
        4,
        9,
        5,
        6,
        6,
        9,
        1,
        6,
        6,
        2
      ],
      [
        9,
        9,
        2,
        6,
        9,
        7,
        12,
        3,
        1,
        6,
        5,
        4
      ],
      [
        6,
        6,
        3,
        5,
        2,
        1,
        2,
        7,
        7,
        5,
        12,
        5
      ],
      [
        2,
        8,
        11,
        3,
        8,
        7,
        1,
        3,
        12,
        6,
        5,
        4
      ],
      [
        7,
        7,
        1,
        2,
        12,
        4,
        5,
        2,
        1,
        5,
        6,
        3
      ],
      [
        12,
        4,
        8,
        3,
        5,
        2,
        6,
        8,
        2,
        8,
        11,
        4
      ],
      [
        6,
        3,
        4,
        3,
        2,
        1,
        5,
        9,
        12,
        1,
        10,
        7
      ],
      [
        12,
        2,
        10,
        6,
        11,
        4,
        10,
        9,
        3,
        8,
        8,
        9
      ],
      [
        3,
        1,
        10,
        4,
        5,
        6,
        4,
        9,
        11,
        3,
        7,
        7
      ],
      [
        3,
        2,
        4,
        8,
        10,
        9,
        7,
        5,
        7,
        6,
        8,
        5,
        8,
        8,
        1,
        4
      ],
      [
        6,
        8,
        3,
        5,
        9,
        5,
        3,
        8,
        5,
        3,
        6,
        2,
        8,
        2,
        6,
        6
      ],
      [
        10,
        3,
        3,
        6,
        12,
        9,
        7,
        1,
        8,
        6,
        7,
        9,
        5,
        7,
        10,
        2
      ],
      [
        7,
        4,
        3,
        2,
        11,
        2,
        12,
        2,
        7,
        8,
        7,
        6,
        6,
        3,
        5,
        8
      ],
      [
        5,
        8,
        7,
        8,
        10,
        2,
        1,
        3,
        6,
        5,
        12,
        7,
        2,
        5,
        11,
        9
      ],
      [
        11,
        9,
        8,
        5,
        4,
        4,
        4,
        3,
        6,
        5,
        9,
        9,
        4,
        8,
        1,
        4
      ],
      [
        5,
        1,
        3,
        4,
        5,
        7,
        5,
        3,
        2,
        5,
        5,
        2,
        3,
        5,
        8,
        5
      ],
      [
        12,
        3,
        2,
        3,
        10,
        3,
        6,
        8,
        8,
        2,
        8,
        5,
        9,
        8,
        8,
        1
      ],
      [
        2,
        3,
        12,
        3,
        9,
        5,
        8,
        2,
        3,
        9,
        5,
        3,
        4,
        8,
        2,
        4
      ],
      [
        7,
        8,
        1,
        3,
        9,
        2,
        12,
        8,
        3,
        8,
        10,
        3,
        11,
        6,
        10,
        2
      ],
      [
        3,
        9,
        5,
        9,
        11,
        5,
        3,
        1,
        1,
        2,
        10,
        9,
        12,
        8,
        9,
        9
      ],
      [
        4,
        6,
        11,
        8,
        12,
        8,
        7,
        4,
        9,
        3,
        2,
        8,
        8,
        6,
        7,
        9
      ],
      [
        3,
        9,
        12,
        9,
        8,
        8,
        10,
        3,
        4,
        4,
        3,
        2,
        8,
        9,
        2,
        1
      ],
      [
        11,
        8,
        1,
        7,
        4,
        1,
        10,
        5,
        9,
        6,
        9,
        4,
        12,
        9,
        9,
        2
      ],
      [
        3,
        2,
        4,
        5,
        6,
        9,
        6,
        4,
        12,
        7,
        9,
        3,
        1,
        9,
        9,
        1
      ],
      [
        4,
        8,
        12,
        4,
        8,
        2,
        9,
        8,
        1,
        1,
        3,
        9,
        11,
        7,
        7,
        8
      ],
      [
        11,
        8,
        8,
        2,
        6,
        9,
        12,
        2,
        7,
        3,
        3,
        6,
        2,
        4,
        10,
        9
      ],
      [
        10,
        3,
        3,
        6,
        12,
        9,
        7,
        1,
        8,
        6,
        7,
        9,
        5,
        7,
        10,
        2
      ],
      [
        12,
        5,
        10,
        5,
        11,
        8,
        1,
        7,
        3,
        1,
        7,
        3,
        7,
        4,
        1,
        2
      ],
      [
        4,
        9,
        7,
        8,
        10,
        8,
        1,
        3,
        1,
        8,
        6,
        3,
        9,
        3,
        2,
        8
      ],
      [
        2,
        4,
        9,
        4,
        10,
        3,
        2,
        8,
        5,
        1,
        7,
        9,
        6,
        7,
        10,
        6
      ],
      [
        8,
        9,
        7,
        2,
        6,
        3,
        5,
        8,
        8,
        2,
        4,
        1,
        2,
        3,
        8,
        7
      ],
      [
        6,
        1,
        5,
        8,
        6,
        8,
        11,
        3,
        6,
        5,
        6,
        3,
        8,
        3,
        3,
        5
      ],
      [
        6,
        5,
        4,
        8,
        3,
        4,
        3,
        7,
        7,
        3,
        4,
        7,
        9,
        7,
        9,
        1
      ],
      [
        11,
        8,
        2,
        8,
        10,
        5,
        8,
        5,
        12,
        6,
        12,
        2,
        6,
        5,
        1,
        8
      ],
      [
        4,
        9,
        11,
        9,
        1,
        6,
        10,
        1,
        9,
        7,
        2,
        4,
        10,
        5,
        7,
        7
      ],
      [
        7,
        2,
        8,
        4,
        4,
        9,
        8,
        3,
        7,
        5,
        7,
        1,
        7,
        7,
        12,
        2
      ],
      [
        1,
        7,
        4,
        3,
        10,
        7,
        9,
        1,
        5,
        6,
        5,
        8,
        3,
        5,
        8,
        4
      ],
      [
        10,
        4,
        7,
        1,
        5,
        7,
        3,
        3,
        9,
        8,
        2,
        7,
        5,
        1,
        1,
        6
      ],
      [
        2,
        5,
        12,
        5,
        11,
        2,
        8,
        6,
        6,
        7,
        12,
        1,
        7,
        4,
        6,
        5
      ],
      [
        6,
        4,
        12,
        9,
        2,
        6,
        9,
        3,
        7,
        3,
        3,
        9,
        8,
        1,
        8,
        9
      ],
      [
        5,
        8,
        12,
        9,
        9,
        4,
        6,
        9,
        11,
        3,
        7,
        3,
        4,
        2,
        11,
        2
      ],
      [
        12,
        4,
        8,
        5,
        9,
        4,
        6,
        4,
        6,
        1,
        10,
        3,
        6,
        9,
        5,
        5
      ],
      [
        7,
        2,
        1,
        5,
        8,
        8,
        2,
        7,
        6,
        5,
        10,
        3,
        5,
        8,
        1,
        7
      ],
      [
        9,
        9,
        7,
        1,
        11,
        6,
        6,
        6,
        2,
        6,
        3,
        4,
        8,
        8,
        3,
        5
      ]
    ]
  },
  "tiles": {
    "id": "tiles",
    "x": -434,
    "y": 363,
    "z": 3,
    "css": {
      "background": "blue",
      "color": "white",
      "font-size": "35px"
    },
    "text": "Tiles",
    "arrayTiles": [
      [],
      [
        4,
        5,
        3,
        2,
        6,
        1
      ],
      [
        3,
        2,
        1,
        5,
        4,
        6
      ],
      [
        4,
        3,
        6,
        5,
        1,
        2
      ],
      [
        2,
        1,
        5,
        4,
        3,
        6
      ],
      [
        5,
        2,
        3,
        6,
        4,
        1
      ],
      [
        4,
        1,
        6,
        2,
        5,
        3
      ],
      [
        3,
        4,
        1,
        2,
        5,
        6
      ],
      [
        2,
        5,
        4,
        1,
        6,
        3
      ],
      [
        2,
        3,
        6,
        1,
        5,
        4
      ],
      [
        6,
        1,
        3,
        5,
        2,
        4
      ],
      [
        6,
        4,
        5,
        1,
        3,
        2
      ],
      [
        3,
        1,
        2,
        6,
        4,
        5
      ],
      [
        4,
        3,
        5,
        2,
        1,
        6
      ],
      [
        6,
        3,
        5,
        4,
        2,
        1
      ],
      [
        6,
        1,
        5,
        4,
        3,
        2
      ],
      [
        2,
        1,
        4,
        5,
        3,
        6
      ],
      [
        1,
        5,
        6,
        3,
        2,
        4
      ],
      [
        2,
        6,
        1,
        4,
        3,
        5
      ],
      [
        5,
        2,
        4,
        1,
        3,
        6
      ],
      [
        5,
        4,
        3,
        1,
        2,
        6
      ],
      [
        4,
        1,
        5,
        2,
        6,
        3
      ],
      [
        4,
        3,
        6,
        2,
        1,
        5
      ],
      [
        4,
        5,
        2,
        3,
        1,
        6
      ],
      [
        4,
        1,
        5,
        6,
        2,
        3
      ],
      [
        3,
        6,
        2,
        1,
        4,
        5
      ],
      [
        4,
        2,
        5,
        1,
        3,
        6
      ],
      [
        3,
        4,
        6,
        5,
        1,
        2
      ],
      [
        4,
        1,
        2,
        6,
        3,
        5
      ],
      [
        1,
        2,
        6,
        5,
        4,
        3
      ],
      [
        2,
        3,
        1,
        4,
        5,
        6
      ],
      [
        2,
        6,
        3,
        1,
        4,
        5
      ],
      [
        2,
        1,
        5,
        6,
        3,
        4
      ],
      [
        2,
        5,
        3,
        4,
        6,
        1
      ],
      [
        2,
        6,
        1,
        5,
        3,
        4
      ],
      [
        3,
        1,
        6,
        5,
        4,
        2
      ],
      [
        3,
        4,
        6,
        2,
        5,
        1
      ],
      [
        4,
        3,
        6,
        2,
        1,
        5
      ],
      [
        4,
        2,
        1,
        3,
        5,
        6
      ],
      [
        3,
        5,
        4,
        1,
        2,
        6
      ],
      [
        5,
        6,
        4,
        2,
        3,
        1
      ],
      [
        4,
        1,
        3,
        5,
        6,
        2
      ],
      [
        3,
        4,
        1,
        5,
        2,
        6
      ],
      [
        5,
        6,
        4,
        3,
        1,
        2
      ],
      [
        4,
        2,
        1,
        3,
        5,
        6
      ],
      [
        3,
        5,
        1,
        2,
        4,
        6
      ],
      [
        1,
        2,
        6,
        4,
        3,
        5
      ],
      [
        1,
        2,
        5,
        6,
        4,
        3
      ],
      [
        6,
        5,
        3,
        4,
        2,
        1
      ],
      [
        2,
        1,
        5,
        6,
        4,
        3
      ],
      [
        1,
        6,
        4,
        2,
        5,
        3
      ],
      [
        6,
        1,
        3,
        5,
        2,
        4
      ],
      [
        2,
        5,
        4,
        3,
        6,
        1
      ],
      [
        2,
        6,
        5,
        3,
        4,
        1
      ],
      [
        5,
        6,
        4,
        1,
        3,
        2
      ]
    ],
    "arrayTilesRot": [
      [],
      [
        false,
        true,
        false,
        true,
        false,
        false
      ],
      [
        true,
        false,
        false,
        false,
        false,
        false
      ],
      [
        false,
        false,
        false,
        true,
        true,
        true
      ],
      [
        false,
        false,
        true,
        false,
        false,
        false
      ],
      [
        false,
        true,
        false,
        true,
        false,
        false
      ],
      [
        false,
        false,
        false,
        true,
        true,
        true
      ],
      [
        false,
        true,
        true,
        false,
        true,
        true
      ],
      [
        false,
        false,
        true,
        true,
        false,
        false
      ],
      [
        false,
        false,
        false,
        true,
        false,
        true
      ],
      [
        false,
        true,
        false,
        false,
        true,
        false
      ],
      [
        false,
        false,
        true,
        false,
        true,
        true
      ],
      [
        true,
        true,
        true,
        false,
        false,
        false
      ],
      [
        true,
        true,
        false,
        false,
        true,
        true
      ],
      [
        false,
        false,
        true,
        false,
        false,
        true
      ],
      [
        false,
        false,
        true,
        false,
        true,
        false
      ],
      [
        false,
        true,
        true,
        false,
        true,
        true
      ],
      [
        true,
        false,
        true,
        true,
        false,
        false
      ],
      [
        false,
        true,
        false,
        true,
        true,
        true
      ],
      [
        false,
        false,
        true,
        true,
        false,
        true
      ],
      [
        true,
        false,
        false,
        false,
        false,
        true
      ],
      [
        true,
        false,
        false,
        true,
        false,
        true
      ],
      [
        true,
        false,
        false,
        false,
        true,
        false
      ],
      [
        true,
        true,
        false,
        true,
        false,
        true
      ],
      [
        true,
        true,
        false,
        false,
        true,
        true
      ],
      [
        true,
        true,
        false,
        true,
        true,
        false
      ],
      [
        true,
        true,
        true,
        false,
        true,
        false
      ],
      [
        true,
        true,
        true,
        false,
        false,
        true
      ],
      [
        true,
        true,
        true,
        true,
        true,
        true
      ],
      [
        false,
        false,
        false,
        false,
        false,
        true
      ],
      [
        false,
        false,
        false,
        false,
        true,
        false
      ],
      [
        false,
        false,
        false,
        true,
        false,
        true
      ],
      [
        false,
        true,
        true,
        false,
        false,
        true
      ],
      [
        false,
        true,
        false,
        false,
        true,
        false
      ],
      [
        false,
        true,
        true,
        true,
        false,
        true
      ],
      [
        false,
        false,
        false,
        true,
        false,
        true
      ],
      [
        false,
        false,
        true,
        true,
        true,
        true
      ],
      [
        true,
        false,
        false,
        false,
        true,
        false
      ],
      [
        false,
        false,
        false,
        false,
        false,
        true
      ],
      [
        false,
        true,
        false,
        true,
        true,
        true
      ],
      [
        false,
        false,
        true,
        false,
        false,
        false
      ],
      [
        false,
        true,
        false,
        true,
        true,
        true
      ],
      [
        false,
        true,
        true,
        false,
        false,
        true
      ],
      [
        false,
        false,
        true,
        true,
        false,
        true
      ],
      [
        false,
        true,
        true,
        false,
        true,
        true
      ],
      [
        false,
        false,
        false,
        true,
        false,
        true
      ],
      [
        true,
        true,
        false,
        false,
        false,
        true
      ],
      [
        true,
        true,
        false,
        false,
        true,
        true
      ],
      [
        false,
        false,
        false,
        false,
        true,
        false
      ],
      [
        true,
        true,
        false,
        false,
        true,
        true
      ],
      [
        true,
        true,
        true,
        true,
        false,
        false
      ],
      [
        false,
        false,
        false,
        true,
        true,
        false
      ],
      [
        true,
        true,
        false,
        true,
        false,
        false
      ],
      [
        true,
        true,
        true,
        true,
        false,
        true
      ],
      [
        false,
        true,
        true,
        true,
        false,
        true
      ]
    ],
    "pos0": [
      0,
      0
    ],
    "pos1": [
      448,
      0
    ],
    "pos2": [
      0,
      258
    ],
    "pos3": [
      448,
      258
    ],
    "pos4": [
      0,
      516
    ],
    "pos5": [
      448,
      516
    ]
  },
  "setUpPieces": {
    "type": "button",
    "id": "setUpPieces",
    "x": -221,
    "y": 588,
    "z": 1,
    "text": "Set Up Pieces",
    "gameID": 2,
    "clickRoutine": [
      "var gameID = ${PROPERTY gameID OF setUpBoard}",
      "var thisPiece = ${PROPERTY arrayPieces OF pieces}",
      "var thisPiece = ${thisPiece.$gameID}",
      "var pieceCount = length ${thisPiece}",
      "var piece = 1",
      {
        "func": "SELECT",
        "property": "structure",
        "value": true
      },
      {
        "func": "SET",
        "property": "parent",
        "value": null
      },
      {
        "func": "IF",
        "operand1": "${pieceCount}",
        "relation": "<=",
        "operand2": 12,
        "thenRoutine": [
          "// If this is not an advanced game, keep the black pieces out of play",
          {
            "func": "MOVE",
            "collection": [
              "black1"
            ],
            "to": "pieceHolder7"
          },
          {
            "func": "MOVE",
            "collection": [
              "black2"
            ],
            "to": "pieceHolder8"
          }
        ]
      },
      {
        "func": "FOREACH",
        "in": "${thisPiece}",
        "loopRoutine": [
          "// This positions and rotates each piece (in order of white octogon, white triangle, then the blue, green, and black octogons and triangles. The location values are stored as a hex cell (for example, vertical column by horizontal column). This converts that to x, y coord relative to 0,0 in the room.",
          "var isEvenCheck1 = ${key} / 2",
          "var isEvenCheck2 = ${isEvenCheck1} round",
          "var isEven = ${isEvenCheck1} == ${isEvenCheck2}",
          {
            "func": "IF",
            "condition": "${isEven}",
            "thenRoutine": [
              "// Set vert col value (x)",
              "var isEvenVert1 = ${value} / 2",
              "var isEvenVert2 = ${isEvenVert1} round",
              "var isEvenVert = ${isEvenVert1} == ${isEvenVert2}",
              {
                "func": "SELECT",
                "property": "piece",
                "value": "${piece}"
              },
              {
                "func": "IF",
                "condition": "${isEvenVert}",
                "thenRoutine": [
                  "var x = 29 + ((${value} - 1) * 75)"
                ],
                "elseRoutine": [
                  "var x = 29 + ((${value} - 1) * 75)"
                ]
              },
              {
                "func": "SET",
                "property": "x",
                "value": "${x}"
              }
            ],
            "elseRoutine": [
              "// Set horz col value (y)",
              {
                "func": "IF",
                "condition": "${isEvenVert}",
                "thenRoutine": [
                  "var y = 71.3 + ((${value} - 1) * 86.6)"
                ],
                "elseRoutine": [
                  "var y = 28 + ((${value} - 1) * 86.6)"
                ]
              },
              {
                "func": "SET",
                "property": "y",
                "value": "${y}"
              },
              "// After setting the x,y, this finds the nearest holder and moves the piece to be a child of the widget it is over. This is complicated because of the roations that both the tile group and the individual hex can have.",
              {
                "func": "SELECT",
                "property": "hexTile",
                "value": true,
                "collection": "hexTiles"
              },
              "// Sets the boundaries for where to look for holders based on the position of the piece",
              "var expX = ${x} + 20",
              "var expY = ${y} + 20",
              "var limitX = ${x} - 75",
              "var limitY = ${y} - 75",
              "// SELECT the hexes in the vertical column",
              {
                "func": "SELECT",
                "source": "hexTiles",
                "property": "_localOriginAbsoluteX",
                "relation": "<=",
                "value": "${expX}",
                "collection": "vertCol"
              },
              {
                "func": "SELECT",
                "source": "vertCol",
                "property": "_localOriginAbsoluteX",
                "relation": ">",
                "value": "${limitX}",
                "mode": "intersect",
                "collection": "vertCol"
              },
              "// SELECT the hexes in the hortizontal row",
              {
                "func": "SELECT",
                "source": "hexTiles",
                "property": "_localOriginAbsoluteY",
                "relation": "<=",
                "value": "${expY}",
                "collection": "horizCol"
              },
              {
                "func": "SELECT",
                "source": "horizCol",
                "property": "_localOriginAbsoluteY",
                "relation": ">",
                "value": "${limitY}",
                "mode": "intersect",
                "collection": "horizCol"
              },
              "// Combine the row and column to get the single hex which the piece belongs in",
              {
                "func": "SELECT",
                "source": "horizCol",
                "property": "id",
                "relation": "!=",
                "value": null,
                "mode": "intersect",
                "collection": "vertCol"
              },
              {
                "func": "GET",
                "collection": "vertCol",
                "property": "id"
              },
              {
                "func": "MOVE",
                "collection": "DEFAULT",
                "to": "${id}"
              },
              {
                "func": "SET",
                "property": "x",
                "value": 21
              },
              {
                "func": "SET",
                "property": "y",
                "value": 21
              },
              "var piece = ${piece} + 1"
            ]
          }
        ]
      }
    ]
  },
  "hwrpP": {
    "parent": "timer",
    "fixedParent": true,
    "id": "hwrpP",
    "x": 120,
    "y": -3,
    "width": 36,
    "height": 36,
    "type": "button",
    "movableInEdit": false,
    "clickRoutine": [
      {
        "func": "TIMER",
        "timer": "${PROPERTY parent}"
      }
    ],
    "classes": "symbols",
    "css": "font-size: 28px",
    "text": "play_pause",
    "z": 1
  },
  "hwrpR": {
    "parent": "timer",
    "fixedParent": true,
    "id": "hwrpR",
    "x": 80,
    "y": -3,
    "width": 36,
    "height": 36,
    "type": "button",
    "movableInEdit": false,
    "clickRoutine": [
      {
        "func": "TIMER",
        "timer": "${PROPERTY parent}",
        "mode": "reset"
      }
    ],
    "classes": "symbols",
    "css": "font-size: 28px",
    "text": "reload",
    "z": 1
  },
  "timer": {
    "type": "timer",
    "id": "timer",
    "x": -241,
    "y": 451,
    "millisecondsChangeRoutine": [
      {
        "func": "IF",
        "operand1": "${PROPERTY milliseconds}",
        "relation": ">",
        "operand2": 100,
        "thenRoutine": [
          {
            "func": "CLICK",
            "collection": [
              "setUpPieces"
            ]
          },
          {
            "func": "CLICK",
            "collection": [
              "setUpClues"
            ]
          },
          {
            "func": "TIMER",
            "collection": "thisButton",
            "mode": "reset"
          }
        ]
      }
    ],
    "css": {
      "color": "white"
    },
    "z": 1
  },
  "pieceHolder1": {
    "type": "holder",
    "id": "pieceHolder1",
    "x": 96,
    "y": 825,
    "width": 50,
    "height": 50,
    "z": 1,
    "dropTarget": {
      "piece": 1
    },
    "classes": "transparent"
  },
  "pieceHolder2": {
    "inheritFrom": {
      "pieceHolder1": "*"
    },
    "type": "holder",
    "id": "pieceHolder2",
    "x": 202,
    "y": 825,
    "dropTarget": {
      "piece": 2
    },
    "z": 1
  },
  "pieceHolder3": {
    "inheritFrom": {
      "pieceHolder1": "*"
    },
    "type": "holder",
    "id": "pieceHolder3",
    "x": 310,
    "y": 825,
    "dropTarget": {
      "piece": 3
    },
    "z": 1
  },
  "pieceHolder4": {
    "inheritFrom": {
      "pieceHolder1": "*"
    },
    "type": "holder",
    "id": "pieceHolder4",
    "x": 419,
    "y": 825,
    "dropTarget": {
      "piece": 4
    },
    "z": 1
  },
  "pieceHolder5": {
    "inheritFrom": {
      "pieceHolder1": "*"
    },
    "type": "holder",
    "id": "pieceHolder5",
    "x": 527,
    "y": 825,
    "dropTarget": {
      "piece": 5
    },
    "z": 1
  },
  "pieceHolder6": {
    "inheritFrom": {
      "pieceHolder1": "*"
    },
    "type": "holder",
    "id": "pieceHolder6",
    "x": 634,
    "y": 825,
    "dropTarget": {
      "piece": 6
    },
    "z": 1
  },
  "pieceHolder7": {
    "inheritFrom": {
      "pieceHolder1": "*"
    },
    "type": "holder",
    "id": "pieceHolder7",
    "x": 742,
    "y": 825,
    "dropTarget": {
      "piece": 7
    },
    "z": 1
  },
  "pieceHolder8": {
    "inheritFrom": {
      "pieceHolder1": "*"
    },
    "type": "holder",
    "id": "pieceHolder8",
    "x": 850,
    "y": 827,
    "dropTarget": {
      "piece": 8
    },
    "z": 1
  },
  "lock": {
    "id": "lock",
    "y": 945,
    "image": "/i/game-icons.net/delapouite/padlock-open.svg",
    "width": 50,
    "height": 50,
    "movable": false,
    "clickRoutine": [
      {
        "func": "IF",
        "operand1": "${PROPERTY image}",
        "operand2": "/i/game-icons.net/lorc/padlock.svg",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "image",
            "value": "/i/game-icons.net/delapouite/padlock-open.svg"
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "locked",
            "value": false
          },
          {
            "func": "SELECT",
            "property": "tile",
            "value": true
          },
          {
            "func": "SELECT",
            "mode": "add",
            "property": "structure",
            "value": true
          },
          {
            "func": "SET",
            "property": "movable",
            "value": true
          },
          {
            "func": "SELECT",
            "property": "hexTile",
            "value": true
          },
          {
            "func": "SET",
            "property": "clickable",
            "value": true
          }
        ],
        "elseRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "image",
            "value": "/i/game-icons.net/lorc/padlock.svg"
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "locked",
            "value": true
          },
          {
            "func": "SELECT",
            "property": "tile",
            "value": true
          },
          {
            "func": "SELECT",
            "mode": "add",
            "property": "structure",
            "value": true
          },
          {
            "func": "SET",
            "property": "movable",
            "value": false
          },
          {
            "func": "SELECT",
            "property": "hexTile",
            "value": true
          },
          {
            "func": "SET",
            "property": "clickable",
            "value": false
          }
        ]
      }
    ],
    "locked": false,
    "css": {
      "::after": {
        "content": "\"Lock/Unlock Board\"",
        "display": "none",
        "position": "absolute",
        "margin-top": "-35px",
        "margin-left": "-14px",
        "color": "black",
        "width": "80px",
        "text-align": "center",
        "font-size": "14px",
        "font-family": "Roboto"
      },
      ":hover::after": {
        "display": "block"
      }
    },
    "x": 15,
    "z": 1
  },
  "moveTileButton2": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton2",
    "x": 45,
    "y": 0,
    "text": 2,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton3": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton3",
    "x": 90,
    "y": 0,
    "text": 3,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton4": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton4",
    "x": 135,
    "y": 0,
    "text": 4,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton5": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton5",
    "x": 180,
    "y": 0,
    "text": 5,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton6": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton6",
    "x": 225,
    "y": 0,
    "text": 6,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton7": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton7",
    "x": 0,
    "y": 45,
    "rotation": 180,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton8": {
    "inheritFrom": {
      "moveTileButton2": "*"
    },
    "type": "button",
    "id": "moveTileButton8",
    "x": 45,
    "y": 45,
    "rotation": 180,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton9": {
    "inheritFrom": {
      "moveTileButton3": "*"
    },
    "type": "button",
    "id": "moveTileButton9",
    "x": 90,
    "y": 45,
    "rotation": 180,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton10": {
    "inheritFrom": {
      "moveTileButton4": "*"
    },
    "type": "button",
    "id": "moveTileButton10",
    "x": 135,
    "y": 45,
    "rotation": 180,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton11": {
    "inheritFrom": {
      "moveTileButton5": "*"
    },
    "type": "button",
    "id": "moveTileButton11",
    "x": 180,
    "y": 45,
    "rotation": 180,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton12": {
    "inheritFrom": {
      "moveTileButton6": "*"
    },
    "type": "button",
    "id": "moveTileButton12",
    "x": 225,
    "y": 45,
    "rotation": 180,
    "parent": "0MoveGroup",
    "z": 1,
    "bgColor": ""
  },
  "moveTileButton13": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton13",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton14": {
    "inheritFrom": {
      "moveTileButton2": "*"
    },
    "type": "button",
    "id": "moveTileButton14",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton15": {
    "inheritFrom": {
      "moveTileButton3": "*"
    },
    "type": "button",
    "id": "moveTileButton15",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton16": {
    "inheritFrom": {
      "moveTileButton4": "*"
    },
    "type": "button",
    "id": "moveTileButton16",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton17": {
    "inheritFrom": {
      "moveTileButton5": "*"
    },
    "type": "button",
    "id": "moveTileButton17",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton18": {
    "inheritFrom": {
      "moveTileButton6": "*"
    },
    "type": "button",
    "id": "moveTileButton18",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton19": {
    "inheritFrom": {
      "moveTileButton7": "*"
    },
    "type": "button",
    "id": "moveTileButton19",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton20": {
    "inheritFrom": {
      "moveTileButton8": "*"
    },
    "type": "button",
    "id": "moveTileButton20",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton21": {
    "inheritFrom": {
      "moveTileButton9": "*"
    },
    "type": "button",
    "id": "moveTileButton21",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton22": {
    "inheritFrom": {
      "moveTileButton10": "*"
    },
    "type": "button",
    "id": "moveTileButton22",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton23": {
    "inheritFrom": {
      "moveTileButton11": "*"
    },
    "type": "button",
    "id": "moveTileButton23",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton24": {
    "inheritFrom": {
      "moveTileButton12": "*"
    },
    "type": "button",
    "id": "moveTileButton24",
    "parent": "1MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton25": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton25",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton26": {
    "inheritFrom": {
      "moveTileButton2": "*"
    },
    "type": "button",
    "id": "moveTileButton26",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton27": {
    "inheritFrom": {
      "moveTileButton3": "*"
    },
    "type": "button",
    "id": "moveTileButton27",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton28": {
    "inheritFrom": {
      "moveTileButton4": "*"
    },
    "type": "button",
    "id": "moveTileButton28",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton29": {
    "inheritFrom": {
      "moveTileButton5": "*"
    },
    "type": "button",
    "id": "moveTileButton29",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton30": {
    "inheritFrom": {
      "moveTileButton6": "*"
    },
    "type": "button",
    "id": "moveTileButton30",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton31": {
    "inheritFrom": {
      "moveTileButton7": "*"
    },
    "type": "button",
    "id": "moveTileButton31",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton32": {
    "inheritFrom": {
      "moveTileButton8": "*"
    },
    "type": "button",
    "id": "moveTileButton32",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton33": {
    "inheritFrom": {
      "moveTileButton9": "*"
    },
    "type": "button",
    "id": "moveTileButton33",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton34": {
    "inheritFrom": {
      "moveTileButton10": "*"
    },
    "type": "button",
    "id": "moveTileButton34",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton35": {
    "inheritFrom": {
      "moveTileButton11": "*"
    },
    "type": "button",
    "id": "moveTileButton35",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton36": {
    "inheritFrom": {
      "moveTileButton12": "*"
    },
    "type": "button",
    "id": "moveTileButton36",
    "parent": "2MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton37": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton37",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton38": {
    "inheritFrom": {
      "moveTileButton2": "*"
    },
    "type": "button",
    "id": "moveTileButton38",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton39": {
    "inheritFrom": {
      "moveTileButton3": "*"
    },
    "type": "button",
    "id": "moveTileButton39",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton40": {
    "inheritFrom": {
      "moveTileButton4": "*"
    },
    "type": "button",
    "id": "moveTileButton40",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton41": {
    "inheritFrom": {
      "moveTileButton5": "*"
    },
    "type": "button",
    "id": "moveTileButton41",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton42": {
    "inheritFrom": {
      "moveTileButton6": "*"
    },
    "type": "button",
    "id": "moveTileButton42",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton43": {
    "inheritFrom": {
      "moveTileButton7": "*"
    },
    "type": "button",
    "id": "moveTileButton43",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton44": {
    "inheritFrom": {
      "moveTileButton8": "*"
    },
    "type": "button",
    "id": "moveTileButton44",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton45": {
    "inheritFrom": {
      "moveTileButton9": "*"
    },
    "type": "button",
    "id": "moveTileButton45",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton46": {
    "inheritFrom": {
      "moveTileButton10": "*"
    },
    "type": "button",
    "id": "moveTileButton46",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton47": {
    "inheritFrom": {
      "moveTileButton11": "*"
    },
    "type": "button",
    "id": "moveTileButton47",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton48": {
    "inheritFrom": {
      "moveTileButton12": "*"
    },
    "type": "button",
    "id": "moveTileButton48",
    "parent": "3MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton49": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton49",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton50": {
    "inheritFrom": {
      "moveTileButton2": "*"
    },
    "type": "button",
    "id": "moveTileButton50",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton51": {
    "inheritFrom": {
      "moveTileButton3": "*"
    },
    "type": "button",
    "id": "moveTileButton51",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton52": {
    "inheritFrom": {
      "moveTileButton4": "*"
    },
    "type": "button",
    "id": "moveTileButton52",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton53": {
    "inheritFrom": {
      "moveTileButton5": "*"
    },
    "type": "button",
    "id": "moveTileButton53",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton54": {
    "inheritFrom": {
      "moveTileButton6": "*"
    },
    "type": "button",
    "id": "moveTileButton54",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton55": {
    "inheritFrom": {
      "moveTileButton7": "*"
    },
    "type": "button",
    "id": "moveTileButton55",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton56": {
    "inheritFrom": {
      "moveTileButton8": "*"
    },
    "type": "button",
    "id": "moveTileButton56",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton57": {
    "inheritFrom": {
      "moveTileButton9": "*"
    },
    "type": "button",
    "id": "moveTileButton57",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton58": {
    "inheritFrom": {
      "moveTileButton10": "*"
    },
    "type": "button",
    "id": "moveTileButton58",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton59": {
    "inheritFrom": {
      "moveTileButton11": "*"
    },
    "type": "button",
    "id": "moveTileButton59",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton60": {
    "inheritFrom": {
      "moveTileButton12": "*"
    },
    "type": "button",
    "id": "moveTileButton60",
    "parent": "4MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton61": {
    "inheritFrom": {
      "moveTileButton1": "*"
    },
    "type": "button",
    "id": "moveTileButton61",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton62": {
    "inheritFrom": {
      "moveTileButton2": "*"
    },
    "type": "button",
    "id": "moveTileButton62",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton63": {
    "inheritFrom": {
      "moveTileButton3": "*"
    },
    "type": "button",
    "id": "moveTileButton63",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton64": {
    "inheritFrom": {
      "moveTileButton4": "*"
    },
    "type": "button",
    "id": "moveTileButton64",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton65": {
    "inheritFrom": {
      "moveTileButton5": "*"
    },
    "type": "button",
    "id": "moveTileButton65",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton66": {
    "inheritFrom": {
      "moveTileButton6": "*"
    },
    "type": "button",
    "id": "moveTileButton66",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton67": {
    "inheritFrom": {
      "moveTileButton7": "*"
    },
    "type": "button",
    "id": "moveTileButton67",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton68": {
    "inheritFrom": {
      "moveTileButton8": "*"
    },
    "type": "button",
    "id": "moveTileButton68",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton69": {
    "inheritFrom": {
      "moveTileButton9": "*"
    },
    "type": "button",
    "id": "moveTileButton69",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton70": {
    "inheritFrom": {
      "moveTileButton10": "*"
    },
    "type": "button",
    "id": "moveTileButton70",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton71": {
    "inheritFrom": {
      "moveTileButton11": "*"
    },
    "type": "button",
    "id": "moveTileButton71",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "moveTileButton72": {
    "inheritFrom": {
      "moveTileButton12": "*"
    },
    "type": "button",
    "id": "moveTileButton72",
    "parent": "5MoveGroup",
    "bgColor": "",
    "z": 1
  },
  "0MoveGroup": {
    "id": "0MoveGroup",
    "y": 89,
    "width": 260,
    "height": 80,
    "layer": -3,
    "movable": false,
    "parent": "boardBack",
    "fixedParent": true,
    "css": {
      "pointer-events": "auto"
    },
    "x": 94,
    "moveGroup": true,
    "z": 1,
    "scale": 0
  },
  "1MoveGroup": {
    "id": "1MoveGroup",
    "x": 542,
    "y": 82,
    "inheritFrom": {
      "0MoveGroup": "*"
    },
    "z": 1
  },
  "2MoveGroup": {
    "id": "2MoveGroup",
    "x": 94,
    "y": 347,
    "inheritFrom": {
      "0MoveGroup": "*"
    },
    "z": 1
  },
  "3MoveGroup": {
    "id": "3MoveGroup",
    "x": 542,
    "y": 347,
    "inheritFrom": {
      "0MoveGroup": "*"
    },
    "z": 1
  },
  "4MoveGroup": {
    "id": "4MoveGroup",
    "x": 94,
    "y": 605,
    "inheritFrom": {
      "0MoveGroup": "*"
    },
    "z": 1
  },
  "5MoveGroup": {
    "id": "5MoveGroup",
    "x": 542,
    "y": 605,
    "inheritFrom": {
      "0MoveGroup": "*"
    },
    "z": 1
  },
  "moveTileButton1": {
    "type": "button",
    "id": "moveTileButton1",
    "parent": "0MoveGroup",
    "width": 35,
    "height": 35,
    "z": 1,
    "css": {
      "font-size": "20px",
      "opacity": 0.6,
      "background": "${PROPERTY bgColor}"
    },
    "text": 1,
    "posX0": 0,
    "posX1": 448,
    "posX2": 0,
    "posX3": 448,
    "posX4": 0,
    "posX5": 448,
    "posY0": 0,
    "posY1": 0,
    "posY2": 258,
    "posY3": 258,
    "posY4": 516,
    "posY5": 516,
    "clickRoutine": [
      "var pos = ${PROPERTY parent} charAt 0",
      "var posX = 'posX' + ${pos}",
      "var posY = 'posY' + ${pos}",
      {
        "func": "SELECT",
        "property": "id",
        "value": "tile${PROPERTY text}"
      },
      {
        "func": "SET",
        "property": "x",
        "value": "${PROPERTY $posX}"
      },
      {
        "func": "SET",
        "property": "y",
        "value": "${PROPERTY $posY}"
      },
      {
        "func": "SET",
        "property": "rotation",
        "value": "${PROPERTY rotation}"
      },
      {
        "func": "SELECT",
        "property": "moveTileButton",
        "value": true
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "text",
        "value": "${PROPERTY text}"
      },
      {
        "func": "SET",
        "property": "bgColor",
        "value": "red"
      }
    ],
    "moveTileButton": true,
    "bgColor": ""
  },
  "reset": {
    "type": "button",
    "id": "reset",
    "x": 1545,
    "z": 1,
    "clickRoutine": [
      {
        "func": "INPUT",
        "fields": [
          {
            "type": "title",
            "text": "Resetting board ..."
          },
          {
            "type": "subtitle",
            "text": "Choose the method for setting up the board and press Confirm to reset the board."
          },
          {
            "type": "select",
            "label": "How do you want to set up the board?",
            "variable": "method",
            "value": "${PROPERTY method}",
            "options": [
              {
                "value": "defined",
                "text": "Choose from the rule book"
              },
              {
                "value": "manual",
                "text": "Manually"
              }
            ]
          },
          {
            "type": "checkbox",
            "label": "Hide player instructions?",
            "variable": "hideInstructions",
            "value": false
          }
        ],
        "confirmButtonText": "Confirm"
      },
      {
        "func": "SET",
        "collection": "thisButton",
        "property": "hideInstructions",
        "value": "${hideInstructions}"
      },
      {
        "func": "SELECT",
        "property": "id",
        "relation": "!=",
        "value": null
      },
      {
        "func": "SET",
        "property": "z",
        "value": 1
      },
      {
        "func": "SET",
        "collection": "thisButton",
        "property": "method",
        "value": "${method}"
      },
      {
        "func": "SELECT",
        "property": "tile",
        "value": true
      },
      {
        "func": "SET",
        "property": "x",
        "value": -600
      },
      {
        "func": "SET",
        "property": "y",
        "value": 0
      },
      {
        "func": "SELECT",
        "property": "structure",
        "value": true
      },
      {
        "func": "FOREACH",
        "collection": "DEFAULT",
        "loopRoutine": [
          {
            "func": "GET",
            "collection": "DEFAULT",
            "property": "piece"
          },
          {
            "func": "MOVE",
            "collection": "DEFAULT",
            "to": "pieceHolder${piece}"
          }
        ]
      },
      {
        "func": "SELECT",
        "property": "moveTileButton",
        "value": true
      },
      {
        "func": "SET",
        "property": "bgColor",
        "value": ""
      },
      {
        "func": "SELECT",
        "property": "clue",
        "value": true
      },
      {
        "func": "SET",
        "property": "text",
        "value": ""
      },
      {
        "func": "SET",
        "property": "editable",
        "value": false
      },
      {
        "func": "IF",
        "condition": "${PROPERTY locked OF lock}",
        "elseRoutine": [
          {
            "func": "CLICK",
            "collection": [
              "lock"
            ]
          }
        ]
      },
      {
        "func": "SET",
        "collection": [
          "0MoveGroup"
        ],
        "property": "scale",
        "value": 0
      },
      {
        "func": "SELECT",
        "property": "playerToken",
        "value": true
      },
      {
        "func": "DELETE"
      },
      {
        "func": "SET",
        "collection": [
          "hintText"
        ],
        "property": "scale",
        "value": 0
      },
      {
        "func": "SET",
        "collection": [
          "hintText"
        ],
        "property": "editable",
        "value": false
      },
      {
        "func": "SET",
        "collection": [
          "hint"
        ],
        "property": "scale",
        "value": 1
      },
      {
        "func": "SELECT",
        "property": "instructions",
        "value": true
      },
      {
        "func": "SET",
        "property": "text",
        "value": ""
      },
      {
        "func": "SET",
        "property": "scale",
        "value": 0
      },
      {
        "func": "SET",
        "collection": [
          "turn"
        ],
        "property": "mode",
        "value": "setup"
      },
      {
        "func": "SET",
        "collection": [
          "setUpLabel"
        ],
        "property": "scale",
        "value": 1
      },
      {
        "func": "SET",
        "collection": [
          "setUpLabel"
        ],
        "property": "text",
        "value": "${PROPERTY defined OF setUpLabel}"
      },
      {
        "func": "TIMER",
        "collection": [
          "timer"
        ],
        "mode": "reset"
      },
      "// This needs to be almost the last thing to make sure other tasks are complete before they are altered by the method of setting up the room",
      {
        "func": "CALL",
        "routine": "methodRoutine"
      }
    ],
    "text": "restart",
    "method": "defined",
    "methodRoutine": [
      {
        "func": "IF",
        "operand1": "${PROPERTY method}",
        "operand2": "defined",
        "thenRoutine": [
          {
            "func": "CLICK",
            "collection": [
              "setUpBoard"
            ]
          }
        ]
      },
      {
        "func": "IF",
        "operand1": "${PROPERTY method}",
        "operand2": "manual",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": [
              "gameIDLabel"
            ],
            "property": "scale",
            "value": 0
          },
          {
            "func": "SELECT",
            "property": "clue",
            "value": true
          },
          {
            "func": "SET",
            "property": "editable",
            "value": true
          },
          {
            "func": "SET",
            "property": "text",
            "value": "[type your clue here]"
          },
          {
            "func": "SET",
            "collection": [
              "hintText"
            ],
            "property": "editable",
            "value": true
          },
          {
            "func": "SET",
            "collection": [
              "hintText"
            ],
            "property": "text",
            "value": "[type hint here]"
          },
          {
            "func": "SET",
            "collection": [
              "0MoveGroup"
            ],
            "property": "scale",
            "value": 1
          },
          {
            "func": "IF",
            "condition": "${PROPERTY locked OF lock}",
            "thenRoutine": [
              {
                "func": "CLICK",
                "collection": [
                  "lock"
                ]
              }
            ]
          },
          {
            "func": "TURN",
            "turnCycle": "random"
          },
          {
            "func": "SELECT",
            "type": "seat",
            "property": "turn",
            "value": true
          },
          {
            "func": "GET",
            "property": "index"
          },
          {
            "func": "MOVE",
            "collection": [
              "pin"
            ],
            "to": "pinHolder${index}"
          },
          {
            "func": "SET",
            "collection": [
              "setUpLabel"
            ],
            "property": "text",
            "value": "${PROPERTY manual OF setUpLabel}"
          },
          {
            "func": "xSET",
            "collection": [
              "instructions${index}"
            ],
            "property": "text",
            "value": "Set up the board. Have players type clues into their labels. Then move the pin and question a player or start a search."
          }
        ]
      }
    ],
    "classes": "symbols",
    "color": "white",
    "css": {
      "default": {
        "font-size": "40px",
        "--wcMain": "black",
        "--wcBorder": "white",
        "--wcMainOH": "grey",
        "--wcBorderOH": "black"
      },
      "::after": {
        "content": "\"Reset\"",
        "display": "none",
        "position": "absolute",
        "margin-top": "71px",
        "color": "black",
        "font-size": "14px",
        "font-family": "Roboto"
      },
      ":hover::after": {
        "display": "block"
      }
    },
    "width": 50,
    "height": 50,
    "y": 6,
    "hideInstructions": false
  },
  "turn": {
    "type": "button",
    "id": "turn",
    "x": 960,
    "y": 5,
    "z": 1,
    "clickRoutine": [
      {
        "func": "IF",
        "operand1": "${PROPERTY mode}",
        "relation": "!=",
        "operand2": "setup",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "mode",
            "value": ""
          },
          {
            "func": "SELECT",
            "property": "instructions",
            "value": true
          },
          {
            "func": "SET",
            "property": "text",
            "value": ""
          },
          {
            "func": "TURN"
          },
          {
            "func": "SELECT",
            "type": "seat",
            "property": "turn",
            "value": true
          },
          {
            "func": "GET",
            "property": "index"
          },
          {
            "func": "SET",
            "collection": [
              "instructions${index}"
            ],
            "property": "text",
            "value": "The turn button was manually activated. Take action (like moving the pin or playing a cube or disc)."
          }
        ],
        "elseRoutine": [
          {
            "func": "TURN"
          }
        ]
      }
    ],
    "classes": "symbols",
    "color": "white",
    "css": {
      "default": {
        "font-size": "40px",
        "--wcMain": "black",
        "--wcBorder": "white",
        "--wcMainOH": "grey",
        "--wcBorderOH": "black"
      },
      "::after": {
        "content": "\"Turn\"",
        "display": "none",
        "position": "absolute",
        "margin-top": "71px",
        "color": "black",
        "font-size": "14px",
        "font-family": "Roboto"
      },
      ":hover::after": {
        "display": "block"
      }
    },
    "text": "skip_next",
    "width": 50,
    "height": 50,
    "mode": "setup",
    "lastTurn": 4
  },
  "footprints": {
    "id": "footprints",
    "width": 750,
    "height": 750,
    "layer": -3,
    "movable": false,
    "css": {
      "opacity": 0.1
    },
    "image": "/assets/-879043168_38306",
    "y": 42,
    "x": 59,
    "z": 1
  },
  "background": {
    "id": "background",
    "width": 1600,
    "height": 1000,
    "layer": -4,
    "movable": false,
    "css": {
      "opacity": "0.3"
    },
    "image": "/assets/520752421_214524",
    "borderRadius": 8,
    "z": 1
  },
  "hints": {
    "id": "hints",
    "x": -445,
    "y": 952,
    "z": 2,
    "css": {
      "background": "blue",
      "color": "white",
      "font-size": "35px"
    },
    "text": "Hints",
    "arrayHintsPlayers": [
      [],
      [
        2,
        9,
        15
      ],
      [
        29,
        38,
        78
      ],
      [
        74,
        15,
        1
      ],
      [
        21,
        24,
        18
      ],
      [
        53,
        29,
        51
      ],
      [
        55,
        27,
        76
      ],
      [
        37,
        14,
        6
      ],
      [
        67,
        65,
        64
      ],
      [
        7,
        72,
        9
      ],
      [
        20,
        43,
        2
      ],
      [
        33,
        58,
        42
      ],
      [
        1,
        24,
        77
      ],
      [
        47,
        42,
        34
      ],
      [
        28,
        44,
        54
      ],
      [
        30,
        48,
        4
      ],
      [
        7,
        53,
        51
      ],
      [
        25,
        74,
        15
      ],
      [
        42,
        38,
        40
      ],
      [
        16,
        69,
        23
      ],
      [
        56,
        39,
        39
      ],
      [
        64,
        59,
        53
      ],
      [
        41,
        58,
        43
      ],
      [
        17,
        45,
        54
      ],
      [
        80,
        44,
        35
      ],
      [
        28,
        40,
        63
      ],
      [
        51,
        48,
        68
      ],
      [
        72,
        46,
        69
      ],
      [
        52,
        37,
        63
      ],
      [
        8,
        79,
        11
      ],
      [
        78,
        75,
        26
      ],
      [
        62,
        23,
        61
      ],
      [
        32,
        50,
        48
      ],
      [
        47,
        29,
        18
      ],
      [
        74,
        19,
        34
      ],
      [
        32,
        11,
        43
      ],
      [
        25,
        44,
        17
      ],
      [
        20,
        65,
        38
      ],
      [
        32,
        22,
        71
      ],
      [
        58,
        66,
        45
      ],
      [
        64,
        62,
        24
      ],
      [
        75,
        8,
        78
      ],
      [
        12,
        3,
        31
      ],
      [
        26,
        31,
        61
      ],
      [
        77,
        27,
        72
      ],
      [
        52,
        35,
        11
      ],
      [
        59,
        55,
        76
      ],
      [
        17,
        45,
        10
      ],
      [
        66,
        70,
        34
      ],
      [
        59,
        12,
        6
      ],
      [
        5,
        9,
        13
      ],
      [
        50,
        49,
        41
      ],
      [
        15,
        30,
        8
      ],
      [
        6,
        3,
        68
      ],
      [
        49,
        7,
        40
      ]
    ],
    "arrayHints": [
      "",
      "no within two spaces clues",
      "no within three spaces clues",
      "no within two spaces clues",
      "no clues that mention any animal territory",
      "no within three spaces clues",
      "no within two spaces clues",
      "no terrain or terrain clues",
      "no within one space clues",
      "no within three spaces clues",
      "no clues that mention desert",
      "no clues that mention forest",
      "no within two spaces clues",
      "no within two spaces clues",
      "no within two spaces clues",
      "no within three spaces clues",
      "no within one space clues",
      "no within two spaces clues",
      "no clues that mention mountain",
      "no clues that mention swamp",
      "no within three spaces clues",
      "no within one space clues",
      "no clues that mention mountain",
      "no within three spaces clues",
      "no within one space clues",
      "no within two spaces clues",
      "no within one space clues",
      "no within that mention forest",
      "no within one space clues",
      "no within three spaces clues",
      "no clues that mention water",
      "no clues that mention swamp",
      "no terrain or terrain clues",
      "no within one space clues",
      "no within two spaces clues",
      "no within one space clues",
      "no terrain or terrain clues",
      "no within one space clues",
      "no within three spaces clues",
      "no clues that mention water",
      "no within three spaces clues",
      "no within three spaces clues",
      "no within two spaces clues",
      "no within three spaces clues",
      "no within three spaces clues",
      "no within one space clues",
      "no clues that mention water",
      "no within two spaces clues",
      "no within two spaces clues",
      "no terrain or terrain clues",
      "no within two spaces clues",
      "no within two spaces clues",
      "no clues that mention any type of terrain",
      "no within two spaces clues",
      "no within three spaces clues",
      "no within one space clues",
      "no within three spaces clues",
      "no clues that mention desert",
      "no within three spaces clues",
      "no terrain or terrain clues",
      "no within two spaces clues",
      "no within two spaces clues",
      "no within two spaces clues",
      "no clues that mention forest",
      "no within two spaces clues",
      "no within two spaces clues",
      "no within three spaces clues",
      "no within two spaces clues",
      "no clues that mention swamp",
      "no clues that mention mountain",
      "no within three spaces clues",
      "no clues that mention desert",
      "no within two spaces clues",
      "no within three spaces clues",
      "no within three spaces clues",
      "no within three spaces clues",
      "no within one space clues",
      "no within two spaces clues",
      "no within two spaces clues",
      "no within three spaces clues",
      "no terrain or terrain clues"
    ]
  },
  "hint": {
    "type": "button",
    "id": "hint",
    "x": 960,
    "y": 945,
    "width": 50,
    "height": 50,
    "z": 1,
    "color": "white",
    "css": {
      "default": {
        "font-size": "40px",
        "--wcMain": "white",
        "--wcBorder": "black",
        "--wcMainOH": "grey",
        "--wcBorderOH": "white",
        "background-image": "url('/i/game-icons.net/lorc/magnifying-glass.svg')",
        "background-size": "75%"
      },
      "::after": {
        "content": "\"Hint\"",
        "display": "none",
        "position": "absolute",
        "margin-top": "-71px",
        "color": "black",
        "font-size": "14px",
        "font-family": "Roboto"
      },
      ":hover::after": {
        "display": "block"
      }
    },
    "clickRoutine": [
      {
        "func": "INPUT",
        "fields": [
          {
            "type": "title",
            "text": "Display the hint for this board"
          },
          {
            "type": "subtitle",
            "text": "Click Confirm to reveal the hint for this board for all players to see."
          }
        ],
        "confirmButtonText": "Confirm"
      },
      {
        "func": "SET",
        "collection": [
          "hintText"
        ],
        "property": "scale",
        "value": 1
      },
      {
        "func": "IF",
        "operand1": "${PROPERTY method OF reset}",
        "operand2": "defined",
        "thenRoutine": [
          {
            "func": "SELECT",
            "type": "seat",
            "property": "player",
            "relation": "!=",
            "value": ""
          },
          {
            "func": "COUNT",
            "variable": "playerCount"
          },
          "var hintIndex = ${playerCount} - 3",
          {
            "func": "IF",
            "operand1": "${hintIndex}",
            "relation": "<",
            "operand2": 0,
            "thenRoutine": [
              "var hintIndex = 0"
            ]
          },
          "var gameID = ${PROPERTY gameID OF setUpBoard}",
          "var hintsArray = ${PROPERTY arrayHints OF hints}",
          "var hintsArrayPlayers = ${PROPERTY arrayHintsPlayers OF hints}",
          "var hintsArrayPlayers = ${hintsArrayPlayers.$gameID}",
          "var thisHint = ${hintsArrayPlayers.$hintIndex}",
          "var thisHint = ${hintsArray.$thisHint}",
          {
            "func": "SET",
            "collection": [
              "hintText"
            ],
            "property": "text",
            "value": "${thisHint}"
          }
        ]
      },
      {
        "func": "SET",
        "collection": "thisButton",
        "property": "scale",
        "value": 0
      }
    ]
  },
  "hintText": {
    "id": "hintText",
    "x": 1050,
    "y": 910,
    "width": 530,
    "height": 85,
    "borderRadius": 8,
    "z": 1,
    "css": {
      "font-size": "25px",
      "color": "black",
      "background": "white",
      "border": "1px solid black",
      "line-height": "3em"
    },
    "text": "[type hint here]",
    "type": "label",
    "scale": 0,
    "editable": true
  },
  "hintLabel": {
    "id": "hintLabel",
    "text": "Hint",
    "css": {
      "font-size": "30px",
      "color": "red",
      "line-height": "1em"
    },
    "movable": false,
    "parent": "hintText",
    "x": -80,
    "y": 30,
    "width": 60,
    "height": 30,
    "z": 1
  },
  "pin": {
    "id": "pin",
    "x": 1109,
    "y": 11,
    "width": 35,
    "height": 40,
    "z": 344,
    "color": "lightgreen",
    "css": "border-radius: 80% 80% 40% 110%",
    "image": "/i/game-pieces/3D/Pin-3D.svg",
    "svgReplaces": {
      "#borderWidth": "borderWidth",
      "#borderColor": "borderColor",
      "#primaryColor": "color"
    },
    "borderColor": "black",
    "borderWidth": "1",
    "pin": true,
    "layer": 6
  },
  "noPlayHolder": {
    "type": "holder",
    "id": "noPlayHolder",
    "x": 450,
    "y": 945,
    "width": 50,
    "height": 50,
    "z": 1,
    "dropTarget": {
      "piece": 9
    },
    "css": {
      "background": "#ffffff80"
    }
  },
  "hex1": {
    "id": "hex1",
    "z": 1,
    "grid": [
      {
        "x": 150,
        "y": 86.6,
        "offsetX": -75,
        "offsetY": -43.3
      },
      {
        "x": 150,
        "y": 86.6,
        "offsetX": 0,
        "offsetY": 0
      }
    ],
    "parent": "tile1",
    "fixedParent": true,
    "type": "holder",
    "css": {
      "background-image": "url('${PROPERTY water}')",
      "background-size": "contain",
      "background-color": "transparent",
      "border": "transparent",
      "pointer-events": "auto"
    },
    "height": 100,
    "width": 100,
    "dropTarget": [
      {
        "token": true
      },
      {
        "playerToken": true
      },
      {
        "id": "pin"
      }
    ],
    "water": "/assets/-1077345090_3854",
    "desert": "/assets/-1183123152_4656",
    "forest": "/assets/455711634_7156",
    "mountain": "/assets/117619137_5390",
    "swamp": "/assets/1211432277_3828",
    "clickRoutine": [
      "// Rotate the entire tile 180 deg (if the lock is not not)",
      {
        "func": "ROTATE",
        "collection": [
          "${PROPERTY parent}"
        ],
        "angle": 180,
        "mode": "add"
      }
    ],
    "dropOffsetX": 0,
    "dropOffsetY": 0,
    "hexTile": true,
    "leaveRoutine": [
      {
        "func": "SET",
        "collection": "child",
        "property": "rotation",
        "value": 0
      },
      {
        "func": "CALL",
        "routine": "adjustPositionRoutine"
      }
    ],
    "borderRadius": 100,
    "rotation": -30,
    "noPlayRoutine": [
      {
        "func": "GET",
        "collection": [
          "instructions${seatIndex}"
        ],
        "property": "text",
        "variable": "originalText"
      },
      "var newText = 'Invalid play. Try again. ' + ${originalText}",
      {
        "func": "SET",
        "collection": [
          "instructions${seatIndex}"
        ],
        "property": "text",
        "value": "${newText}"
      },
      {
        "func": "MOVE",
        "collection": "child",
        "to": "noPlayHolder"
      }
    ],
    "alignChildren": false,
    "questionTurnRoutine": [
      {
        "func": "IF",
        "condition": "${isDisc}",
        "thenRoutine": [
          "// If this is a disc played by the player being questioned, then it is the next player's turn (the one after the player that asked the question)",
          {
            "func": "SELECT",
            "property": "instructions",
            "value": true
          },
          {
            "func": "SET",
            "property": "text",
            "value": ""
          },
          {
            "func": "TURN",
            "turnCycle": "seat",
            "turn": "seat${PROPERTY lastTurn OF turn}"
          },
          {
            "func": "TURN"
          },
          {
            "func": "SELECT",
            "type": "seat",
            "property": "turn",
            "value": true
          },
          {
            "func": "GET",
            "property": "index"
          },
          {
            "func": "MOVE",
            "collection": [
              "pin"
            ],
            "to": "pinHolder${index}"
          },
          {
            "func": "SET",
            "collection": [
              "instructions${index}"
            ],
            "property": "text",
            "value": "Move the pin, then question a player or start a search."
          },
          {
            "func": "SET",
            "collection": [
              "turn"
            ],
            "property": "mode",
            "value": ""
          }
        ],
        "elseRoutine": [
          "// If this is a cube played by the player that asked the question, then it is the next player's turn",
          {
            "func": "IF",
            "operand1": "${pid}",
            "operand2": "${PROPERTY lastTurn OF turn}",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": [
                  "instructions${PROPERTY lastTurn OF turn}"
                ],
                "property": "text",
                "value": ""
              },
              {
                "func": "TURN",
                "turnCycle": "seat",
                "turn": "seat${seatIndex}"
              },
              {
                "func": "TURN"
              },
              {
                "func": "SELECT",
                "type": "seat",
                "property": "turn",
                "value": true
              },
              {
                "func": "GET",
                "property": "index"
              },
              {
                "func": "MOVE",
                "collection": [
                  "pin"
                ],
                "to": "pinHolder${index}"
              },
              {
                "func": "SET",
                "collection": [
                  "instructions${index}"
                ],
                "property": "text",
                "value": "Move the pin, then question a player or start a search."
              },
              {
                "func": "SET",
                "collection": [
                  "turn"
                ],
                "property": "mode",
                "value": ""
              }
            ],
            "elseRoutine": [
              "// Otherwise, the player asking the question must play a cube in response to the player being questioned playing a cube",
              {
                "func": "SELECT",
                "property": "instructions",
                "value": true
              },
              {
                "func": "SET",
                "property": "text",
                "value": ""
              },
              {
                "func": "SET",
                "collection": [
                  "instructions${PROPERTY lastTurn OF turn}"
                ],
                "property": "text",
                "value": "Play a cube on a different space where the sasquatch cannot be located."
              }
            ]
          }
        ]
      }
    ],
    "searchTurnRoutine": [
      {
        "func": "IF",
        "condition": "${isDisc}",
        "thenRoutine": [
          "// If this is a disc, then check for victory conditon (the space has a disc from each player)",
          {
            "func": "GET",
            "collection": [
              "pin"
            ],
            "property": "parent",
            "variable": "pinParent"
          },
          {
            "func": "SELECT",
            "property": "disc",
            "value": true,
            "collection": "allDiscs"
          },
          {
            "func": "SELECT",
            "source": "allDiscs",
            "property": "parent",
            "value": "${pinParent}",
            "collection": "pinDiscs"
          },
          {
            "func": "SELECT",
            "type": "seat",
            "property": "player",
            "relation": "!=",
            "value": "",
            "collection": "activeSeats"
          },
          {
            "func": "COUNT",
            "collection": "activeSeats",
            "variable": "activeSeatCount"
          },
          "var discsArray = []",
          {
            "func": "FOREACH",
            "collection": "activeSeats",
            "loopRoutine": [
              {
                "func": "GET",
                "collection": "DEFAULT",
                "property": "index"
              },
              {
                "func": "SELECT",
                "source": "pinDiscs",
                "property": "pid",
                "value": "${index}",
                "collection": "discID"
              },
              {
                "func": "COUNT",
                "collection": "discID"
              },
              {
                "func": "IF",
                "operand1": "${COUNT}",
                "relation": ">",
                "operand2": 0,
                "thenRoutine": [
                  {
                    "func": "GET",
                    "collection": "discID",
                    "property": "pid",
                    "variable": "discPID"
                  },
                  "var seat = 'seat' + ${discPID}",
                  "var discsArray = push ${seat}"
                ]
              }
            ]
          },
          "var length = ${discsArray} length",
          {
            "func": "IF",
            "operand1": "${length}",
            "operand2": "${activeSeatCount}",
            "thenRoutine": [
              "// Player that started the search wins",
              {
                "func": "SELECT",
                "property": "instructions",
                "value": true
              },
              {
                "func": "SET",
                "property": "text",
                "value": ""
              },
              {
                "func": "SET",
                "collection": [
                  "instructions${PROPERTY lastTurn OF turn}"
                ],
                "property": "text",
                "value": "You Won! You found the only place on the board where the sasquatch can be. (But double check just to be sure)."
              }
            ],
            "elseRoutine": [
              "// No victory condition yet so move turn to next player",
              {
                "func": "SELECT",
                "property": "id",
                "relation": "in",
                "value": "${discsArray}",
                "mode": "remove",
                "collection": "activeSeats"
              },
              {
                "func": "GET",
                "collection": "activeSeats",
                "property": "id",
                "variable": "nextSeat"
              },
              {
                "func": "TURN",
                "turnCycle": "seat",
                "turn": "${nextSeat}"
              },
              {
                "func": "SELECT",
                "property": "instructions",
                "value": true
              },
              {
                "func": "SET",
                "property": "text",
                "value": ""
              },
              {
                "func": "SELECT",
                "type": "seat",
                "property": "turn",
                "value": true
              },
              {
                "func": "GET",
                "property": "index"
              },
              {
                "func": "SET",
                "collection": [
                  "instructions${index}"
                ],
                "property": "text",
                "value": "On the space with the pin, play a cube if the sasquatch cannot be in that location or a disc if it can."
              }
            ]
          }
        ],
        "elseRoutine": [
          "// If this is a cube, then move on to the next player after the one that started the search.",
          {
            "func": "SELECT",
            "property": "instructions",
            "value": true
          },
          {
            "func": "SET",
            "property": "text",
            "value": ""
          },
          {
            "func": "SELECT",
            "type": "seat",
            "property": "turn",
            "value": true
          },
          {
            "func": "SET",
            "property": "turn",
            "value": null
          },
          {
            "func": "SET",
            "collection": [
              "seat${PROPERTY lastTurn OF turn}"
            ],
            "property": "turn",
            "value": true
          },
          {
            "func": "TURN"
          },
          {
            "func": "SELECT",
            "type": "seat",
            "property": "turn",
            "value": true
          },
          {
            "func": "GET",
            "property": "index"
          },
          {
            "func": "MOVE",
            "collection": [
              "pin"
            ],
            "to": "pinHolder${index}"
          },
          {
            "func": "SET",
            "collection": [
              "instructions${index}"
            ],
            "property": "text",
            "value": "Move the pin, then question a player or start a search."
          },
          {
            "func": "SET",
            "collection": [
              "turn"
            ],
            "property": "mode",
            "value": ""
          }
        ]
      }
    ],
    "enterRoutine": [
      "// Synch rotation between hex and entering widget",
      {
        "func": "SELECT",
        "property": "parent",
        "value": "${PROPERTY parent}"
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "hexTile",
        "value": true
      },
      {
        "func": "GET",
        "property": "rotation"
      },
      {
        "func": "GET",
        "property": "z",
        "aggregation": "max"
      },
      "var z = ${z} + 1",
      {
        "func": "SET",
        "collection": "thisButton",
        "property": "z",
        "value": "${z}"
      },
      {
        "func": "SET",
        "collection": "child",
        "property": "rotation",
        "value": 30
      },
      "// Do not allow play if cube is present",
      {
        "func": "GET",
        "collection": "child",
        "property": "playerToken"
      },
      {
        "func": "GET",
        "collection": "child",
        "property": "pin"
      },
      {
        "func": "GET",
        "collection": "child",
        "property": "cube"
      },
      {
        "func": "GET",
        "collection": "child",
        "property": "disc"
      },
      {
        "func": "GET",
        "collection": "child",
        "property": "pid"
      },
      {
        "func": "SELECT",
        "property": "cube",
        "value": true
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "parent",
        "value": "${PROPERTY id}"
      },
      {
        "func": "COUNT"
      },
      {
        "func": "IF",
        "condition": "${cube}",
        "thenRoutine": [
          "var COUNT = ${COUNT} - 1"
        ]
      },
      {
        "func": "IF",
        "operand1": "${COUNT}",
        "relation": ">=",
        "operand2": 1,
        "thenRoutine": [
          "var cubeNoPlay = true"
        ],
        "elseRoutine": [
          "var cubeNoPlay = false"
        ]
      },
      "// Do not allow play if disc from same player is present",
      {
        "func": "GET",
        "collection": "child",
        "property": "drop",
        "variable": "thisDrop"
      },
      {
        "func": "SELECT",
        "property": "disc",
        "value": true
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "parent",
        "value": "${PROPERTY id}"
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "drop",
        "value": "${thisDrop}"
      },
      {
        "func": "COUNT"
      },
      {
        "func": "IF",
        "operand1": "${COUNT}",
        "relation": ">",
        "operand2": 1,
        "thenRoutine": [
          "var discNoPlay = true"
        ],
        "elseRoutine": [
          "var discNoPlay = false"
        ]
      },
      "var noPlay = ${cubeNoPlay} || ${discNoPlay}",
      {
        "func": "IF",
        "condition": "${noPlay}",
        "thenRoutine": [
          {
            "func": "CALL",
            "routine": "noPlayRoutine"
          }
        ],
        "elseRoutine": [
          "// Calculate and adjust the widget's position",
          {
            "func": "CALL",
            "routine": "adjustPositionRoutine"
          },
          "// If the child is a playerToken then call the appropriate routine for turn and instructions",
          {
            "func": "IF",
            "condition": "${playerToken}",
            "thenRoutine": [
              "var isDisc = ${disc} == true",
              {
                "func": "IF",
                "operand1": "${PROPERTY mode OF turn}",
                "operand2": "setup",
                "thenRoutine": [
                  {
                    "func": "CALL",
                    "routine": "setupTurnRoutine"
                  }
                ]
              },
              {
                "func": "IF",
                "operand1": "${PROPERTY mode OF turn}",
                "operand2": "search",
                "thenRoutine": [
                  {
                    "func": "CALL",
                    "routine": "searchTurnRoutine"
                  }
                ]
              },
              {
                "func": "IF",
                "operand1": "${PROPERTY mode OF turn}",
                "operand2": "question",
                "thenRoutine": [
                  {
                    "func": "CALL",
                    "routine": "questionTurnRoutine"
                  }
                ]
              }
            ],
            "elseRoutine": [
              "// If the child is the pin, update the lastTurn property as long as not currently in a search or question round",
              {
                "func": "IF",
                "operand1": "${PROPERTY mode OF turn}",
                "operand2": "",
                "thenRoutine": [
                  {
                    "func": "IF",
                    "condition": "${pin}",
                    "thenRoutine": [
                      {
                        "func": "SET",
                        "collection": [
                          "turn"
                        ],
                        "property": "lastTurn",
                        "value": "${seatIndex}"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "setupTurnRoutine": [
      {
        "func": "GET",
        "collection": "child",
        "property": "cube"
      },
      "var isCube = ${cube} == true",
      {
        "func": "IF",
        "condition": "${isCube}",
        "thenRoutine": [
          {
            "func": "TURN"
          }
        ]
      }
    ],
    "adjustPositionRoutine": [
      "// Set location for structures (octagons and triangles)",
      {
        "func": "SELECT",
        "property": "structure",
        "value": true
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "parent",
        "value": "${PROPERTY id}"
      },
      {
        "func": "SET",
        "property": "x",
        "value": 21
      },
      {
        "func": "SET",
        "property": "y",
        "value": 21
      },
      "// Set location for cubes",
      {
        "func": "SELECT",
        "property": "cube",
        "value": true
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "parent",
        "value": "${PROPERTY id}"
      },
      {
        "func": "SET",
        "property": "x",
        "value": 28
      },
      {
        "func": "SET",
        "property": "y",
        "value": 27
      },
      "// Set location for discs based on the number of discs",
      {
        "func": "SELECT",
        "property": "disc",
        "value": true
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "parent",
        "value": "${PROPERTY id}",
        "sortBy": {
          "key": "z",
          "reverse": false
        }
      },
      {
        "func": "COUNT"
      },
      "var i = 0",
      {
        "func": "FOREACH",
        "collection": "DEFAULT",
        "loopRoutine": [
          "var discPosArray = 'discPosArray' + ${COUNT}",
          "var discPosArray = ${PROPERTY $discPosArray}",
          "var discPosArray = ${discPosArray.$i}",
          {
            "func": "SET",
            "collection": "DEFAULT",
            "property": "x",
            "value": "${discPosArray.0}"
          },
          {
            "func": "SET",
            "collection": "DEFAULT",
            "property": "y",
            "value": "${discPosArray.1}"
          },
          "var i = ${i} + 1"
        ]
      },
      "// Set location for pin based on whether there are any discs or not",
      {
        "func": "SELECT",
        "property": "pin",
        "value": true
      },
      {
        "func": "SELECT",
        "source": "DEFAULT",
        "property": "parent",
        "value": "${PROPERTY id}"
      },
      {
        "func": "IF",
        "operand1": "${COUNT}",
        "operand2": 0,
        "thenRoutine": [
          {
            "func": "SET",
            "property": "x",
            "value": 32
          },
          {
            "func": "SET",
            "property": "y",
            "value": 23
          }
        ],
        "elseRoutine": [
          {
            "func": "SET",
            "property": "x",
            "value": 8
          },
          {
            "func": "SET",
            "property": "y",
            "value": 17
          }
        ]
      }
    ],
    "discPosArray1": [
      [
        28,
        31
      ]
    ],
    "discPosArray2": [
      [
        22,
        41
      ],
      [
        28,
        31
      ]
    ],
    "discPosArray3": [
      [
        22,
        41
      ],
      [
        28,
        31
      ],
      [
        34,
        21
      ]
    ],
    "discPosArray4": [
      [
        16,
        51
      ],
      [
        22,
        41
      ],
      [
        28,
        31
      ],
      [
        34,
        21
      ]
    ],
    "discPosArray5": [
      [
        16,
        51
      ],
      [
        22,
        41
      ],
      [
        28,
        31
      ],
      [
        34,
        21
      ],
      [
        40,
        11
      ]
    ]
  },
  "pinHolder1": {
    "type": "holder",
    "id": "pinHolder1",
    "x": 1014,
    "y": 111,
    "width": 30,
    "height": 30,
    "z": 1,
    "dropOffsetX": -8,
    "dropOffsetY": -8,
    "dropTarget": {
      "id": "pin"
    },
    "classes": "transparent"
  },
  "pinHolder2": {
    "inheritFrom": {
      "pinHolder1": "*"
    },
    "type": "holder",
    "id": "pinHolder2",
    "x": 1014,
    "y": 282,
    "z": 1
  },
  "pinHolder3": {
    "inheritFrom": {
      "pinHolder1": "*"
    },
    "type": "holder",
    "id": "pinHolder3",
    "x": 1014,
    "y": 453,
    "z": 1
  },
  "pinHolder4": {
    "inheritFrom": {
      "pinHolder1": "*"
    },
    "type": "holder",
    "id": "pinHolder4",
    "x": 1014,
    "y": 624,
    "z": 1
  },
  "pinHolder5": {
    "inheritFrom": {
      "pinHolder1": "*"
    },
    "type": "holder",
    "id": "pinHolder5",
    "x": 1014,
    "y": 795,
    "z": 1
  },
  "question1": {
    "type": "button",
    "id": "question1",
    "x": 1229,
    "y": 73,
    "width": 40,
    "height": 40,
    "borderRadius": 5,
    "z": 1,
    "color": "white",
    "css": {
      "default": {
        "font-size": "30px",
        "--wcMain": "black",
        "--wcBorder": "white",
        "--wcMainOH": "grey",
        "--wcBorderOH": "black"
      },
      "::after": {
        "content": "\"Question Player\"",
        "display": "none",
        "position": "absolute",
        "margin-top": "71px",
        "color": "black",
        "font-size": "14px",
        "font-family": "Roboto"
      },
      ":hover::after": {
        "display": "block"
      }
    },
    "text": "?",
    "clickRoutine": [
      {
        "func": "SET",
        "collection": [
          "turn"
        ],
        "property": "lastTurn",
        "value": "${seatIndex}"
      },
      {
        "func": "SET",
        "collection": [
          "turn"
        ],
        "property": "mode",
        "value": "question"
      },
      {
        "func": "TURN",
        "turnCycle": "seat",
        "turn": "seat${PROPERTY pid}"
      },
      {
        "func": "SELECT",
        "property": "instructions",
        "value": true
      },
      {
        "func": "SET",
        "property": "text",
        "value": ""
      },
      {
        "func": "SELECT",
        "type": "seat",
        "property": "turn",
        "value": true
      },
      {
        "func": "GET",
        "property": "index"
      },
      {
        "func": "SET",
        "collection": [
          "instructions${index}"
        ],
        "property": "text",
        "value": "On the space with the pin, play a cube if the sasquatch cannot be in that location or a disc if it can."
      }
    ],
    "linkedToSeat": "seat1",
    "onlyVisibleForSeat": [
      "seat2",
      "seat3",
      "seat4",
      "seat5"
    ],
    "pid": 1
  },
  "search1": {
    "type": "button",
    "id": "search1",
    "x": 1229,
    "y": 73,
    "width": 40,
    "height": 40,
    "borderRadius": 5,
    "z": 1,
    "color": "white",
    "css": {
      "default": {
        "font-size": "30px",
        "--wcMain": "black",
        "--wcBorder": "white",
        "--wcMainOH": "grey",
        "background-size": "85%"
      },
      "::after": {
        "content": "\"Start Search\"",
        "display": "none",
        "position": "absolute",
        "margin-top": "71px",
        "color": "black",
        "font-size": "14px",
        "font-family": "Roboto"
      },
      ":hover::after": {
        "display": "block"
      }
    },
    "onlyVisibleForSeat": [
      "seat1"
    ],
    "clickRoutine": [
      {
        "func": "SET",
        "collection": [
          "turn"
        ],
        "property": "lastTurn",
        "value": "${seatIndex}"
      },
      {
        "func": "SET",
        "collection": [
          "turn"
        ],
        "property": "mode",
        "value": "search"
      },
      {
        "func": "SET",
        "collection": [
          "instructions${seatIndex}"
        ],
        "property": "text",
        "value": "Play a disc on the pin space. If you already have a disc there, play a disc anywhere else the sasquatch may be."
      }
    ],
    "image": "/i/game-icons.net/delapouite/binoculars.svg",
    "svgReplaces": {
      "#000": "color"
    }
  },
  "question2": {
    "inheritFrom": {
      "question1": "*"
    },
    "type": "button",
    "id": "question2",
    "x": 1229,
    "y": 243,
    "onlyVisibleForSeat": [
      "seat1",
      "seat3",
      "seat4",
      "seat5"
    ],
    "linkedToSeat": "seat2",
    "pid": 2,
    "z": 1
  },
  "question3": {
    "inheritFrom": {
      "question1": "*"
    },
    "type": "button",
    "id": "question3",
    "x": 1229,
    "y": 413,
    "onlyVisibleForSeat": [
      "seat1",
      "seat2",
      "seat4",
      "seat5"
    ],
    "linkedToSeat": "seat3",
    "pid": 3,
    "z": 1
  },
  "question4": {
    "inheritFrom": {
      "question1": "*"
    },
    "type": "button",
    "id": "question4",
    "x": 1229,
    "y": 583,
    "onlyVisibleForSeat": [
      "seat1",
      "seat2",
      "seat3",
      "seat5"
    ],
    "linkedToSeat": "seat4",
    "pid": 4,
    "z": 1
  },
  "question5": {
    "inheritFrom": {
      "question1": "*"
    },
    "type": "button",
    "id": "question5",
    "x": 1229,
    "y": 753,
    "onlyVisibleForSeat": [
      "seat1",
      "seat2",
      "seat3",
      "seat4"
    ],
    "linkedToSeat": "seat5",
    "pid": 5,
    "z": 1
  },
  "search2": {
    "inheritFrom": {
      "search1": "*"
    },
    "type": "button",
    "id": "search2",
    "y": 243,
    "onlyVisibleForSeat": [
      "seat2"
    ],
    "z": 1
  },
  "search3": {
    "inheritFrom": {
      "search1": "*"
    },
    "type": "button",
    "id": "search3",
    "y": 413,
    "onlyVisibleForSeat": [
      "seat3"
    ],
    "z": 1
  },
  "search4": {
    "inheritFrom": {
      "search1": "*"
    },
    "type": "button",
    "id": "search4",
    "y": 583,
    "onlyVisibleForSeat": [
      "seat4"
    ],
    "z": 1
  },
  "search5": {
    "inheritFrom": {
      "search1": "*"
    },
    "type": "button",
    "id": "search5",
    "y": 753,
    "onlyVisibleForSeat": [
      "seat5"
    ],
    "z": 1,
    "x": 1229
  },
  "playerCubeHolder1": {
    "type": "holder",
    "id": "playerCubeHolder1",
    "x": 959,
    "y": 65,
    "width": 50,
    "height": 50,
    "z": 1,
    "classes": "transparent",
    "dropTarget": {
      "drop": 1
    },
    "linkedToSeat": "seat1",
    "enterRoutine": [
      "// The enter and leave routines are taken from the VTT useful code snippets to make this holder have an infinite supply of markers.",
      {
        "func": "GET",
        "property": "id",
        "collection": "child"
      },
      {
        "func": "SELECT",
        "property": "parent",
        "value": "${thisID}"
      },
      {
        "func": "SELECT",
        "property": "id",
        "relation": "!=",
        "value": "${id}",
        "source": "DEFAULT"
      },
      {
        "func": "DELETE"
      }
    ],
    "leaveRoutine": [
      {
        "func": "SELECT",
        "property": "parent",
        "value": "${thisID}"
      },
      {
        "func": "COUNT"
      },
      {
        "func": "IF",
        "operand1": 0,
        "relation": "==",
        "operand2": "${COUNT}",
        "thenRoutine": [
          {
            "func": "CLONE",
            "source": "child"
          },
          {
            "func": "SET",
            "property": "parent",
            "value": "${thisID}"
          },
          {
            "func": "MOVE",
            "from": "${thisID}",
            "to": "${thisID}"
          }
        ]
      }
    ]
  },
  "playerCubeHolder2": {
    "type": "holder",
    "id": "playerCubeHolder2",
    "x": 959,
    "y": 235,
    "z": 1,
    "dropTarget": {
      "drop": 3
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat2"
  },
  "playerCubeHolder3": {
    "type": "holder",
    "id": "playerCubeHolder3",
    "x": 959,
    "y": 407,
    "z": 1,
    "dropTarget": {
      "drop": 5
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat3"
  },
  "playerCubeHolder4": {
    "type": "holder",
    "id": "playerCubeHolder4",
    "x": 959,
    "y": 579,
    "z": 1,
    "dropTarget": {
      "drop": 7
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat4"
  },
  "playerCubeHolder5": {
    "type": "holder",
    "id": "playerCubeHolder5",
    "x": 959,
    "y": 751,
    "z": 1,
    "dropTarget": {
      "drop": 9
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat5"
  },
  "playerDiscHolder1": {
    "type": "holder",
    "id": "playerDiscHolder1",
    "x": 959,
    "y": 135,
    "z": 1,
    "dropTarget": {
      "drop": 2
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat1"
  },
  "playerDiscHolder2": {
    "type": "holder",
    "id": "playerDiscHolder2",
    "x": 959,
    "y": 307,
    "z": 1,
    "dropTarget": {
      "drop": 4
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat2"
  },
  "playerDiscHolder3": {
    "type": "holder",
    "id": "playerDiscHolder3",
    "x": 959,
    "y": 478,
    "z": 1,
    "dropTarget": {
      "drop": 6
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat3"
  },
  "playerDiscHolder4": {
    "type": "holder",
    "id": "playerDiscHolder4",
    "x": 959,
    "y": 649,
    "z": 1,
    "dropTarget": {
      "drop": 8
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat4"
  },
  "playerDiscHolder5": {
    "type": "holder",
    "id": "playerDiscHolder5",
    "x": 959,
    "y": 821,
    "z": 1,
    "dropTarget": {
      "drop": 10
    },
    "inheritFrom": {
      "playerCubeHolder1": "*"
    },
    "linkedToSeat": "seat5"
  },
  "instructions1": {
    "id": "instructions1",
    "x": 1278,
    "y": 73,
    "movable": false,
    "css": {
      "background": "grey",
      "color": "white",
      "border": "2px dashed red",
      "text-align": "center",
      "display": "flex",
      "justify-content": "center",
      "align-items": "center"
    },
    "borderRadius": 8,
    "width": 300,
    "height": 60,
    "z": 1,
    "instructions": true,
    "textChangeRoutine": [
      {
        "func": "IF",
        "operand1": "${PROPERTY text}",
        "operand2": "",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "scale",
            "value": 0
          }
        ],
        "elseRoutine": [
          {
            "func": "IF",
            "operand1": "${PROPERTY mode OF turn}",
            "relation": "!=",
            "operand2": "setup",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "scale",
                "value": 1
              }
            ]
          }
        ]
      },
      {
        "func": "IF",
        "condition": "${PROPERTY hideInstructions OF reset}",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "scale",
            "value": 0
          }
        ]
      }
    ],
    "linkedToSeat": "seat1",
    "scale": 0
  },
  "instructions2": {
    "inheritFrom": {
      "instructions1": "*"
    },
    "id": "instructions2",
    "x": 1278,
    "y": 243,
    "z": 1,
    "text": "",
    "scale": 0,
    "linkedToSeat": "seat2"
  },
  "instructions3": {
    "inheritFrom": {
      "instructions1": "*"
    },
    "id": "instructions3",
    "x": 1278,
    "y": 413,
    "z": 1,
    "text": "",
    "scale": 0,
    "linkedToSeat": "seat3"
  },
  "instructions4": {
    "inheritFrom": {
      "instructions1": "*"
    },
    "id": "instructions4",
    "x": 1278,
    "y": 583,
    "z": 1,
    "text": "",
    "scale": 0,
    "linkedToSeat": "seat4"
  },
  "instructions5": {
    "inheritFrom": {
      "instructions1": "*"
    },
    "id": "instructions5",
    "x": 1278,
    "y": 753,
    "z": 1,
    "text": "",
    "scale": 0,
    "linkedToSeat": "seat5"
  },
  "gameIDLabel": {
    "id": "gameIDLabel",
    "x": 1444,
    "y": 24,
    "height": 20,
    "movable": false,
    "text": "Game ID: 18",
    "z": 1,
    "width": 90,
    "scale": 0
  },
  "invalidLabel": {
    "id": "invalidLabel",
    "x": 430,
    "y": 921,
    "width": 90,
    "height": 20,
    "z": 1,
    "movable": false,
    "text": "Invalid Piece"
  },
  "setUpLabel": {
    "id": "setUpLabel",
    "x": 93,
    "y": 889,
    "movable": false,
    "css": {
      "font-size": "21px",
      "background": "grey",
      "color": "white",
      "border": "2px dashed red",
      "text-align": "left",
      "display": "flex",
      "align-items": "center",
      "padding-left": "2px"
    },
    "borderRadius": 8,
    "width": 800,
    "layer": 2,
    "height": 107,
    "z": 1,
    "clickRoutine": [
      {
        "func": "SET",
        "collection": "thisButton",
        "property": "scale",
        "value": 0
      },
      {
        "func": "SET",
        "collection": [
          "turn"
        ],
        "property": "mode",
        "value": ""
      },
      {
        "func": "SELECT",
        "type": "seat",
        "property": "turn",
        "value": true
      },
      {
        "func": "GET",
        "property": "index"
      },
      {
        "func": "MOVE",
        "collection": [
          "pin"
        ],
        "to": "pinHolder${index}"
      },
      {
        "func": "SET",
        "collection": [
          "instructions${index}"
        ],
        "property": "text",
        "value": "Move the pin, then question a player or start a search."
      },
      {
        "func": "CLICK",
        "collection": [
          "lock"
        ]
      }
    ],
    "defined": "In turn, each player move a cube to a space where the sasquatch cannot be located based on that player's clue. Then go around again and add a second cube in another space. When initial setup is completed, click anywhere in this box to start the game.",
    "manual": "Set up the board by clicking numbers and dragging shapes above. Players type clues into their own labels. Then in turn, each player move a cube to a space where the sasquatch cannot be located. Go around again and add a second cube in another space. When initial setup is completed, click anywhere in this box to start the game.",
    "text": "Set up the board by clicking numbers and dragging shapes above. Players type clues into their own labels. Then in turn, each player move a cube to a space where the sasquatch cannot be located. Go around again and add a second cube in another space. When initial setup is completed, click anywhere in this box to start the game.",
    "scale": 0
  },
  "bear2": {
    "id": "bear2",
    "x": 0,
    "y": 0,
    "z": 1,
    "css": {
      "pointer-events": "none"
    },
    "inheritFrom": {
      "bear1": "*"
    },
    "parent": "hex17",
    "rotation": 0
  },
  "78zc": {
    "y": 4,
    "width": 41,
    "height": 45,
    "color": "#00ffee",
    "css": {
      "default": {
        "border-radius": "50%/35%"
      }
    },
    "image": "/i/game-pieces/3D/Cube-3D.svg",
    "svgReplaces": {
      "#primaryColor": "color",
      "#secondaryColor": "secondaryColor",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth"
    },
    "borderColor": "white",
    "borderWidth": 1,
    "secondaryColor": "black",
    "z": 3457,
    "cube": true,
    "layer": 5,
    "x": 4,
    "playerToken": true,
    "clonedFrom": "7b0k",
    "drop": 3,
    "pid": 2,
    "dragging": "Mike",
    "hoverParent": "playerCubeHolder2",
    "id": "78zc",
    "parent": "playerCubeHolder2"
  },
  "1cor": {
    "y": 4,
    "width": 41,
    "height": 45,
    "color": "#ffff00",
    "css": {
      "default": {
        "border-radius": "50%/35%"
      }
    },
    "image": "/i/game-pieces/3D/Cube-3D.svg",
    "svgReplaces": {
      "#primaryColor": "color",
      "#secondaryColor": "secondaryColor",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth"
    },
    "borderColor": "white",
    "borderWidth": 1,
    "secondaryColor": "black",
    "z": 3459,
    "cube": true,
    "layer": 5,
    "x": 4,
    "playerToken": true,
    "drop": 5,
    "clonedFrom": "mxhs",
    "pid": 3,
    "dragging": "Left",
    "hoverParent": "playerCubeHolder3",
    "id": "1cor",
    "parent": "playerCubeHolder3"
  },
  "13yh": {
    "y": 4,
    "width": 41,
    "height": 45,
    "color": "#ff9500",
    "css": {
      "default": {
        "border-radius": "50%/35%"
      }
    },
    "image": "/i/game-pieces/3D/Cube-3D.svg",
    "svgReplaces": {
      "#primaryColor": "color",
      "#secondaryColor": "secondaryColor",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth"
    },
    "borderColor": "white",
    "borderWidth": 1,
    "secondaryColor": "black",
    "z": 3461,
    "cube": true,
    "layer": 5,
    "x": 4,
    "playerToken": true,
    "drop": 7,
    "clonedFrom": "d7og",
    "pid": 4,
    "dragging": "Left2",
    "hoverParent": "playerCubeHolder4",
    "id": "13yh",
    "parent": "playerCubeHolder4"
  },
  "lrkd": {
    "y": 4,
    "width": 41,
    "height": 45,
    "color": "#ff0000",
    "css": {
      "default": {
        "border-radius": "50%/35%"
      }
    },
    "image": "/i/game-pieces/3D/Cube-3D.svg",
    "svgReplaces": {
      "#primaryColor": "color",
      "#secondaryColor": "secondaryColor",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth"
    },
    "borderColor": "white",
    "borderWidth": 1,
    "secondaryColor": "black",
    "z": 3463,
    "cube": true,
    "layer": 5,
    "x": 4,
    "playerToken": true,
    "drop": 1,
    "clonedFrom": "n567",
    "pid": 1,
    "dragging": "Mike",
    "hoverParent": "playerCubeHolder1",
    "id": "lrkd",
    "parent": "playerCubeHolder1"
  },
  "ig9f": {
    "y": 4,
    "width": 41,
    "height": 45,
    "color": "#a18a63",
    "css": {
      "default": {
        "border-radius": "50%/35%"
      }
    },
    "image": "/i/game-pieces/3D/Cube-3D.svg",
    "svgReplaces": {
      "#primaryColor": "color",
      "#secondaryColor": "secondaryColor",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth"
    },
    "borderColor": "white",
    "borderWidth": 1,
    "secondaryColor": "black",
    "z": 3465,
    "cube": true,
    "layer": 5,
    "x": 4,
    "playerToken": true,
    "drop": 9,
    "clonedFrom": "6640",
    "pid": 5,
    "hoverParent": "playerCubeHolder5",
    "dragging": "Right",
    "id": "ig9f",
    "parent": "playerCubeHolder5"
  },
  "w6qp": {
    "x": 4,
    "y": 4,
    "width": 45,
    "height": 41,
    "classes": "pokerChip3D",
    "color": "#00ffee",
    "css": {
      "default": {
        "color": "#ffffffcc",
        "font-size": "1.8rem"
      }
    },
    "image": "i/game-pieces/3D/Poker-3D.svg",
    "svgReplaces": {
      "#accentColor1": "color",
      "#accentColor2": "color",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth",
      "#labelColor": "labelColor",
      "#primaryColor": "color"
    },
    "borderColor": "#000000",
    "borderWidth": 2,
    "labelColor": "#00000022",
    "z": 3644,
    "disc": true,
    "layer": 4,
    "playerToken": true,
    "drop": 4,
    "clonedFrom": "owlc",
    "dragging": "Mike",
    "pid": 2,
    "hoverParent": "playerDiscHolder2",
    "id": "w6qp",
    "parent": "playerDiscHolder2"
  },
  "p8bx": {
    "x": 4,
    "y": 4,
    "width": 45,
    "height": 41,
    "classes": "pokerChip3D",
    "color": "#ffff00",
    "css": {
      "default": {
        "color": "#ffffffcc",
        "font-size": "1.8rem"
      }
    },
    "image": "i/game-pieces/3D/Poker-3D.svg",
    "svgReplaces": {
      "#accentColor1": "color",
      "#accentColor2": "color",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth",
      "#labelColor": "labelColor",
      "#primaryColor": "color"
    },
    "borderColor": "#000000",
    "borderWidth": 2,
    "labelColor": "#00000022",
    "z": 3646,
    "disc": true,
    "layer": 4,
    "playerToken": true,
    "drop": 6,
    "clonedFrom": "h0p7",
    "pid": 3,
    "dragging": "Mike",
    "hoverParent": "playerDiscHolder3",
    "id": "p8bx",
    "parent": "playerDiscHolder3"
  },
  "i5iu": {
    "x": 4,
    "y": 4,
    "width": 45,
    "height": 41,
    "classes": "pokerChip3D",
    "color": "#ff9500",
    "css": {
      "default": {
        "color": "#ffffffcc",
        "font-size": "1.8rem"
      }
    },
    "image": "i/game-pieces/3D/Poker-3D.svg",
    "svgReplaces": {
      "#accentColor1": "color",
      "#accentColor2": "color",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth",
      "#labelColor": "labelColor",
      "#primaryColor": "color"
    },
    "borderColor": "#000000",
    "borderWidth": 2,
    "labelColor": "#00000022",
    "z": 3648,
    "disc": true,
    "layer": 4,
    "playerToken": true,
    "drop": 8,
    "clonedFrom": "6chn",
    "pid": 4,
    "dragging": "Mike",
    "hoverParent": "playerDiscHolder4",
    "id": "i5iu",
    "parent": "playerDiscHolder4"
  },
  "rsas": {
    "x": 4,
    "y": 4,
    "width": 45,
    "height": 41,
    "classes": "pokerChip3D",
    "color": "#a18a63",
    "css": {
      "default": {
        "color": "#ffffffcc",
        "font-size": "1.8rem"
      }
    },
    "image": "i/game-pieces/3D/Poker-3D.svg",
    "svgReplaces": {
      "#accentColor1": "color",
      "#accentColor2": "color",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth",
      "#labelColor": "labelColor",
      "#primaryColor": "color"
    },
    "borderColor": "#000000",
    "borderWidth": 2,
    "labelColor": "#00000022",
    "z": 3650,
    "disc": true,
    "layer": 4,
    "playerToken": true,
    "drop": 10,
    "clonedFrom": "0024",
    "pid": 5,
    "dragging": "Mike",
    "hoverParent": "playerDiscHolder5",
    "id": "rsas",
    "parent": "playerDiscHolder5"
  },
  "hb6v": {
    "x": 4,
    "y": 4,
    "width": 45,
    "height": 41,
    "classes": "pokerChip3D",
    "color": "#ff0000",
    "css": {
      "default": {
        "color": "#ffffffcc",
        "font-size": "1.8rem"
      }
    },
    "image": "i/game-pieces/3D/Poker-3D.svg",
    "svgReplaces": {
      "#accentColor1": "color",
      "#accentColor2": "color",
      "#borderColor": "borderColor",
      "#borderWidth": "borderWidth",
      "#labelColor": "labelColor",
      "#primaryColor": "color"
    },
    "borderColor": "#000000",
    "borderWidth": 2,
    "labelColor": "#00000022",
    "z": 3652,
    "disc": true,
    "layer": 4,
    "playerToken": true,
    "drop": 2,
    "clonedFrom": "7vue",
    "pid": 1,
    "dragging": "Left2",
    "hoverParent": "playerDiscHolder1",
    "id": "hb6v",
    "parent": "playerDiscHolder1"
  },
  "bear8": {
    "inheritFrom": {
      "bear1": "*"
    },
    "id": "bear8",
    "x": 0,
    "y": 0,
    "parent": "hex18"
  },
  "bear9": {
    "inheritFrom": {
      "bear8": "*"
    },
    "id": "bear9",
    "x": 0,
    "y": 0
  }
}