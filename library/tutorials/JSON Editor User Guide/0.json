{
  "lblPage": {
    "id": "lblPage",
    "y": 950,
    "width": 75,
    "height": 40,
    "z": 6,
    "movableInEdit": false,
    "css": "font-size:30px",
    "text": "Page",
    "layer": 5,
    "x": 750
  },
  "btnBack": {
    "type": "button",
    "id": "btnBack",
    "y": 1500,
    "width": 150,
    "height": 150,
    "z": 580,
    "movableInEdit": false,
    "color": "orange",
    "css": "border-color:transparent;background-color:transparent;border-radius:0",
    "image": "/assets/1502865726_277",
    "svgReplaces": {
      "currentColor": "color"
    },
    "layer": 5,
    "clickRoutine": [
      {
        "func": "SELECT",
        "property": "parent",
        "value": "hldOn"
      },
      {
        "func": "GET",
        "property": "hldPage",
        "variable": "oldPage"
      },
      {
        "func": "IF",
        "operand2": 1,
        "relation": ">",
        "thenRoutine": [
          "var newPage = ${oldPage} - 1",
          {
            "func": "SET",
            "property": "parent",
            "value": "hldOff"
          },
          {
            "func": "SELECT",
            "property": "hldPage",
            "value": "${newPage}"
          },
          {
            "func": "SET",
            "property": "parent",
            "value": "hldOn"
          },
          {
            "func": "LABEL",
            "label": "lblPageNum",
            "mode": "dec",
            "value": 1
          },
          {
            "func": "GET",
            "property": "hldPageTopic",
            "variable": "topic"
          },
          {
            "func": "LABEL",
            "label": "lblTopic",
            "value": "${topic}"
          },
          {
            "func": "SELECT",
            "property": "id",
            "value": "btnForward"
          },
          {
            "func": "SET",
            "property": "y",
            "value": 890
          }
        ],
        "elseRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "y",
            "value": 1500
          }
        ],
        "operand1": "${oldPage}"
      }
    ]
  },
  "btnForward": {
    "type": "button",
    "id": "btnForward",
    "x": 1450,
    "y": 890,
    "width": 150,
    "height": 150,
    "z": 579,
    "movableInEdit": false,
    "color": "green",
    "css": "border-color:transparent;background-color:transparent;border-radius:0",
    "svgReplaces": {
      "currentColor": "color"
    },
    "layer": 5,
    "clickRoutine": [
      {
        "func": "SELECT",
        "property": "hldPage",
        "relation": "!=",
        "value": null
      },
      {
        "func": "GET",
        "property": "hldPage",
        "aggregation": "array",
        "variable": "hldArray"
      },
      "var lastPage = ${hldArray} length",
      {
        "func": "SELECT",
        "property": "parent",
        "value": "hldOn"
      },
      {
        "func": "GET",
        "property": "hldPage",
        "variable": "oldPage"
      },
      {
        "func": "IF",
        "relation": "==",
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "y",
            "value": 1500
          }
        ],
        "elseRoutine": [
          "var newPage = ${oldPage} + 1",
          {
            "func": "SET",
            "property": "parent",
            "value": "hldOff"
          },
          {
            "func": "SELECT",
            "property": "hldPage",
            "value": "${newPage}"
          },
          {
            "func": "SET",
            "property": "parent",
            "value": "hldOn"
          },
          {
            "func": "LABEL",
            "label": "lblPageNum",
            "mode": "inc",
            "value": 1
          },
          {
            "func": "GET",
            "property": "hldPageTopic",
            "variable": "topic"
          },
          {
            "func": "LABEL",
            "label": "lblTopic",
            "value": "${topic}"
          },
          {
            "func": "SELECT",
            "property": "id",
            "value": "btnBack"
          },
          {
            "func": "SET",
            "property": "y",
            "value": 890
          }
        ],
        "operand1": "${oldPage}",
        "operand2": "${lastPage}"
      }
    ],
    "image": "/assets/822277903_277"
  },
  "lblPageNum": {
    "id": "lblPageNum",
    "y": 950,
    "height": 40,
    "z": 6,
    "movableInEdit": false,
    "css": "font-size:30px",
    "text": 1,
    "layer": 5,
    "width": 25,
    "x": 830
  },
  "hldPage1": {
    "type": "holder",
    "id": "hldPage1",
    "z": 1,
    "hldPage": 1,
    "dropTarget": {},
    "alignChildren": false,
    "parent": "hldOn",
    "width": 1600,
    "height": 1000,
    "css": "background:transparent;border:none",
    "x": 4,
    "y": 4,
    "hldPageTopic": "JSON Overview"
  },
  "hldPage2": {
    "type": "holder",
    "id": "hldPage2",
    "z": 1,
    "hldPage": 2,
    "dropTarget": {},
    "alignChildren": false,
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "css": "background:transparent;border:none",
    "x": 4,
    "y": 4,
    "hldPageTopic": "JSON Overview, cont."
  },
  "hldPage3": {
    "type": "holder",
    "id": "hldPage3",
    "z": 1,
    "hldPage": 3,
    "alignChildren": false,
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "css": "background:transparent;border:none",
    "x": 4,
    "y": 4,
    "dropTarget": {},
    "hldPageTopic": "Edit Mode"
  },
  "hldOff": {
    "type": "holder",
    "id": "hldOff",
    "y": 1100,
    "width": 25,
    "height": 25,
    "z": 14,
    "css": "background:transparent;border:none"
  },
  "hldOn": {
    "type": "holder",
    "id": "hldOn",
    "width": 25,
    "height": 25,
    "z": 14,
    "css": "background:transparent;border:none",
    "dropTarget": {
      "no": "no"
    },
    "alignChildren": false
  },
  "page2Text2": {
    "id": "page2Text2",
    "parent": "hldPage2",
    "x": 500,
    "y": 100,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "\n\nOpening bracket required for all JSON elements\nThe widget id must be unique; the system will assign a default 4-character id, but you may change it\nThere are parent and children widgets which are connected\nThe horizontal x coordinate in pixels (visible screen size is always 1600 x 1000)\nThe vertical y coordinate\nWidth of the widget in pixels\nHeight of the widget in pixels\nZ is a complicated item relating to which widgets are on top of other widgets\nThis property means the widget cannot be moved\nSets the font size\nContains the text displayed on the widget\nThe closing curly bracket",
    "width": 1000
  },
  "page2Text1": {
    "id": "page2Text1",
    "parent": "hldPage2",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "Now let's take a look at what the various things in this simple JSON element mean: \n\n{\n\"id\": \"page1Text\",\n\"parent\": \"hldPage1\",\n\"x\": 100,\n\"y\": 100,\n\"width\": 1400,\n\"height\": 800,\n\"z\": 2,\n\"movable\": false,\n\"css\": \"font-size:22px\",\n\"text\": \"This VirtualTableop.io page .....\"\n}\n\n\nDetailed descriptions of the properties can be found in the wiki."
  },
  "hldPage4": {
    "type": "holder",
    "id": "hldPage4",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 4,
    "x": 4,
    "y": 4,
    "hldPageTopic": "Edit Mode, cont."
  },
  "hldPage5": {
    "type": "holder",
    "id": "hldPage5",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 5,
    "x": 4,
    "y": 4,
    "hldPageTopic": "JSON Editor Overview"
  },
  "hldPage6": {
    "type": "holder",
    "id": "hldPage6",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 6,
    "x": 4,
    "y": 4,
    "hldPageTopic": "JSON Colors"
  },
  "hldPage7": {
    "type": "holder",
    "id": "hldPage7",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 7,
    "x": 4,
    "y": 4,
    "hldPageTopic": "Viewing JSON"
  },
  "hldPage8": {
    "type": "holder",
    "id": "hldPage8",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 8,
    "x": 4,
    "y": 4,
    "hldPageTopic": "JSON Editor Menu"
  },
  "hldPage9": {
    "type": "holder",
    "id": "hldPage9",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 9,
    "x": 4,
    "y": 4,
    "hldPageTopic": "Duplicate Widget"
  },
  "hldPage10": {
    "type": "holder",
    "id": "hldPage10",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 10,
    "x": 4,
    "y": 4,
    "hldPageTopic": "JSON Button Properties"
  },
  "page3Text1": {
    "id": "page3Text1",
    "parent": "hldPage3",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "There are two ways to edit JSON directly in the room.  The first is activated by pressing the blue and white Edit mode icon.\n\nDoing so will bring up an altered view of the room that looks like the image to the right."
  },
  "page1Text1": {
    "id": "page1Text1",
    "parent": "hldPage1",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "This VirtulTableop.io room is intended to introduce you to JSON and the JSON editor.\n\nUse the arrow keys to navigate forwards and backwards through the pages of this user guide.\n\nFirst, a few basics about JSON. Almost everything that a game room designer can control about what the players see is done through JSON.  The JSON contains the properties of all the widgets (the collective name for anything appearing in a VirtualTabletop room).  The JSON also contains the functions that control automation and changes to widget properties through various 'Routines.'\n\nEvery widget is its own JSON element that must begin and end with curly brackets like this { }. Between the curly brackets will be various properties such as \"id,\" \"x,\" \"y,\" \"width,\" and \"height.\"  Many more properties are possible. Most widgets will contain size and position, but the only mandatory property is an \"id.\" Each property must be followed by a comma, except for the last one which must not have a comma.\n\nAs an example of what JSON looks like, the JSON for the widget that contains this text is: \n\n{\n\"id\": \"page1Text1\",\n\"parent\": \"hldPage1\",\n\"x\": 100,\n\"y\": 100,\n\"width\": 1400,\n\"height\": 800,\n\"z\": 2,\n\"movable\": false,\n\"css\": \"font-size:22px\",\n\"text\": \"This VirtualTableop.io room .....\"\n}"
  },
  "page3Image1": {
    "id": "page3Image1",
    "x": 1292,
    "y": 87,
    "width": 50,
    "height": 50,
    "z": 7,
    "movable": false,
    "image": "/assets/-311274453_876",
    "parent": "hldPage3"
  },
  "page3Text2": {
    "id": "page3Text2",
    "parent": "hldPage3",
    "x": 100,
    "y": 200,
    "width": 600,
    "height": 800,
    "z": 3,
    "movable": false,
    "css": "font-size:22px",
    "text": "This views shows the outline of visible widgets. This view can get messy if multiple widgets overlap. Images, like the arrows, display their shape, but not always the correct colors.\n\nIn this view, you can click and drag to move objects, so long as the \"movableInEdit\" property is true. Clicking on a widget in this view will not activiate its routine, but will instead bring up the first JSON editing method.\n\nThe JSON editor available through this method looks like the image below. "
  },
  "page4Text1": {
    "id": "page4Text1",
    "parent": "hldPage4",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "The Edit widget JSON mode allows only the most basic of text editing.  You can cut and paste and you can type.  If you use this method, you are on your own to get the commas and brackets correct.  It has very rudimentary error notification and will not allow you to save/update the widget if there are errors.\n\nFrom this mode:\n\n  - You have a link directly to the wiki\n\n  - You can click on the link to an \"the legacy editor\" which is informally known as the Legacy Editor. It still has its uses for widget manpiulation and macros, but the Legacy Editor is not being kept updated and current with all the changes in VirtualTabletop. Most Legacy Editor capabilities are now available in the JSON Editor.\n\n  - You can type directly into the text editor to change the JSON. When finished, click \"Update widget\" to save your changes. If you want to leave the edit mode without saving changes, press the Escape key.\n\n  - You can duplicate the widget or you can delete it by pressing the appropriate keys below the text editor window.\n\n  - This edit mode also has simple click-to-change capability allowing basic editing of game pieces, holders, buttons, timers, etc. that do not require interaction with the JSON code.\n\nThis editor is mainly useful for making very quick and easy edits. For example, if you just wanted to change the text in this text box, you could use this editor.\n\nPRACTICE: Right now go ahead and click on the edit mode icon.  Then click in the outlined area in the main part of the screen and it should bring up the edit menu you saw on the previous screen.  Practice making minor changes to the text, to the x,y coordinates, and the width and height. It's okay to save the changes so you can see them by pressing \"Update widget\" because you are just in the practice room. However, if you are in a room you actually are working on, be careful about making and saving changes. Be sure to read the FAQ to make sure you understand how the room is saved.  Simply making a change to the JSON will not save the current room state; that is a different process."
  },
  "page5Text1": {
    "id": "page5Text1",
    "parent": "hldPage5",
    "x": 100,
    "y": 100,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "The other, and recommended, method for editing JSON is just known as the JSON editor.  You activate it by pressing CTRL-J. The editor will bring up something similar to what you see in the image to the right (although the room will have changed since that screenshot was taken).\n\nAdvantages of this editor over the other one include:\n\n  - Context sensitive options that update depending on the type of widget and what line you are on in the JSON\n\n  - When properties or functions are added or changed in the base code, the JSON editor reflects those changes\n\n  - Properties can be easily added or sometimes changed by clicking on the blue and white button with the name of the property\n\n  - Color coding to help distinguish different parts of the JSON\n\n  - Better error checking and notification, although this is still very rudimentary\n\n  - Instant visual feedback when changes are made ",
    "width": 900
  },
  "page6Text1": {
    "id": "page6Text1",
    "parent": "hldPage6",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:21px",
    "text": "The JSON editor is divided into two vertical parts.  The left vertical column contains the JSON code is colored text.  The right vertical column contains a graphical menu at the top and a list of properties below. When long enough, each column will add a vertical scroll bar.\n\nIt is also divided into three horizontal parts.  At the top is a list of all the widgets directly under the curson. Press the corresponding function key to select that widget for editing.  In the middle is a live display of the room.  At the bottom, there is a text box stating 'Show Routine Debug Output.' If you mouse over that area, it will show the results of routines, including computations, functions, expressions, and similar operations.\n\nLet's begin by describing the JSON color codes:\n\n  - Yellow: used for properties and other 'keys'\n\n  - Orange: used for custom properties or keys added by the game room designer and unique to certain widget(s) in that room\n\n  - Red: used to indicate an error in the right vertical column or cardTypes and cardDefaults in the left vertical column\n\n  - Green: used for strings contained within quotation marks\n\n  - Purple: used for numbers (treated as numbers, rather than strings)\n\n  - Blue: used to indicate 'null'\n\n  - Gray: used to indicate a default property and value\n\n  - White: white text is only used if the JSON editor has not processed the text yet (for example, if you cut and paste something, it will initially appear as white\n\n\nPRACTICE: Go ahead now and press CTRL-J to open up the JSON editor.  You should leave it open for the rest of this user guide, although you can close it at any time by again pressing CTRL-J. The room that you can interact with will be slightly smaller and shifted left on the screen to make room for the editor. Move the cursor towards the middle of the screen.  In the upper right side of the left column, the changing numbers show the x,y coordinates of the cursor position in the room.  As you get near the middle, hold down CTRL while left-clicking on your mouse.  That will select this text widget for display in the editor. When you press the green arrow to change to the next page, the JSON editor will still display this item (the last one that you selected for display).",
    "abc123": "I made this up for the demo"
  },
  "page7Text1": {
    "id": "page7Text1",
    "parent": "hldPage7",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "The order of the JSON in the editor is consistent (unlike the basic editor mode, which usually lists the JSON properties/keys in the order added to the JSON). In the JSON editor, the first few items will be important and frequently used properties in the following order:\n\n        Type, id, parent, deck, cardType, owner, x, y, width, height, scale, rotation, layer, z, inheritChildZ, movable, and movableInEdit\n\nSome of those will always be displayed, using grey text to show the default values. Others will only be displayed if they are not null.\n\nYou can edit the JSON by typing directly into the property or value.\n\nPRACTICE.  Go ahead right now and try typing some additional text into the large green block of text that makes up this widget.  Remember, to select this widget (you are probably still on the one from the previous page), put the mouse somewhere near the middle of the screen and CTRL-click.  You can also change the x and y values for the position of this block of text and see instantly how it changes.  Change the width value from 1400 to 400 and back to see the effect of that change.\n\nBe careful making changes, however.  Changes take effect immediately and there is a very, very limited undo capability.\n\nUsing CTRL-click to select a widget is one way to display the JSON of a widget.  Another way, and one that is required if widgets overlap, is to use the function keys. As you move the cursor around the screen, look towards the top of the screen for the white text on a black background. When the cursor is over an area with a widget, this area of the screen will show its id, its type and the function key you use to access it.  For example, if you move the mouse over the orange back button, you will something that looks like the picture below.\n\nPRACTICE.  Move the cursor around the screen over the various areas with text or images.  Press the corresponding function key to see the JSON for that widget."
  },
  "page7Image1": {
    "id": "page7Image1",
    "x": 475,
    "y": 699,
    "width": 600,
    "height": 200,
    "z": 48,
    "movable": null,
    "movableInEdit": null,
    "image": "/assets/485133131_68080",
    "parent": "hldPage7"
  },
  "page3Image2": {
    "id": "page3Image2",
    "parent": "hldPage3",
    "x": 700,
    "y": 25,
    "width": 900,
    "height": 900,
    "z": 20,
    "movable": false,
    "image": "/assets/1908364078_358544"
  },
  "page3Image3": {
    "id": "page3Image3",
    "parent": "hldPage3",
    "x": 97,
    "y": 415,
    "width": 600,
    "height": 600,
    "z": 26,
    "movable": null,
    "movableInEdit": null,
    "image": "/assets/1481013228_182992"
  },
  "lblTitle": {
    "id": "lblTitle",
    "y": 6,
    "width": 800,
    "height": 40,
    "layer": 5,
    "z": 6,
    "movableInEdit": false,
    "css": "font-size:30px; text-align:center",
    "text": "JSON Editor User Guide",
    "x": 400
  },
  "lblTopic": {
    "id": "lblTopic",
    "x": 400,
    "y": 56,
    "width": 800,
    "height": 40,
    "layer": 5,
    "z": 6,
    "movableInEdit": false,
    "css": "font-size:25px; text-align:center",
    "text": "JSON Overview"
  },
  "page8Text1": {
    "id": "page8Text1",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 78,
    "movable": false,
    "css": "font-size:18px",
    "text": "Across the top of the right column in the editor are are variety of clickable icons. Let's review the function of those.\n\n🔍 toggle zoom out\n          Zooms out and in so you can see widgets located outside the main screen. For example, in this room, pages are stored below the screen.\n\n📋 copy state from another room/server\n          Copies all the widgets from another room and erases everything in the current room.  URL can just be the part that comes after 'virtualtabletop.io/'.  Entering the URL of a known empty or non-existant room is a quick way to clear out all the JSON in the current room.\n\n🎬 macro\n          Powerful and dangerous tool for creating macros. Requires some knowledge of JavaScript.  Beyond the scope of this guide.\n\n👁 show this wdiget below\n          Displays the JSON for the currently selected widget in the right vertical column below the blue buttons.\n\n🔝 tree\n          Displays the hierarchy of widgets in the room.  Child widgets will display under their parents.  No particular order to widgets, however.\n\n➕ add new widget.\n          Creates a new, blank widget\n\n✨ duplicate widget\n          Copies everything about the current widget.  More detail about thow this works on the next page.\n\n❌ remove widget\n          Deletes the current widget and all of its child widgets.  Use caution, because this is instant, with no prompt, and cannot be undone.\n\n📝 edit mode\n          Switches the view to the edit mode view (same as if you pressed the blue and white edit mode icon).\n\n🔼 open parent\n          Opens the JSON for the parent of the currently selected widget. \n\n↔️ toggle wide\n          Toggles the sidebars between wide and narrow mode. Defaults to open in narrow which displays a larger playing area and a smaller JSON edit area.",
    "parent": "hldPage8"
  },
  "jisy": {
    "type": "button",
    "clickRoutine": [
      {
        "func": "SELECT",
        "property": "hldPage",
        "relation": "!=",
        "value": null
      },
      {
        "func": "GET",
        "property": "hldPage",
        "aggregation": "array",
        "variable": "hldArray"
      },
      "var lastPage = ${hldArray} length",
      {
        "func": "SELECT",
        "property": "parent",
        "value": "hldOn"
      },
      {
        "func": "GET",
        "property": "hldPage",
        "variable": "oldPage"
      },
      {
        "func": "IF",
        "relation": "==",
        "elseRoutine": [
          "var newPage = ${oldPage} + 1",
          {
            "func": "SET",
            "property": "parent",
            "value": "hldOff"
          },
          {
            "func": "SELECT",
            "property": "hldPage",
            "value": "${newPage}"
          },
          {
            "func": "SET",
            "property": "parent",
            "value": "hldOn"
          },
          {
            "func": "LABEL",
            "label": "lblPageNum",
            "mode": "inc",
            "value": 1
          },
          {
            "func": "GET",
            "property": "hldPageTopic",
            "variable": "topic"
          },
          {
            "func": "LABEL",
            "label": "lblTopic",
            "value": "${topic}"
          }
        ],
        "thenRoutine": [],
        "operand1": "${oldPage}",
        "operand2": "${lastPage}"
      }
    ],
    "x": 461,
    "y": 891,
    "z": 579,
    "id": "jisy",
    "parent": "hldPage10",
    "layer": 5,
    "movableInEdit": false,
    "text": "Practice on Me"
  },
  "page10Text1": {
    "id": "page10Text1",
    "x": 100,
    "y": 100,
    "width": 900,
    "height": 800,
    "z": 1833,
    "movable": false,
    "css": "font-size:22px",
    "text": "The image to the right is the JSON editor for a portion of the right vertical column for the green advance page button at the bottom of the screen.  This part of the JSON editor is context sensitive, meaning that you will get a different display based on where your cursor is placed in the JSON. For this image, the cursor was placed on the first \"LABEL\" function inside of the \"clickRoutine.\"\n\nGenerally, the menu will display the most specific to the most general.  You can get an idea of where you are in the hierarchy of the JSON by looking at the small white text with arrows.  For example, at the very top, you see button ↦ clickRoutine ↦ 5 ↦ (IF) ↦ elseRoutine ↦ 4 ↦ (LABEL) ↦ mode.  This means the cursor is located in a button type of widget, inside of a clickRoutine, at the 6th function inside the routine (counting starts at 0) which is an IF function. It is further located within an elseRoutine, at the 5th function which is a LABEL and at this point you can change the mode property by clicking on one of the blue buttons.\n\nAlthough you can press any of the buttons that are available to you, the location that the property or function is inserted will depend on where the cursor is and what level in the hierarchy the property applies to.  For example, if you were to press the \"color\" button, it would not be inserted into the code at the point of the cursor, but at the appropriate place for that property.\n\nAt the bottom of the options will be a button to remove the current function, property, etc.. While you can use the keyboard to add or remove items, using these buttons helps put the right commas, brackets, and other items where they belong.\n\nNote: context sensitive buttons may also be displayed.  For example, if you highlight a widget id name, a button will appear that will take you directly to that widget's JSON.\n\nPRACTICE. Use the JSON editor to select the button below. It contains the same clickRoutine as the green arrow, so if you click it, you will advance to the next page. Practice adding and removing items into the code using the editor.",
    "parent": "hldPage10"
  },
  "48e2": {
    "image": "/assets/-338142491_207316",
    "id": "48e2",
    "z": 76,
    "x": 989,
    "y": -12,
    "width": 600,
    "parent": "hldPage5",
    "height": 800
  },
  "page1Text2": {
    "id": "page1Text2",
    "x": 750,
    "y": 680,
    "width": 800,
    "height": 40,
    "layer": 5,
    "z": 582,
    "movableInEdit": false,
    "css": "font-size:25px",
    "text": "Note: There are several places in this tutorial where you are prompted to actually change the JSON to practice.  Please do not do that if you are in the Tutorials room at https://virtualtabletop.io/Tutorials. However, if you have loaded the tutorial into your own room, feel free to practice making changes. If you have come to the Tutorials room to view this, you should reload the room from its saved state, just to make sure you are viewing an unmodified version.",
    "parent": "hldPage1"
  },
  "hldPage11": {
    "type": "holder",
    "id": "hldPage11",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 11,
    "x": 4,
    "y": 4,
    "hldPageTopic": "Manipulating Widgets"
  },
  "page11Text1": {
    "id": "page11Text1",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 1831,
    "movable": false,
    "css": "font-size:22px",
    "text": "When in the JSON Editor, you can interact with the room just as you normally would.  There is, however, a widget property that has special uses in the editor.\n\nWhen the property 'movable' is set to false, you cannot drag a widget by just left-clicking and moving the mouse.  Try that with the green circle below.  However, while inthe JSON Editor, if you hold down the Ctrl key while you click and drag, that will temporarily override the 'movable':'false' condition.  Try Ctrl-left click-drag with the mouse on the green circle.\n\nWhen clicking and dragging a child widget, the child will lose its parent as soon as you click it.  You can change that behavior by adding the property 'fixedParent' and setting it to true. When that property is true, dragging a child widget will not cause it to lose its parent. This behavior is the same whether using the JSON Editor or not.\n\nFinally, when in the JSON Editor, you can easily swap out one image for another.  For example, in the green circle below, click anywhere on the line that reads 'image: /assets/2017378147_382'.  Then in the upper portion of the far right panel you will see a button that says 'upload different asset.'  Click that button to open the select file dialog box for your operating system. Choose a new image file to upload to replace the green circle.",
    "parent": "hldPage11"
  },
  "hldPage12": {
    "type": "holder",
    "id": "hldPage12",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 12,
    "x": 4,
    "y": 4,
    "hldPageTopic": "Errors"
  },
  "page12Text1": {
    "id": "page12Text1",
    "parent": "hldPage12",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "Every change you make in the JSON using the JSON editor reflects instantly in the room.  However, if something you do causes an error, the editor no longer sends those updates to the room.  You can continue to edit the JSON, but the changes are not reflected in the room, and the JSON is not saved, until the error condition is cleared.  If you leave the JSON editor while there is an error condition, the widget will be in its last state before the error.\n\nErrors are indicated in the right vertical column by red text and the absence of clickable properties buttons.\n\nIn many instances, pressing CTRL-space will move the cursor close to the place of the error.\n\nOne of the most common errors is a syntax error, which is caused by an extra or missing comma, an extra\nor missing bracket, extra or missing quotation marks, etc. Using the CTRL-space shortcut can be very\nhelpful in getting to the source of the problem.\n\nFor example, if a section of your JSON ends in a series of closing brackets like in the image to the bottom\nright (this particular code segment does not come from this room), you can imagine it would be difficult\nto troubleshoot which bracket or comma is causing the problem.\n\nThese syntax errors commonly arise when cutting and pasting code from another widget.\n\nOther errors you might see include:\n\n    No ID given; ID is already in use; Parent does not exist; Deck does not exist; Given widget is not a deck\n    or doesn't define cardTypes, Card type does not exist in deck\n\nPRACTICE. Go ahead now and create an error in the JSON. Move the cursor away and use CTRL-space to \nsee if you can find the error."
  },
  "page12Image1": {
    "id": "page12Image1",
    "parent": "hldPage12",
    "x": 1169,
    "y": 159,
    "width": 400,
    "height": 400,
    "z": 60,
    "movable": false,
    "image": "/assets/-1727868967_16762"
  },
  "page12Image2": {
    "id": "page12Image2",
    "parent": "hldPage12",
    "x": 1160,
    "y": 527,
    "width": 400,
    "height": 400,
    "z": 66,
    "movable": false,
    "image": "/assets/-108283418_41033"
  },
  "page9Text1": {
    "id": "page9Text1",
    "parent": "hldPage9",
    "x": 100,
    "y": 100,
    "width": 900,
    "height": 800,
    "z": 2,
    "movable": false,
    "css": "font-size:22px",
    "text": "When you click on the duplicate widget menu button at the top of the right vertical column, you get a sub-menu that looks like the image to the right.  Click the Go button to immediately make a copy using the default options, or the Cancel button to close out of the sub-menu without making a copy\n\nIf the Recursive option remains checked, all child widgets of the widget being copied will also be copied.\n\nIf the Increment IDs option remains checked, then all IDs that have a number at the end will be increased by one (or whatever the corresponding number of copies is).  IDs that do not end in a number will have a number added.\n\nIf you check the Use inheritFrom box, an 'inheritFrom' property will be added to each widget with a value of the id of the widget being copied.  See the inheritFrom tutorial for more information about how that property works.\n\nThe X offset option is used to offset each copy of the widget by X pixels.  X can be positive to shift to the right or negative to shift to the left.  Similarly, the Y offset option is used to shift the copies up (negative) or down (positive).\n\nThe # Copies X value is used to determine how many copies will be made.  It defaults to 1.  If using the X offset option to shift, then the copies will each be shifted the appropriate value.  For example, let's assume your widget is 50 pixels wide, and currently located at x coordinate 100, you want 5 copies, and you wanted them shifted 10 pixels apart.  After clicking the Go button, you will have the original widget at X 100, copy 1 at X coord 60 (50 plus 10), copy 2 at X coord 120, etc.\n\nThe # Copies Y acts the same as X except it controls how many copies will be shifted in the Y direction."
  },
  "page9Image1": {
    "id": "page9Image1",
    "parent": "hldPage9",
    "x": 1050,
    "y": 23,
    "width": 500,
    "height": 500,
    "z": 86,
    "image": "/assets/-710166205_29366"
  },
  "page10Image1": {
    "id": "page10Image1",
    "parent": "hldPage10",
    "x": 900,
    "y": -5,
    "width": 600,
    "height": 980,
    "z": 56,
    "image": "/assets/1310557521_72042"
  },
  "hldPage13": {
    "type": "holder",
    "id": "hldPage13",
    "width": 1600,
    "height": 1000,
    "z": 40,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 13,
    "hldPageTopic": "Debugging",
    "y": 4,
    "parent": "hldOff",
    "x": 4
  },
  "page13Text1": {
    "id": "page13Text1",
    "y": 112,
    "width": 900,
    "height": 800,
    "z": 102,
    "movable": false,
    "css": "font-size:22px",
    "text": "The JSON Debugger shows you all the code of the last called routine and all called subroutines. This can give you an insight into what is actually happening in the code.    \n\nThis \"DEAL\" button should deal three cards from the deck to the card display, but it's not working. When there are errors in the code, the debugger can help you to diagnose what is wrong.     \n\nYou can access the debugger from the JSON editor (Ctrl-J) by hovering your mouse cursor over the bottom left of the screen, where it says \"Show Routine Debug Output\". When you first go into the JSON editor hovering over this will say \"No debug information yet\".     \n\nPRACTICE:  Click on the \"DEAL\" button while in the JSON editor, then hover over \"Show Routine Debug Output\" again. This time it will show you all the comands given by the routine and their output. You can click on the little triangle (or any text in that row) to expand each section and see more about each operation.     \n\nWhen there are errors in a command that cause it not to run, these will appear in red and clicking on the little arrow (or text) next to them will show you another arrow with \"Problems\", clicking on that will show you what the problem is.       \n\nCtrl-click on the button to go into the code section describing it and have a go at fixing the error.",
    "x": 72,
    "parent": "hldPage13"
  },
  "pawnDisplay": {
    "type": "holder",
    "id": "pawnDisplay",
    "x": 1097,
    "y": 212,
    "width": 400,
    "height": 110,
    "z": 60,
    "dropTarget": {
      "classes": "classicPiece"
    },
    "stackOffsetX": 105,
    "parent": "hldPage14"
  },
  "cdo6": {
    "type": "button",
    "id": "cdo6",
    "x": 989,
    "y": 225,
    "z": 15164,
    "clickRoutine": [
      {
        "func": "ROTATE",
        "holder": "pawnDisplay",
        "angle": 180
      }
    ],
    "text": "ROTATE",
    "parent": "hldPage14"
  },
  "cardDisplay": {
    "type": "holder",
    "id": "cardDisplay",
    "x": 1100,
    "y": 497,
    "width": 312,
    "z": 52,
    "dropTarget": {
      "type": "card"
    },
    "stackOffsetX": 105,
    "parent": "hldPage13"
  },
  "nht2": {
    "type": "button",
    "id": "nht2",
    "x": 998,
    "y": 536,
    "z": 15154,
    "clickRoutine": [
      {
        "func": "MOVE",
        "from": "deckHolder",
        "to": "cardDispla",
        "face": 1,
        "count": 3
      }
    ],
    "text": "DEAL",
    "parent": "hldPage13"
  },
  "naicB": {
    "id": "naicB",
    "fixedParent": true,
    "y": 171.36,
    "width": 111,
    "height": 40,
    "type": "button",
    "text": "Recall & Shuffle",
    "movableInEdit": false,
    "clickRoutine": [
      {
        "func": "RECALL",
        "holder": "${PROPERTY parent}"
      },
      {
        "func": "FLIP",
        "holder": "${PROPERTY parent}",
        "face": 0
      },
      {
        "func": "SHUFFLE",
        "holder": "${PROPERTY parent}"
      }
    ],
    "parent": "deckHolder"
  },
  "naicD": {
    "type": "deck",
    "id": "naicD",
    "x": 12,
    "y": 41,
    "cardTypes": {
      "T 1J": {
        "image": "/i/cards-default/1J.svg",
        "suit": "T",
        "suitColor": "🃏",
        "suitAlt": "5J",
        "rank": "J1",
        "rankA": "J1",
        "rankFixed": "J1 T"
      },
      "T 2J": {
        "image": "/i/cards-default/2J.svg",
        "suit": "T",
        "suitColor": "🃏",
        "suitAlt": "5J",
        "rank": "J2",
        "rankA": "J2",
        "rankFixed": "J2 T"
      },
      "C 01": {
        "image": "/i/cards-default/AC.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "01",
        "rankA": "5A",
        "rankFixed": "01 C"
      },
      "C 02": {
        "image": "/i/cards-default/2C.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "02",
        "rankA": "02",
        "rankFixed": "02 C"
      },
      "C 03": {
        "image": "/i/cards-default/3C.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "03",
        "rankA": "03",
        "rankFixed": "03 C"
      },
      "C 04": {
        "image": "/i/cards-default/4C.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "04",
        "rankA": "04",
        "rankFixed": "04 C"
      },
      "C 05": {
        "image": "/i/cards-default/5C.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "05",
        "rankA": "05",
        "rankFixed": "05 C"
      },
      "C 06": {
        "image": "/i/cards-default/6C.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "06",
        "rankA": "06",
        "rankFixed": "06 C"
      },
      "C 07": {
        "image": "/i/cards-default/7C.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "07",
        "rankA": "07",
        "rankFixed": "07 C"
      },
      "C 08": {
        "image": "/i/cards-default/8C.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "08",
        "rankA": "08",
        "rankFixed": "08 C"
      },
      "C 09": {
        "image": "/i/cards-default/9C.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "09",
        "rankA": "09",
        "rankFixed": "09 C"
      },
      "C 10": {
        "image": "/i/cards-default/TC.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "10",
        "rankA": "10",
        "rankFixed": "10 C"
      },
      "C 2J": {
        "image": "/i/cards-default/JC.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "2J",
        "rankA": "2J",
        "rankFixed": "2J C"
      },
      "C 3Q": {
        "image": "/i/cards-default/QC.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "3Q",
        "rankA": "3Q",
        "rankFixed": "3Q C"
      },
      "C 4K": {
        "image": "/i/cards-default/KC.svg",
        "suit": "C",
        "suitColor": "♣",
        "suitAlt": "1♣",
        "rank": "4K",
        "rankA": "4K",
        "rankFixed": "4K C"
      },
      "D 01": {
        "image": "/i/cards-default/AD.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "01",
        "rankA": "5A",
        "rankFixed": "01 D"
      },
      "D 02": {
        "image": "/i/cards-default/2D.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "02",
        "rankA": "02",
        "rankFixed": "02 D"
      },
      "D 03": {
        "image": "/i/cards-default/3D.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "03",
        "rankA": "03",
        "rankFixed": "03 D"
      },
      "D 04": {
        "image": "/i/cards-default/4D.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "04",
        "rankA": "04",
        "rankFixed": "04 D"
      },
      "D 05": {
        "image": "/i/cards-default/5D.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "05",
        "rankA": "05",
        "rankFixed": "05 D"
      },
      "D 06": {
        "image": "/i/cards-default/6D.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "06",
        "rankA": "06",
        "rankFixed": "06 D"
      },
      "D 07": {
        "image": "/i/cards-default/7D.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "07",
        "rankA": "07",
        "rankFixed": "07 D"
      },
      "D 08": {
        "image": "/i/cards-default/8D.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "08",
        "rankA": "08",
        "rankFixed": "08 D"
      },
      "D 09": {
        "image": "/i/cards-default/9D.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "09",
        "rankA": "09",
        "rankFixed": "09 D"
      },
      "D 10": {
        "image": "/i/cards-default/TD.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "10",
        "rankA": "10",
        "rankFixed": "10 D"
      },
      "D 2J": {
        "image": "/i/cards-default/JD.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "2J",
        "rankA": "2J",
        "rankFixed": "2J D"
      },
      "D 3Q": {
        "image": "/i/cards-default/QD.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "3Q",
        "rankA": "3Q",
        "rankFixed": "3Q D"
      },
      "D 4K": {
        "image": "/i/cards-default/KD.svg",
        "suit": "D",
        "suitColor": "♦",
        "suitAlt": "4♦",
        "rank": "4K",
        "rankA": "4K",
        "rankFixed": "4K D"
      },
      "H 01": {
        "image": "/i/cards-default/AH.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "01",
        "rankA": "5A",
        "rankFixed": "01 H"
      },
      "H 02": {
        "image": "/i/cards-default/2H.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "02",
        "rankA": "02",
        "rankFixed": "02 H"
      },
      "H 03": {
        "image": "/i/cards-default/3H.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "03",
        "rankA": "03",
        "rankFixed": "03 H"
      },
      "H 04": {
        "image": "/i/cards-default/4H.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "04",
        "rankA": "04",
        "rankFixed": "04 H"
      },
      "H 05": {
        "image": "/i/cards-default/5H.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "05",
        "rankA": "05",
        "rankFixed": "05 H"
      },
      "H 06": {
        "image": "/i/cards-default/6H.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "06",
        "rankA": "06",
        "rankFixed": "06 H"
      },
      "H 07": {
        "image": "/i/cards-default/7H.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "07",
        "rankA": "07",
        "rankFixed": "07 H"
      },
      "H 08": {
        "image": "/i/cards-default/8H.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "08",
        "rankA": "08",
        "rankFixed": "08 H"
      },
      "H 09": {
        "image": "/i/cards-default/9H.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "09",
        "rankA": "09",
        "rankFixed": "09 H"
      },
      "H 10": {
        "image": "/i/cards-default/TH.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "10",
        "rankA": "10",
        "rankFixed": "10 H"
      },
      "H 2J": {
        "image": "/i/cards-default/JH.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "2J",
        "rankA": "2J",
        "rankFixed": "2J H"
      },
      "H 3Q": {
        "image": "/i/cards-default/QH.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "3Q",
        "rankA": "3Q",
        "rankFixed": "3Q H"
      },
      "H 4K": {
        "image": "/i/cards-default/KH.svg",
        "suit": "H",
        "suitColor": "♥",
        "suitAlt": "2♥",
        "rank": "4K",
        "rankA": "4K",
        "rankFixed": "4K H"
      },
      "S 01": {
        "image": "/i/cards-default/AS.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "01",
        "rankA": "5A",
        "rankFixed": "01 S"
      },
      "S 02": {
        "image": "/i/cards-default/2S.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "02",
        "rankA": "02",
        "rankFixed": "02 S"
      },
      "S 03": {
        "image": "/i/cards-default/3S.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "03",
        "rankA": "03",
        "rankFixed": "03 S"
      },
      "S 04": {
        "image": "/i/cards-default/4S.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "04",
        "rankA": "04",
        "rankFixed": "04 S"
      },
      "S 05": {
        "image": "/i/cards-default/5S.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "05",
        "rankA": "05",
        "rankFixed": "05 S"
      },
      "S 06": {
        "image": "/i/cards-default/6S.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "06",
        "rankA": "06",
        "rankFixed": "06 S"
      },
      "S 07": {
        "image": "/i/cards-default/7S.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "07",
        "rankA": "07",
        "rankFixed": "07 S"
      },
      "S 08": {
        "image": "/i/cards-default/8S.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "08",
        "rankA": "08",
        "rankFixed": "08 S"
      },
      "S 09": {
        "image": "/i/cards-default/9S.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "09",
        "rankA": "09",
        "rankFixed": "09 S"
      },
      "S 10": {
        "image": "/i/cards-default/TS.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "10",
        "rankA": "10",
        "rankFixed": "10 S"
      },
      "S 2J": {
        "image": "/i/cards-default/JS.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "2J",
        "rankA": "2J",
        "rankFixed": "2J S"
      },
      "S 3Q": {
        "image": "/i/cards-default/QS.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "3Q",
        "rankA": "3Q",
        "rankFixed": "3Q S"
      },
      "S 4K": {
        "image": "/i/cards-default/KS.svg",
        "suit": "S",
        "suitColor": "♠",
        "suitAlt": "3♠",
        "rank": "4K",
        "rankA": "4K",
        "rankFixed": "4K S"
      }
    },
    "faceTemplates": [
      {
        "border": false,
        "radius": false,
        "objects": [
          {
            "type": "image",
            "x": 0,
            "y": 0,
            "width": 103,
            "height": 160,
            "valueType": "static",
            "value": "/i/cards-default/2B.svg",
            "color": "transparent"
          }
        ]
      },
      {
        "border": false,
        "radius": false,
        "objects": [
          {
            "type": "image",
            "x": 0,
            "y": 0,
            "width": 103,
            "height": 160,
            "valueType": "dynamic",
            "value": "image",
            "color": "transparent"
          }
        ]
      }
    ],
    "parent": "deckHolder"
  },
  "naic_A_C": {
    "id": "naic_A_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 01",
    "z": 6251
  },
  "naic_2_C": {
    "id": "naic_2_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 02",
    "z": 199
  },
  "naic_3_C": {
    "id": "naic_3_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 03",
    "z": 810
  },
  "naic_4_C": {
    "id": "naic_4_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 04",
    "z": 8843
  },
  "naic_5_C": {
    "id": "naic_5_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 05",
    "z": 2045
  },
  "naic_6_C": {
    "id": "naic_6_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 06",
    "z": 8920
  },
  "naic_7_C": {
    "id": "naic_7_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 07",
    "z": 6642
  },
  "naic_8_C": {
    "id": "naic_8_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 08",
    "z": 6574
  },
  "naic_9_C": {
    "id": "naic_9_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 09",
    "z": 3317
  },
  "naic_T_C": {
    "id": "naic_T_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 10",
    "z": 5950
  },
  "naic_J_C": {
    "id": "naic_J_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 2J",
    "z": 4362
  },
  "naic_Q_C": {
    "id": "naic_Q_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 3Q",
    "z": 3619
  },
  "naic_K_C": {
    "id": "naic_K_C",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "C 4K",
    "z": 1616
  },
  "naic_A_D": {
    "id": "naic_A_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 01",
    "z": 8392
  },
  "naic_2_D": {
    "id": "naic_2_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 02",
    "z": 7114
  },
  "naic_3_D": {
    "id": "naic_3_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 03",
    "z": 9621
  },
  "naic_4_D": {
    "id": "naic_4_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 04",
    "z": 3234
  },
  "naic_5_D": {
    "id": "naic_5_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 05",
    "z": 7559
  },
  "naic_6_D": {
    "id": "naic_6_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 06",
    "z": 2451
  },
  "naic_7_D": {
    "id": "naic_7_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 07",
    "z": 8203
  },
  "naic_8_D": {
    "id": "naic_8_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 08",
    "z": 5027
  },
  "naic_9_D": {
    "id": "naic_9_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 09",
    "z": 698
  },
  "naic_T_D": {
    "id": "naic_T_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 10",
    "z": 8559
  },
  "naic_J_D": {
    "id": "naic_J_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 2J",
    "z": 5300
  },
  "naic_Q_D": {
    "id": "naic_Q_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 3Q",
    "z": 5428
  },
  "naic_K_D": {
    "id": "naic_K_D",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "D 4K",
    "z": 4431
  },
  "naic_A_H": {
    "id": "naic_A_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 01",
    "z": 4419
  },
  "naic_2_H": {
    "id": "naic_2_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 02",
    "z": 3168
  },
  "naic_3_H": {
    "id": "naic_3_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 03",
    "z": 1736
  },
  "naic_4_H": {
    "id": "naic_4_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 04",
    "z": 3793
  },
  "naic_5_H": {
    "id": "naic_5_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 05",
    "z": 1644
  },
  "naic_6_H": {
    "id": "naic_6_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 06",
    "z": 2415
  },
  "naic_7_H": {
    "id": "naic_7_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 07",
    "z": 887
  },
  "naic_8_H": {
    "id": "naic_8_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 08",
    "z": 9581
  },
  "naic_9_H": {
    "id": "naic_9_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 09",
    "z": 1478
  },
  "naic_T_H": {
    "id": "naic_T_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 10",
    "z": 4986
  },
  "naic_J_H": {
    "id": "naic_J_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 2J",
    "z": 4157
  },
  "naic_Q_H": {
    "id": "naic_Q_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 3Q",
    "z": 1041
  },
  "naic_K_H": {
    "id": "naic_K_H",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "H 4K",
    "z": 4912
  },
  "naic_A_S": {
    "id": "naic_A_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 01",
    "z": 4421
  },
  "naic_2_S": {
    "id": "naic_2_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 02",
    "z": 5565
  },
  "naic_3_S": {
    "id": "naic_3_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 03",
    "z": 168
  },
  "naic_4_S": {
    "id": "naic_4_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 04",
    "z": 95
  },
  "naic_5_S": {
    "id": "naic_5_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 05",
    "z": 8267
  },
  "naic_6_S": {
    "id": "naic_6_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 06",
    "z": 9773
  },
  "naic_7_S": {
    "id": "naic_7_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 07",
    "z": 9574
  },
  "naic_8_S": {
    "id": "naic_8_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 08",
    "z": 6051
  },
  "naic_9_S": {
    "id": "naic_9_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 09",
    "z": 966
  },
  "naic_T_S": {
    "id": "naic_T_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 10",
    "z": 604
  },
  "naic_J_S": {
    "id": "naic_J_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 2J",
    "z": 1348
  },
  "naic_Q_S": {
    "id": "naic_Q_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 3Q",
    "z": 5381
  },
  "naic_K_S": {
    "id": "naic_K_S",
    "parent": "zfud",
    "deck": "naicD",
    "type": "card",
    "cardType": "S 4K",
    "z": 614
  },
  "hhtl": {
    "id": "hhtl",
    "parent": "pawnDisplay",
    "x": 109,
    "y": 4,
    "width": 90,
    "height": 90,
    "z": 2,
    "classes": "classicPiece",
    "color": "#4c5fea"
  },
  "hhtl1": {
    "id": "hhtl1",
    "parent": "pawnDisplay",
    "x": 214,
    "y": 4,
    "width": 90,
    "height": 90,
    "z": 3,
    "classes": "classicPiece",
    "color": "#4c5fea"
  },
  "hhtl2": {
    "id": "hhtl2",
    "parent": "pawnDisplay",
    "x": 319,
    "y": 4,
    "width": 90,
    "height": 90,
    "z": 4,
    "classes": "classicPiece",
    "color": "#4c5fea"
  },
  "hhtl4": {
    "id": "hhtl4",
    "x": 4,
    "y": 4,
    "width": 90,
    "height": 90,
    "z": 1,
    "classes": "classicPiece",
    "color": "#4c5fea",
    "parent": "pawnDisplay"
  },
  "deckHolder": {
    "type": "holder",
    "id": "deckHolder",
    "x": 1426.5,
    "y": 499,
    "z": 50,
    "dropTarget": {
      "type": "card"
    },
    "parent": "hldPage13"
  },
  "qjwt": {
    "image": "/assets/1478848789_20542",
    "id": "qjwt",
    "z": 108,
    "y": 110,
    "x": 1062,
    "width": 448,
    "height": 206,
    "parent": "hldPage13"
  },
  "zfud": {
    "type": "pile",
    "parent": "deckHolder",
    "x": 4,
    "y": 4,
    "width": 103,
    "height": 160,
    "id": "zfud"
  },
  "8smm": {
    "image": "/assets/-83346626_22768",
    "id": "8smm",
    "width": 442,
    "height": 103,
    "z": 114,
    "x": 1065,
    "y": 353.5,
    "parent": "hldPage13"
  },
  "hldPage14": {
    "type": "holder",
    "id": "hldPage14",
    "width": 1600,
    "height": 1000,
    "z": 40,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 14,
    "hldPageTopic": "Debugging Continued",
    "y": 4,
    "parent": "hldOff",
    "x": 4
  },
  "page14Text1": {
    "id": "page14Text1",
    "parent": "hldPage14",
    "x": 72,
    "y": 112,
    "width": 900,
    "height": 800,
    "z": 102,
    "movable": false,
    "css": "font-size:22px",
    "text": "Sometimes the code runs fine but it doesn't do what you expected. This is usually because what you told it to do is not what you thought you told it to do.           \n\nThis button should rotate these four pawns 180 degrees, but only the last one is rotating. Look at \"Original and applied operation\" in the debugger to see what the code is actually doing and what you could do to fix it.  The explanation of the ROTATE function from the wiki is shown below for reference.      \n\nThe \"Original and applied operation\" will show you the operation as it appears in your code, and the operation as it gets processed, which has any variables filled in by their current values.  It also shows the default values of arguments that you did not specify when you called the function. Looking at the \"Variables and collections afterwards\" can also help you see what is going on."
  },
  "ygny": {
    "image": "/assets/158610948_60694",
    "id": "ygny",
    "layer": 1,
    "movable": true,
    "width": 906,
    "height": 317,
    "enlarge": false,
    "z": 126,
    "y": 463.5,
    "x": 626,
    "parent": "hldPage14"
  },
  "_meta": {
    "version": 4,
    "info": {
      "name": "JSON Editor User Guide",
      "image": "/assets/1368104302_9195",
      "rules": "",
      "bgg": "",
      "year": "2021",
      "mode": "Tutorial",
      "time": "0",
      "players": "1",
      "language": "en-US",
      "variant": "",
      "attribution": "",
      "showName": false,
      "lastUpdate": 1638938699000
    }
  },
  "page11Image1": {
    "id": "page11Image1",
    "x": 739,
    "y": 540,
    "z": 1865,
    "image": "/assets/2017378147_382",
    "movable": false,
    "layer": 3,
    "parent": "hldPage11"
  },
  "hldPage15": {
    "type": "holder",
    "id": "hldPage15",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 15,
    "x": 4,
    "y": 4,
    "hldPageTopic": "Multi-Select Mode"
  },
  "page15Text1": {
    "id": "page15Text1",
    "x": 100,
    "y": 100,
    "width": 1400,
    "height": 800,
    "z": 1802,
    "movable": false,
    "css": "font-size:22px",
    "text": "You can manipulate properties of multiple widgets at the same time by activating multi-select mode.  To do this, hold Ctrl-Shift and then left click on multiple widgets. You can also use Ctrl and right click. Also, if there are multiple widgets under the cursor, you can select which one(s) you want by pressing Shift and the F1, F2, etc. function key for the corresponding widget. You can practice this now on the checkers below.\n\nThere are two other ways to specify multiple widgets. Once you activate multi-select mode, you will see a temporary new 'property' at the very top of the middle vertical column called 'widgets.' It will list the id of each selected widget. The first additonal way involves typing in the id of the desired widget using the same array format you see displayed. You can also delete individual widgets from the multi-select grouping by removing their ids from the 'widgets' array.\n\nThe other additional way is by using a JavaScript style regular expression. The expression will search the id field of all widgets in the room and add those that match. For example, the checkers below have ids of crown1, crown2, nocrown1, nocrown2. If you want to select all the widgets that include 'crown' in their name, add the following RegEx to the 'widgets' array: '/crown/' It should look like the image below.\n\nWhen looking at the properties of the multi-selected widgets, they will be grouped together as you see below. For example, all the x coordinates are listed in a group with the specific x coordinate for each widget identified. If the selected widgets all have the same value, then there will only be one entry.  For example, all the checkers are on layer 3.  If you want to change the value for all of the checkers at the same time, just change the 3 to the desired value. You can also add a new property by clicking on the blue 'add property' button.  Just type the name of the property in the textbox that appears and press 'Go.' Do not use quotations and do not enter the property value.  A new property will be created with a value of 'null' for widgets that do not have the property. Then you just change null to the desired value for all selected widgets. Widgets that already have the property will not be changed.",
    "parent": "hldPage15"
  },
  "crown1": {
    "id": "crown1",
    "parent": "hldPage15",
    "x": 100,
    "y": 700,
    "width": 73.5,
    "height": 73.5,
    "layer": 3,
    "z": 1806,
    "activeFace": 1,
    "color": "#4a4a4a",
    "faces": [
      {
        "classes": "checkersPiece"
      },
      {
        "classes": "checkersPiece crowned"
      }
    ],
    "resetProperties": {
      "x": 100,
      "y": 700,
      "activeFace": 1
    }
  },
  "crown2": {
    "id": "crown2",
    "parent": "hldPage15",
    "x": 200,
    "y": 700,
    "width": 73.5,
    "height": 73.5,
    "layer": 3,
    "z": 1796,
    "color": "#e84242",
    "faces": [
      {
        "classes": "checkersPiece"
      },
      {
        "classes": "checkersPiece crowned"
      }
    ],
    "resetProperties": {
      "x": 200,
      "y": 700,
      "activeFace": 1
    }
  },
  "nocrown1": {
    "id": "nocrown1",
    "parent": "hldPage15",
    "x": 100,
    "y": 800,
    "width": 73.5,
    "height": 73.5,
    "layer": 3,
    "z": 1811,
    "color": "#e2a633",
    "faces": [
      {
        "classes": "checkersPiece"
      },
      {
        "classes": "checkersPiece crowned"
      }
    ],
    "resetProperties": {
      "x": 100,
      "y": 800,
      "activeFace": 0
    }
  },
  "nocrown2": {
    "id": "nocrown2",
    "x": 200,
    "y": 800,
    "width": 73.5,
    "height": 73.5,
    "layer": 3,
    "z": 1813,
    "color": "#23ca5b",
    "faces": [
      {
        "classes": "checkersPiece"
      },
      {
        "classes": "checkersPiece crowned"
      }
    ],
    "resetProperties": {
      "x": 200,
      "y": 800,
      "activeFace": 0
    },
    "parent": "hldPage15"
  },
  "page15Image1": {
    "id": "page15Image1",
    "x": 874,
    "y": 415,
    "z": 1816,
    "image": "/assets/-1781871727_78461",
    "width": 700,
    "height": 700,
    "movable": false,
    "parent": "hldPage15"
  },
  "hldPage16": {
    "type": "holder",
    "id": "hldPage16",
    "parent": "hldOff",
    "width": 1600,
    "height": 1000,
    "z": 1,
    "alignChildren": false,
    "css": "background:transparent;border:none",
    "dropTarget": {},
    "hldPage": 16,
    "x": 4,
    "y": 4,
    "hldPageTopic": "Multi-Select Mode Continued"
  },
  "page15Text2": {
    "id": "page15Text2",
    "x": 95,
    "y": 90,
    "width": 1400,
    "height": 800,
    "z": 1824,
    "movable": false,
    "css": "font-size:22px",
    "text": "The multi-select mode also has context-sensitive options for aligning and distributing widgets in the room. To use this mode, multi-select the desired widgets (in this example, you will be using the 4 checkers below). Then move the cursor to the x or y coordinate.  This will bring up new options in the far-right vertical column that look like the image below.\n\nClick the 'align' button to bring up a menu with two drop-down options. The 'Coordinate' options are Center, Top/Left, Bottom/Right. If you select 'Top/Left' then the x or y coordinate of all widgets will be changed to the x (or y) coordinate based on what you choose as the 'Reference' option.  The 'Reference' options are First selected widget, Lowest value, Highest value, Center of all. Play around with the options to see how these work. Move the checkers around to different starting positions in the room to see how that changes things. Press the blue reset button to return the checkers to their original starting positions.\n\nAfter selecting multiple widgets, put the cursor in the x or y coordinate line.  Then press the 'distribute' button. This will instantly equalize the spacing between the selected widgets. Again, you can experiment with the checkers below.\n\nThis concludes the user guide.  Ask for help in the Discord channel if you have any questions or problems. ",
    "parent": "hldPage16"
  },
  "resetBtn1": {
    "type": "button",
    "id": "resetBtn1",
    "x": 766,
    "y": 823,
    "z": 1807,
    "clickRoutine": [
      {
        "func": "SELECT",
        "property": "resetProperties",
        "relation": "!=",
        "value": null
      },
      {
        "func": "FOREACH",
        "loopRoutine": [
          {
            "func": "FOREACH",
            "in": "${PROPERTY resetProperties OF $widgetID}",
            "loopRoutine": [
              {
                "func": "SET",
                "property": "${key}",
                "value": "${value}"
              }
            ]
          }
        ]
      }
    ],
    "text": "Reset",
    "parent": "hldPage16",
    "fixedParent": true,
    "layer": 3
  },
  "checker1": {
    "id": "checker1",
    "x": 100,
    "y": 700,
    "width": 73.5,
    "height": 73.5,
    "layer": 3,
    "z": 1835,
    "color": "#4a4a4a",
    "faces": [
      {
        "classes": "checkersPiece"
      },
      {
        "classes": "checkersPiece crowned"
      }
    ],
    "resetProperties": {
      "x": 100,
      "y": 700,
      "activeFace": 1
    },
    "undefined": 0,
    "activeFace": 1,
    "parent": "hldPage16"
  },
  "checker2": {
    "id": "checker2",
    "x": 200,
    "y": 700,
    "width": 73.5,
    "height": 73.5,
    "layer": 3,
    "z": 1845,
    "color": "#e84242",
    "faces": [
      {
        "classes": "checkersPiece"
      },
      {
        "classes": "checkersPiece crowned"
      }
    ],
    "resetProperties": {
      "x": 200,
      "y": 700,
      "activeFace": 1
    },
    "undefined": 0,
    "activeFace": 1,
    "parent": "hldPage16"
  },
  "checker3": {
    "id": "checker3",
    "x": 100,
    "y": 800,
    "width": 73.5,
    "height": 73.5,
    "layer": 3,
    "z": 1849,
    "color": "#e2a633",
    "faces": [
      {
        "classes": "checkersPiece"
      },
      {
        "classes": "checkersPiece crowned"
      }
    ],
    "resetProperties": {
      "x": 100,
      "y": 800,
      "activeFace": 0
    },
    "undefined": 0,
    "parent": "hldPage16"
  },
  "checker4": {
    "id": "checker4",
    "x": 200,
    "y": 800,
    "width": 73.5,
    "height": 73.5,
    "layer": 3,
    "z": 1847,
    "color": "#23ca5b",
    "faces": [
      {
        "classes": "checkersPiece"
      },
      {
        "classes": "checkersPiece crowned"
      }
    ],
    "resetProperties": {
      "x": 200,
      "y": 800,
      "activeFace": 0
    },
    "undefined": 0,
    "parent": "hldPage16"
  },
  "k55z": {
    "id": "k55z",
    "image": "/assets/-1105305608_30250",
    "z": 1820,
    "y": 520,
    "x": 1223,
    "width": 400,
    "height": 400,
    "parent": "hldPage16",
    "movable": false
  }
}