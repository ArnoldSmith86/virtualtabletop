{
  "_meta": {
    "version": 17,
    "info": {
      "name": "Operations - Arrays",
      "image": "/assets/-2038908983_7396",
      "rules": "",
      "bgg": "",
      "year": "2021",
      "mode": "Tutorial",
      "time": "",
      "attribution": "",
      "showName": false,
      "lastUpdate": 1748991356663,
      "skill": "",
      "description": "",
      "similarImage": "",
      "similarName": "",
      "similarAwards": "",
      "ruleText": "",
      "helpText": "",
      "similarDesigner": "",
      "variantImage": "",
      "variant": "Creating",
      "language": "en-US",
      "players": "1"
    }
  },
  "title": {
    "id": "title",
    "x": 400,
    "y": -2,
    "width": 800,
    "height": 60,
    "z": 74,
    "movable": false,
    "movableInEdit": false,
    "css": "font-size: 60px;text-align:center",
    "text": "Arrays: Creating"
  },
  "button2": {
    "type": "button",
    "id": "button2",
    "x": 416,
    "y": 402,
    "z": 22839,
    "clickRoutine": [
      "// First SELECT every widget in the room",
      {
        "func": "SELECT",
        "property": "id",
        "relation": "!=",
        "value": null
      },
      "// Then from that DEFAULT collection, GET the id of every widget and store it as an array.",
      {
        "func": "GET",
        "property": "id",
        "aggregation": "array",
        "variable": "allID"
      },
      "// Finally, SET the array onto the text property of the box in the middle of the screen.",
      {
        "func": "SET",
        "collection": [
          "array"
        ],
        "property": "text",
        "value": "${allID}"
      },
      "// VAR can be used to create a new array as well. In this example, the data is hard coded, but the values could just as easily be dynamic variables using the ${variableName} syntax or ${PROPERTY propertyName} syntax.",
      {
        "func": "VAR",
        "variables": {
          "newArray": [
            "Two",
            "Three",
            "Five",
            "Seven",
            "Eleven",
            "Thirteen",
            "Seventeen",
            "Nineteen",
            "Twenty-three"
          ]
        }
      }
    ],
    "text": "GET & VAR"
  },
  "overview": {
    "id": "overview",
    "x": 108,
    "y": 80,
    "width": 1400,
    "height": 150,
    "layer": -3,
    "z": 129,
    "movable": false,
    "movableInEdit": false,
    "css": "font-size: 25px; ",
    "html": "Arrays can be created using dynamic expressions, the functions <b>GET</b> and <b>VAR</b>, or using the array operations concatArray, split, or from. The main limitation to remember is that you cannot create an array using a syntax like <b>var newArray = [1,2,3]</b>. You can create an empty array that way, but to fill it with data, you must use another method. The various buttons in the room display their results in the box below."
  },
  "button3": {
    "type": "button",
    "id": "button3",
    "x": 743,
    "y": 402,
    "z": 22840,
    "clickRoutine": [
      "// Use concatArray to combine two dynamic variables.",
      "var myArray = ${PROPERTY arrayValues OF button1} concatArray ${PROPERTY arrayValues}",
      "// Then SET the array onto the text property of the box in the middle of the screen.",
      {
        "func": "SET",
        "collection": [
          "array"
        ],
        "property": "text",
        "value": "${myArray}"
      }
    ],
    "text": "concatArray",
    "css": {
      "font-size": "14px"
    },
    "arrayValues": [
      "Apple",
      "Banana",
      "Carrot",
      "Duck",
      "Egg"
    ]
  },
  "button4": {
    "type": "button",
    "id": "button4",
    "x": 1062,
    "y": 402,
    "z": 22840,
    "clickRoutine": [
      "// Use from to create an array from a string.",
      "var myArray = from ${PROPERTY html OF text4}",
      "// Then SET the array onto the text property of the box in the middle of the screen.",
      {
        "func": "SET",
        "collection": [
          "array"
        ],
        "property": "text",
        "value": "${myArray}"
      }
    ],
    "text": "from"
  },
  "button5": {
    "type": "button",
    "id": "button5",
    "x": 1386,
    "y": 402,
    "z": 11,
    "clickRoutine": [
      "// Use split to create an array from a list of items in a string.",
      "var myArray = split ${PROPERTY text OF splitText}",
      "// Then SET the array onto the text property of the box in the middle of the screen.",
      {
        "func": "SET",
        "collection": [
          "array"
        ],
        "property": "text",
        "value": "${myArray}"
      }
    ],
    "text": "split"
  },
  "text1": {
    "id": "text1",
    "x": 4,
    "y": 552,
    "width": 300,
    "z": 185,
    "movable": false,
    "movableInEdit": false,
    "css": {
      "font-size": "22px"
    },
    "text": "Use a dynamic expression like `var x = []` to create an empty array. Or use 'var x = ${PROPERTY arrayValues}' to create an variable array from an existing array that is a property of a widget. You can also create a new array using some of the operations described in the Modifying - Advanced variant of this tutorial such as push. This is aldo demonstrated in the Overview variant."
  },
  "button1": {
    "type": "button",
    "id": "button1",
    "x": 95,
    "y": 402,
    "z": 22841,
    "clickRoutine": [
      "// Create an empty array. Nothing is done with it in this routine. This is just to show how to do it",
      "var newArray = []",
      "// This creates an array of the prime numbers in the `arrayValues` property on this button.",
      "var myArray = ${PROPERTY arrayValues}",
      "// Finally, SET the array onto the text property of the box in the middle of the screen.",
      {
        "func": "SET",
        "collection": [
          "array"
        ],
        "property": "text",
        "value": "${myArray}"
      }
    ],
    "text": "var x = []",
    "arrayValues": [
      2,
      3,
      5,
      7,
      11,
      13,
      17,
      19,
      23
    ]
  },
  "text2": {
    "id": "text2",
    "x": 325,
    "y": 552,
    "width": 300,
    "z": 121,
    "movable": false,
    "movableInEdit": false,
    "css": {
      "font-size": "22px"
    },
    "html": "<b>GET</b> optionally uses the aggregation parameter `array` to put the results of the function into an array. The button above does that for the <b>id</b>s of all the widgets in the room and displays it in the box above.<br/><br/>Also, look at the JSON and the debug output for an example of how to use <b>VAR</b>."
  },
  "text3": {
    "id": "text3",
    "x": 651,
    "y": 552,
    "width": 300,
    "z": 9732,
    "movable": false,
    "movableInEdit": false,
    "css": {
      "font-size": "22px"
    },
    "html": "The array operation `concatArray` takes two arrays, combines them, and creates a new array. The button above combines the `arrayValue` properties on button 1 and button 3."
  },
  "text4": {
    "id": "text4",
    "x": 964,
    "y": 552,
    "width": 300,
    "z": 9732,
    "movable": false,
    "movableInEdit": false,
    "css": {
      "font-size": "22px"
    },
    "html": "The array operation `from` in the button above creates an array from this string of text."
  },
  "text5": {
    "id": "text5",
    "x": 1294,
    "y": 552,
    "width": 300,
    "z": 9732,
    "movable": false,
    "movableInEdit": false,
    "css": {
      "font-size": "22px"
    },
    "html": "The array operation `split` creates an array out of strings by splitting the string by a deliminator, which is usually a comma. This example starts with a list of words, but you can create your own string. Just enter words in the box below separated by a comma with no space in between."
  },
  "array": {
    "id": "array",
    "x": 623,
    "y": 240,
    "width": 300,
    "height": 90,
    "z": 26395,
    "movable": false,
    "css": {
      "background-color": "light-grey",
      "border-style": "solid",
      "font-size": "20px"
    },
    "text": [
      "Apple,Banana,Carrot,Duck,Egg"
    ],
    "type": "label"
  },
  "splitText": {
    "type": "label",
    "id": "splitText",
    "x": 1284,
    "y": 846,
    "width": 300,
    "height": 60,
    "z": 26396,
    "css": "background-color:white; border-style: solid;",
    "editable": true,
    "text": "Apple,Banana,Carrot,Duck,Egg"
  }
}