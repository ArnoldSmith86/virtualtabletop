{
  "_meta": {
    "version": 3,
    "info": {
      "name": "Other Widgets",
      "image": "/assets/-104596149_22670",
      "rules": "",
      "bgg": "",
      "year": "",
      "mode": "Assets",
      "time": "",
      "players": "0",
      "language": "en-US",
      "variant": "Misc Tools",
      "attribution": "The pawns and marbles were designed in Microsoft Paint 3d based on models with no copyright restrictions.  These pieces were created by https://www.reddit.com/user/96LawDawg and are released to the Public Domain by CC0.\n\n--\n\nThese pieces were created by https://www.reddit.com/user/96LawDawg and are released to the Public Domain by CC0.\n\n--\n\nItems are from https://craftpix.net/freebies/free-buttons-2d-game-objects/ and are available under the Craftpix.net license.\n\n--\n\nItems are from https://craftpix.net/freebies/free-crystals-2d-game-items/ and are available under the Craftpix.net license.\n\n\n\n--\n\nThese widgets can help you when developing a room.",
      "showName": false,
      "lastUpdate": 1622843648000
    }
  },
  "69uo": {
    "text": "X: 179\nY: 231\nBox Size\n100 x 100",
    "z": 244,
    "css": "border: solid red 1px;background:white; font-size:18px; text-align: center;",
    "faces": [
      {
        "css": "border: solid red 1px;background:white; font-size:18px; text-align: center;"
      },
      {
        "css": "border: solid red 1px;background:transparent; font-size:18px; text-align: center;"
      }
    ],
    "changeRoutine": [
      {
        "func": "GET",
        "collection": "thisButton",
        "property": "x",
        "variable": "xPos"
      },
      {
        "func": "GET",
        "collection": "thisButton",
        "property": "y",
        "variable": "yPos"
      },
      {
        "func": "SET",
        "collection": "thisButton",
        "property": "text",
        "value": "X: ${xPos}\nY: ${yPos}\nBox Size\n100 x 100"
      }
    ],
    "id": "69uo",
    "width": 98,
    "height": 98,
    "grid": [
      {
        "x": 0,
        "y": 0
      }
    ],
    "x": 179,
    "y": 231,
    "activeFace": 1
  },
  "fst0": {
    "text": "X: 284\nY: 231\nBox Size\n100 x 100",
    "z": 247,
    "css": "border: solid red 1px;background:white; font-size:18px; text-align: center;",
    "faces": [
      {
        "css": "border: solid red 1px;background:white; font-size:18px; text-align: center;"
      },
      {
        "css": "border: solid red 1px;background:transparent; font-size:18px; text-align: center;"
      }
    ],
    "changeRoutine": [
      {
        "func": "GET",
        "collection": "thisButton",
        "property": "x",
        "variable": "xPos"
      },
      {
        "func": "GET",
        "collection": "thisButton",
        "property": "y",
        "variable": "yPos"
      },
      {
        "func": "SET",
        "collection": "thisButton",
        "property": "text",
        "value": "X: ${xPos}\nY: ${yPos}\nBox Size\n100 x 100"
      }
    ],
    "id": "fst0",
    "width": 98,
    "height": 98,
    "grid": [
      {
        "x": 0,
        "y": 0
      }
    ],
    "x": 284,
    "y": 231
  },
  "layerHelper": {
    "type": "button",
    "text": "Layers",
    "clickRoutine": [
      {
        "func": "SELECT",
        "property": "CID",
        "value": "layerlabel",
        "collection": "myLabel"
      },
      {
        "func": "COUNT",
        "collection": "myLabel",
        "variable": "COUNT"
      },
      {
        "func": "IF",
        "operand1": "${COUNT}",
        "relation": "<=",
        "operand2": 0,
        "thenRoutine": [
          {
            "func": "CLONE",
            "source": "thisButton",
            "xOffset": 100,
            "properties": {
              "css": "background-color:white; color: black; text-align: left",
              "width": 400,
              "height": 500,
              "type": "label",
              "CID": "layerlabel",
              "count": 0,
              "layers": null,
              "maxlayer": null,
              "minlayer": null,
              "objectRoutine": null,
              "plus": null,
              "text": "this is a test",
              "debug": false,
              "movable": true
            },
            "collection": "myClones"
          },
          {
            "func": "SELECT",
            "property": "CID",
            "value": "layerlabel",
            "collection": "myLabel"
          }
        ]
      },
      {
        "func": "IF",
        "operand1": "${PROPERTY count}",
        "relation": "==",
        "operand2": 0,
        "thenRoutine": [
          {
            "func": "SET",
            "collection": "myLabel",
            "property": "text",
            "relation": "=",
            "value": ""
          },
          {
            "func": "SELECT",
            "sortBy": {
              "key": "layer",
              "reverse": false
            },
            "collection": "myMin",
            "property": "id",
            "relation": "!=",
            "value": null
          },
          {
            "func": "SELECT",
            "source": "myMin",
            "value": null,
            "collection": "myMin",
            "property": "id",
            "relation": "!=",
            "max": 1
          },
          {
            "func": "SELECT",
            "sortBy": {
              "key": "layer",
              "reverse": true
            },
            "collection": "myMax",
            "property": "id",
            "relation": "!=",
            "value": null
          },
          {
            "func": "SELECT",
            "source": "myMax",
            "value": null,
            "collection": "myMax",
            "property": "id",
            "relation": "!=",
            "max": 1
          },
          {
            "func": "GET",
            "property": "layer",
            "collection": "myMin",
            "variable": "minLayer"
          },
          {
            "func": "GET",
            "property": "layer",
            "collection": "myMax",
            "variable": "maxLayer"
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "minlayer",
            "relation": "=",
            "value": "${minLayer}"
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "maxlayer",
            "relation": "=",
            "value": "${maxLayer}"
          },
          "var layers = ${maxLayer} - ${minLayer}",
          "var count = ${PROPERTY count} + 1",
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "count",
            "value": "${count}"
          },
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "layers",
            "value": "${layers}"
          },
          {
            "func": "CALL",
            "routine": "clickRoutine"
          }
        ],
        "elseRoutine": [
          "var count = ${PROPERTY count} + 1",
          {
            "func": "SET",
            "collection": "thisButton",
            "property": "count",
            "value": "${count}"
          },
          "var currentLayer = ${minLayer} + ${plus}",
          "var plus = ${plus} + 1",
          {
            "func": "SET",
            "collection": "thisButon",
            "property": "plus",
            "value": "${plus}"
          },
          {
            "func": "SELECT",
            "property": "layer",
            "value": "${currentLayer}",
            "collection": "myCollection"
          },
          {
            "func": "SELECT",
            "source": "myCollection",
            "property": "type",
            "value": "timer",
            "collection": "myOther",
            "relation": "!="
          },
          {
            "func": "SELECT",
            "source": "myOther",
            "property": "type",
            "value": "spinner",
            "collection": "myOther",
            "relation": "!="
          },
          {
            "func": "SELECT",
            "source": "myOther",
            "property": "type",
            "value": "button",
            "collection": "myOther",
            "relation": "!="
          },
          {
            "func": "SELECT",
            "source": "myOther",
            "property": "type",
            "value": "label",
            "collection": "myOther",
            "relation": "!="
          },
          {
            "func": "SELECT",
            "source": "myOther",
            "property": "type",
            "value": "holder",
            "collection": "myOther",
            "relation": "!="
          },
          {
            "func": "SELECT",
            "source": "myOther",
            "property": "type",
            "value": "deck",
            "collection": "myOther",
            "relation": "!="
          },
          {
            "func": "SELECT",
            "source": "myOther",
            "property": "type",
            "value": "card",
            "collection": "myOther",
            "relation": "!="
          },
          {
            "func": "SELECT",
            "source": "myCollection",
            "property": "type",
            "value": "timer",
            "collection": "myTimers"
          },
          {
            "func": "GET",
            "collection": "myTimers",
            "property": "id",
            "aggregation": "array",
            "variable": "timerArray"
          },
          {
            "func": "SELECT",
            "source": "myCollection",
            "property": "type",
            "value": "spinner",
            "collection": "mySpinners"
          },
          {
            "func": "GET",
            "collection": "mySpinners",
            "property": "id",
            "aggregation": "array",
            "variable": "spinnerArray"
          },
          {
            "func": "SELECT",
            "source": "myCollection",
            "property": "type",
            "value": "button",
            "collection": "myButtons"
          },
          {
            "func": "GET",
            "collection": "myButtons",
            "property": "id",
            "aggregation": "array",
            "variable": "buttonArray"
          },
          {
            "func": "SELECT",
            "source": "myCollection",
            "property": "type",
            "value": "label",
            "collection": "myLabels"
          },
          {
            "func": "GET",
            "collection": "myLabels",
            "property": "id",
            "aggregation": "array",
            "variable": "labelArray"
          },
          {
            "func": "SELECT",
            "source": "myCollection",
            "property": "type",
            "value": "holder",
            "collection": "myHolders"
          },
          {
            "func": "GET",
            "collection": "myHolders",
            "property": "id",
            "aggregation": "array",
            "variable": "holderArray"
          },
          {
            "func": "SELECT",
            "source": "myCollection",
            "property": "type",
            "value": "deck",
            "collection": "myDecks"
          },
          {
            "func": "GET",
            "collection": "myDecks",
            "property": "id",
            "aggregation": "array",
            "variable": "deckArray"
          },
          {
            "func": "SELECT",
            "source": "myCollection",
            "property": "type",
            "value": "card",
            "collection": "myCards"
          },
          {
            "func": "GET",
            "collection": "myCards",
            "property": "id",
            "aggregation": "array",
            "variable": "cardArray"
          },
          {
            "func": "GET",
            "collection": "myOther",
            "property": "id",
            "aggregation": "array",
            "variable": "otherArray"
          },
          "var timerArray = ${timerArray} sort",
          "var spinnerArray = ${spinnerArray} sort",
          "var buttonArray = ${buttonArray} sort",
          "var labelArray = ${labelArray} sort",
          "var holderArray = ${holderArray} sort",
          "var deckArray = ${deckArray} sort",
          "var cardArray = ${cardArray} sort",
          "var otherArray = ${otherArray} sort",
          {
            "func": "SET",
            "collection": "myLabel",
            "relation": "+",
            "property": "text",
            "value": "\n Layer ${currentLayer}: \n"
          },
          {
            "func": "IF",
            "operand1": "${buttonArray}",
            "relation": "!=",
            "operand2": "",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "+",
                "property": "text",
                "value": " Buttons: (${buttonArray})\n"
              }
            ]
          },
          {
            "func": "IF",
            "operand1": "${deckArray}",
            "relation": "!=",
            "operand2": "",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "+",
                "property": "text",
                "value": " Decks: (${deckArray})\n"
              }
            ]
          },
          {
            "func": "IF",
            "operand1": "${holderArray}",
            "relation": "!=",
            "operand2": "",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "+",
                "property": "text",
                "value": " Holders: (${holderArray})\n"
              }
            ]
          },
          {
            "func": "IF",
            "operand1": "${labelArray}",
            "relation": "!=",
            "operand2": "",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "+",
                "property": "text",
                "value": " Labels: (${labelArray})\n"
              }
            ]
          },
          {
            "func": "IF",
            "operand1": "${spinnerArray}",
            "relation": "!=",
            "operand2": "",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "+",
                "property": "text",
                "value": " Spinners: (${spinnerArray})\n"
              }
            ]
          },
          {
            "func": "IF",
            "operand1": "${timerArray}",
            "relation": "!=",
            "operand2": "",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "+",
                "property": "text",
                "value": " Timers: (${timerArray})\n"
              }
            ]
          },
          {
            "func": "IF",
            "operand1": "${cardArray}",
            "relation": "!=",
            "operand2": "",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "+",
                "property": "text",
                "value": " Cards: (${cardArray})\n"
              }
            ]
          },
          {
            "func": "IF",
            "operand1": "${otherArray}",
            "relation": "!=",
            "operand2": "",
            "thenRoutine": [
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "+",
                "property": "text",
                "value": " Other: (${otherArray})\n"
              }
            ]
          },
          {
            "func": "IF",
            "operand1": "${currentLayer}",
            "relation": "<",
            "operand2": "${PROPERTY maxlayer}",
            "thenRoutine": [
              {
                "func": "CALL",
                "routine": "clickRoutine"
              }
            ],
            "elseRoutine": [
              {
                "func": "GET",
                "collection": "myLabel",
                "property": "text",
                "variable": "thisText"
              },
              "var string = ${thisText} replaceAll ',' ', '",
              {
                "func": "SET",
                "collection": "myLabel",
                "relation": "=",
                "property": "text",
                "value": "${string}"
              },
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "count",
                "value": 0
              },
              {
                "func": "GET",
                "collection": "myLabel",
                "property": "id",
                "variable": "labelId"
              },
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "parent",
                "value": "${labelId}"
              },
              {
                "func": "SET",
                "collection": "thisButton",
                "property": "x",
                "value": -100
              }
            ]
          }
        ]
      }
    ],
    "z": 880,
    "id": "layerHelper",
    "plus": 0,
    "layers": 5,
    "count": 0,
    "objectRoutine": [],
    "maxlayer": 2,
    "minlayer": -3,
    "x": 866,
    "movable": true,
    "y": 238
  },
  "n052": {
    "text": "Copy and paste one of these 100x100 square boxes into your room to help locate coordinates and assist with spacing.  Click to change from transparent to opaque.",
    "id": "n052",
    "width": 400,
    "css": "font-size: 25px; ",
    "z": 246,
    "x": 127,
    "y": 69
  },
  "hjpp": {
    "text": "Copy this button into any room and press it.  It will display a list of widgets sorted by layer, then by type, and then alphabetically. Be sure to copy the button in the state before it is clicked because afterward it changes parent and locations.",
    "id": "hjpp",
    "width": 600,
    "css": "font-size: 25px; ",
    "z": 251,
    "x": 645,
    "y": 65
  }
}